
stabilizatorSDK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fc0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  08007160  08007160  00017160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073e0  080073e0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080073e0  080073e0  000173e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073e8  080073e8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073e8  080073e8  000173e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073ec  080073ec  000173ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080073f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a24  20000074  08007464  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a98  08007464  00024a98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a314  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000346b  00000000  00000000  0003a3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001400  00000000  00000000  0003d828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012d8  00000000  00000000  0003ec28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004d8f  00000000  00000000  0003ff00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015084  00000000  00000000  00044c8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098ec5  00000000  00000000  00059d13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f2bd8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f88  00000000  00000000  000f2c2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007148 	.word	0x08007148

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08007148 	.word	0x08007148

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057c:	f000 fbbc 	bl	8000cf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000580:	f000 f83e 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000584:	f000 f8d2 	bl	800072c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000588:	f000 f8a6 	bl	80006d8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 800058c:	4813      	ldr	r0, [pc, #76]	; (80005dc <main+0x64>)
 800058e:	f000 f98f 	bl	80008b0 <RetargetInit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000592:	f002 f9c7 	bl	8002924 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000596:	4a12      	ldr	r2, [pc, #72]	; (80005e0 <main+0x68>)
 8000598:	2100      	movs	r1, #0
 800059a:	4812      	ldr	r0, [pc, #72]	; (80005e4 <main+0x6c>)
 800059c:	f002 fa0c 	bl	80029b8 <osThreadNew>
 80005a0:	4603      	mov	r3, r0
 80005a2:	4a11      	ldr	r2, [pc, #68]	; (80005e8 <main+0x70>)
 80005a4:	6013      	str	r3, [r2, #0]
  numberTaskHandle = osThreadNew(TaskNumber, NULL, &numberTask_attributes);
 80005a6:	4a11      	ldr	r2, [pc, #68]	; (80005ec <main+0x74>)
 80005a8:	2100      	movs	r1, #0
 80005aa:	4811      	ldr	r0, [pc, #68]	; (80005f0 <main+0x78>)
 80005ac:	f002 fa04 	bl	80029b8 <osThreadNew>
 80005b0:	4603      	mov	r3, r0
 80005b2:	4a10      	ldr	r2, [pc, #64]	; (80005f4 <main+0x7c>)
 80005b4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005b6:	f002 f9d9 	bl	800296c <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET){
 80005ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005be:	480e      	ldr	r0, [pc, #56]	; (80005f8 <main+0x80>)
 80005c0:	f000 fe66 	bl	8001290 <HAL_GPIO_ReadPin>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d103      	bne.n	80005d2 <main+0x5a>
	          HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80005ca:	2120      	movs	r1, #32
 80005cc:	480b      	ldr	r0, [pc, #44]	; (80005fc <main+0x84>)
 80005ce:	f000 fe90 	bl	80012f2 <HAL_GPIO_TogglePin>
	  }
	  HAL_Delay(100);
 80005d2:	2064      	movs	r0, #100	; 0x64
 80005d4:	f000 fbd2 	bl	8000d7c <HAL_Delay>
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET){
 80005d8:	e7ef      	b.n	80005ba <main+0x42>
 80005da:	bf00      	nop
 80005dc:	200049b4 	.word	0x200049b4
 80005e0:	080071cc 	.word	0x080071cc
 80005e4:	08000841 	.word	0x08000841
 80005e8:	200049ac 	.word	0x200049ac
 80005ec:	080071f0 	.word	0x080071f0
 80005f0:	0800080d 	.word	0x0800080d
 80005f4:	200049b0 	.word	0x200049b0
 80005f8:	40020800 	.word	0x40020800
 80005fc:	40020000 	.word	0x40020000

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b094      	sub	sp, #80	; 0x50
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0320 	add.w	r3, r7, #32
 800060a:	2230      	movs	r2, #48	; 0x30
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f004 ff3c 	bl	800548c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	4b29      	ldr	r3, [pc, #164]	; (80006d0 <SystemClock_Config+0xd0>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	4a28      	ldr	r2, [pc, #160]	; (80006d0 <SystemClock_Config+0xd0>)
 800062e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000632:	6413      	str	r3, [r2, #64]	; 0x40
 8000634:	4b26      	ldr	r3, [pc, #152]	; (80006d0 <SystemClock_Config+0xd0>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000640:	2300      	movs	r3, #0
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	4b23      	ldr	r3, [pc, #140]	; (80006d4 <SystemClock_Config+0xd4>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800064c:	4a21      	ldr	r2, [pc, #132]	; (80006d4 <SystemClock_Config+0xd4>)
 800064e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000652:	6013      	str	r3, [r2, #0]
 8000654:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <SystemClock_Config+0xd4>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000660:	2302      	movs	r3, #2
 8000662:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000664:	2301      	movs	r3, #1
 8000666:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000668:	2310      	movs	r3, #16
 800066a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066c:	2302      	movs	r3, #2
 800066e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000670:	2300      	movs	r3, #0
 8000672:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000674:	2310      	movs	r3, #16
 8000676:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000678:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800067c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800067e:	2304      	movs	r3, #4
 8000680:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000682:	2307      	movs	r3, #7
 8000684:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000686:	f107 0320 	add.w	r3, r7, #32
 800068a:	4618      	mov	r0, r3
 800068c:	f000 fe4c 	bl	8001328 <HAL_RCC_OscConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000696:	f000 f905 	bl	80008a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069a:	230f      	movs	r3, #15
 800069c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069e:	2302      	movs	r3, #2
 80006a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2102      	movs	r1, #2
 80006b6:	4618      	mov	r0, r3
 80006b8:	f001 f8ae 	bl	8001818 <HAL_RCC_ClockConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006c2:	f000 f8ef 	bl	80008a4 <Error_Handler>
  }
}
 80006c6:	bf00      	nop
 80006c8:	3750      	adds	r7, #80	; 0x50
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40007000 	.word	0x40007000

080006d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006dc:	4b11      	ldr	r3, [pc, #68]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 80006de:	4a12      	ldr	r2, [pc, #72]	; (8000728 <MX_USART2_UART_Init+0x50>)
 80006e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006e2:	4b10      	ldr	r3, [pc, #64]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 80006e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006f0:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006f6:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006fc:	4b09      	ldr	r3, [pc, #36]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 80006fe:	220c      	movs	r2, #12
 8000700:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000702:	4b08      	ldr	r3, [pc, #32]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000708:	4b06      	ldr	r3, [pc, #24]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800070e:	4805      	ldr	r0, [pc, #20]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 8000710:	f001 fd30 	bl	8002174 <HAL_UART_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800071a:	f000 f8c3 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	200049b4 	.word	0x200049b4
 8000728:	40004400 	.word	0x40004400

0800072c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	; 0x28
 8000730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]
 8000746:	4b2d      	ldr	r3, [pc, #180]	; (80007fc <MX_GPIO_Init+0xd0>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a2c      	ldr	r2, [pc, #176]	; (80007fc <MX_GPIO_Init+0xd0>)
 800074c:	f043 0304 	orr.w	r3, r3, #4
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b2a      	ldr	r3, [pc, #168]	; (80007fc <MX_GPIO_Init+0xd0>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0304 	and.w	r3, r3, #4
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	4b26      	ldr	r3, [pc, #152]	; (80007fc <MX_GPIO_Init+0xd0>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a25      	ldr	r2, [pc, #148]	; (80007fc <MX_GPIO_Init+0xd0>)
 8000768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b23      	ldr	r3, [pc, #140]	; (80007fc <MX_GPIO_Init+0xd0>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	4b1f      	ldr	r3, [pc, #124]	; (80007fc <MX_GPIO_Init+0xd0>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a1e      	ldr	r2, [pc, #120]	; (80007fc <MX_GPIO_Init+0xd0>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b1c      	ldr	r3, [pc, #112]	; (80007fc <MX_GPIO_Init+0xd0>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	4b18      	ldr	r3, [pc, #96]	; (80007fc <MX_GPIO_Init+0xd0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a17      	ldr	r2, [pc, #92]	; (80007fc <MX_GPIO_Init+0xd0>)
 80007a0:	f043 0302 	orr.w	r3, r3, #2
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b15      	ldr	r3, [pc, #84]	; (80007fc <MX_GPIO_Init+0xd0>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0302 	and.w	r3, r3, #2
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2120      	movs	r1, #32
 80007b6:	4812      	ldr	r0, [pc, #72]	; (8000800 <MX_GPIO_Init+0xd4>)
 80007b8:	f000 fd82 	bl	80012c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007c2:	4b10      	ldr	r3, [pc, #64]	; (8000804 <MX_GPIO_Init+0xd8>)
 80007c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	4619      	mov	r1, r3
 80007d0:	480d      	ldr	r0, [pc, #52]	; (8000808 <MX_GPIO_Init+0xdc>)
 80007d2:	f000 fbd9 	bl	8000f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007d6:	2320      	movs	r3, #32
 80007d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007da:	2301      	movs	r3, #1
 80007dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007e6:	f107 0314 	add.w	r3, r7, #20
 80007ea:	4619      	mov	r1, r3
 80007ec:	4804      	ldr	r0, [pc, #16]	; (8000800 <MX_GPIO_Init+0xd4>)
 80007ee:	f000 fbcb 	bl	8000f88 <HAL_GPIO_Init>

}
 80007f2:	bf00      	nop
 80007f4:	3728      	adds	r7, #40	; 0x28
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40023800 	.word	0x40023800
 8000800:	40020000 	.word	0x40020000
 8000804:	10210000 	.word	0x10210000
 8000808:	40020800 	.word	0x40020800

0800080c <TaskNumber>:

/* USER CODE BEGIN 4 */
void TaskNumber(void *argument){
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
	int number;
	while(1){
		printf("Task loop enter a number:\r");
 8000814:	4807      	ldr	r0, [pc, #28]	; (8000834 <TaskNumber+0x28>)
 8000816:	f004 fe41 	bl	800549c <iprintf>
		scanf("%d", number);
 800081a:	68f9      	ldr	r1, [r7, #12]
 800081c:	4806      	ldr	r0, [pc, #24]	; (8000838 <TaskNumber+0x2c>)
 800081e:	f004 fe55 	bl	80054cc <iscanf>
		number++;
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	3301      	adds	r3, #1
 8000826:	60fb      	str	r3, [r7, #12]
		printf("Number + 1: %d", number);
 8000828:	68f9      	ldr	r1, [r7, #12]
 800082a:	4804      	ldr	r0, [pc, #16]	; (800083c <TaskNumber+0x30>)
 800082c:	f004 fe36 	bl	800549c <iprintf>
		printf("Task loop enter a number:\r");
 8000830:	e7f0      	b.n	8000814 <TaskNumber+0x8>
 8000832:	bf00      	nop
 8000834:	08007178 	.word	0x08007178
 8000838:	08007194 	.word	0x08007194
 800083c:	08007198 	.word	0x08007198

08000840 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  {
	  /*char buf[100];
	  printf("\r\nYour name: ");
	  scanf("%s", buf);
	  printf("\r\nHello, %s!\r\n", buf);*/
	  xLastWakeTime = xTaskGetTickCount();
 8000848:	f003 fa4e 	bl	8003ce8 <xTaskGetTickCount>
 800084c:	4603      	mov	r3, r0
 800084e:	60fb      	str	r3, [r7, #12]
	  vTaskDelayUntil(&xLastWakeTime, 100);
 8000850:	f107 030c 	add.w	r3, r7, #12
 8000854:	2164      	movs	r1, #100	; 0x64
 8000856:	4618      	mov	r0, r3
 8000858:	f003 f8b6 	bl	80039c8 <vTaskDelayUntil>
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET){
 800085c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000860:	4805      	ldr	r0, [pc, #20]	; (8000878 <StartDefaultTask+0x38>)
 8000862:	f000 fd15 	bl	8001290 <HAL_GPIO_ReadPin>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d1ed      	bne.n	8000848 <StartDefaultTask+0x8>
	  	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800086c:	2120      	movs	r1, #32
 800086e:	4803      	ldr	r0, [pc, #12]	; (800087c <StartDefaultTask+0x3c>)
 8000870:	f000 fd3f 	bl	80012f2 <HAL_GPIO_TogglePin>
	  xLastWakeTime = xTaskGetTickCount();
 8000874:	e7e8      	b.n	8000848 <StartDefaultTask+0x8>
 8000876:	bf00      	nop
 8000878:	40020800 	.word	0x40020800
 800087c:	40020000 	.word	0x40020000

08000880 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a04      	ldr	r2, [pc, #16]	; (80008a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d101      	bne.n	8000896 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000892:	f000 fa53 	bl	8000d3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40010000 	.word	0x40010000

080008a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a8:	b672      	cpsid	i
}
 80008aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ac:	e7fe      	b.n	80008ac <Error_Handler+0x8>
	...

080008b0 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80008b8:	4a07      	ldr	r2, [pc, #28]	; (80008d8 <RetargetInit+0x28>)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80008be:	4b07      	ldr	r3, [pc, #28]	; (80008dc <RetargetInit+0x2c>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	6898      	ldr	r0, [r3, #8]
 80008c4:	2300      	movs	r3, #0
 80008c6:	2202      	movs	r2, #2
 80008c8:	2100      	movs	r1, #0
 80008ca:	f004 fe17 	bl	80054fc <setvbuf>
}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	200049f8 	.word	0x200049f8
 80008dc:	20000010 	.word	0x20000010

080008e0 <_isatty>:

int _isatty(int fd) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	db04      	blt.n	80008f8 <_isatty+0x18>
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2b02      	cmp	r3, #2
 80008f2:	dc01      	bgt.n	80008f8 <_isatty+0x18>
    return 1;
 80008f4:	2301      	movs	r3, #1
 80008f6:	e005      	b.n	8000904 <_isatty+0x24>

  errno = EBADF;
 80008f8:	f004 fd90 	bl	800541c <__errno>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2209      	movs	r2, #9
 8000900:	601a      	str	r2, [r3, #0]
  return 0;
 8000902:	2300      	movs	r3, #0
}
 8000904:	4618      	mov	r0, r3
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <_write>:

int _write(int fd, char* ptr, int len) {
 800090c:	b580      	push	{r7, lr}
 800090e:	b086      	sub	sp, #24
 8000910:	af00      	add	r7, sp, #0
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	60b9      	str	r1, [r7, #8]
 8000916:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	2b01      	cmp	r3, #1
 800091c:	d002      	beq.n	8000924 <_write+0x18>
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	2b02      	cmp	r3, #2
 8000922:	d111      	bne.n	8000948 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000924:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <_write+0x54>)
 8000926:	6818      	ldr	r0, [r3, #0]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	b29a      	uxth	r2, r3
 800092c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000930:	68b9      	ldr	r1, [r7, #8]
 8000932:	f001 fc6c 	bl	800220e <HAL_UART_Transmit>
 8000936:	4603      	mov	r3, r0
 8000938:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800093a:	7dfb      	ldrb	r3, [r7, #23]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d101      	bne.n	8000944 <_write+0x38>
      return len;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	e008      	b.n	8000956 <_write+0x4a>
    else
      return EIO;
 8000944:	2305      	movs	r3, #5
 8000946:	e006      	b.n	8000956 <_write+0x4a>
  }
  errno = EBADF;
 8000948:	f004 fd68 	bl	800541c <__errno>
 800094c:	4603      	mov	r3, r0
 800094e:	2209      	movs	r2, #9
 8000950:	601a      	str	r2, [r3, #0]
  return -1;
 8000952:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000956:	4618      	mov	r0, r3
 8000958:	3718      	adds	r7, #24
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	200049f8 	.word	0x200049f8

08000964 <_close>:

int _close(int fd) {
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2b00      	cmp	r3, #0
 8000970:	db04      	blt.n	800097c <_close+0x18>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2b02      	cmp	r3, #2
 8000976:	dc01      	bgt.n	800097c <_close+0x18>
    return 0;
 8000978:	2300      	movs	r3, #0
 800097a:	e006      	b.n	800098a <_close+0x26>

  errno = EBADF;
 800097c:	f004 fd4e 	bl	800541c <__errno>
 8000980:	4603      	mov	r3, r0
 8000982:	2209      	movs	r2, #9
 8000984:	601a      	str	r2, [r3, #0]
  return -1;
 8000986:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800098a:	4618      	mov	r0, r3
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000992:	b580      	push	{r7, lr}
 8000994:	b084      	sub	sp, #16
 8000996:	af00      	add	r7, sp, #0
 8000998:	60f8      	str	r0, [r7, #12]
 800099a:	60b9      	str	r1, [r7, #8]
 800099c:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800099e:	f004 fd3d 	bl	800541c <__errno>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2209      	movs	r2, #9
 80009a6:	601a      	str	r2, [r3, #0]
  return -1;
 80009a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <_read>:

int _read(int fd, char* ptr, int len) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	60f8      	str	r0, [r7, #12]
 80009bc:	60b9      	str	r1, [r7, #8]
 80009be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d110      	bne.n	80009e8 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <_read+0x4c>)
 80009c8:	6818      	ldr	r0, [r3, #0]
 80009ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009ce:	2201      	movs	r2, #1
 80009d0:	68b9      	ldr	r1, [r7, #8]
 80009d2:	f001 fcae 	bl	8002332 <HAL_UART_Receive>
 80009d6:	4603      	mov	r3, r0
 80009d8:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80009da:	7dfb      	ldrb	r3, [r7, #23]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d101      	bne.n	80009e4 <_read+0x30>
      return 1;
 80009e0:	2301      	movs	r3, #1
 80009e2:	e008      	b.n	80009f6 <_read+0x42>
    else
      return EIO;
 80009e4:	2305      	movs	r3, #5
 80009e6:	e006      	b.n	80009f6 <_read+0x42>
  }
  errno = EBADF;
 80009e8:	f004 fd18 	bl	800541c <__errno>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2209      	movs	r2, #9
 80009f0:	601a      	str	r2, [r3, #0]
  return -1;
 80009f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3718      	adds	r7, #24
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	200049f8 	.word	0x200049f8

08000a04 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	db08      	blt.n	8000a26 <_fstat+0x22>
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2b02      	cmp	r3, #2
 8000a18:	dc05      	bgt.n	8000a26 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a20:	605a      	str	r2, [r3, #4]
    return 0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	e005      	b.n	8000a32 <_fstat+0x2e>
  }

  errno = EBADF;
 8000a26:	f004 fcf9 	bl	800541c <__errno>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2209      	movs	r2, #9
 8000a2e:	601a      	str	r2, [r3, #0]
  return 0;
 8000a30:	2300      	movs	r3, #0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
	...

08000a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <HAL_MspInit+0x54>)
 8000a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4a:	4a11      	ldr	r2, [pc, #68]	; (8000a90 <HAL_MspInit+0x54>)
 8000a4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a50:	6453      	str	r3, [r2, #68]	; 0x44
 8000a52:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <HAL_MspInit+0x54>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	603b      	str	r3, [r7, #0]
 8000a62:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <HAL_MspInit+0x54>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a66:	4a0a      	ldr	r2, [pc, #40]	; (8000a90 <HAL_MspInit+0x54>)
 8000a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6e:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <HAL_MspInit+0x54>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a76:	603b      	str	r3, [r7, #0]
 8000a78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	210f      	movs	r1, #15
 8000a7e:	f06f 0001 	mvn.w	r0, #1
 8000a82:	f000 fa57 	bl	8000f34 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40023800 	.word	0x40023800

08000a94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08a      	sub	sp, #40	; 0x28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a19      	ldr	r2, [pc, #100]	; (8000b18 <HAL_UART_MspInit+0x84>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d12b      	bne.n	8000b0e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	613b      	str	r3, [r7, #16]
 8000aba:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <HAL_UART_MspInit+0x88>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	4a17      	ldr	r2, [pc, #92]	; (8000b1c <HAL_UART_MspInit+0x88>)
 8000ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac6:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <HAL_UART_MspInit+0x88>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <HAL_UART_MspInit+0x88>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a10      	ldr	r2, [pc, #64]	; (8000b1c <HAL_UART_MspInit+0x88>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <HAL_UART_MspInit+0x88>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000aee:	230c      	movs	r3, #12
 8000af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af2:	2302      	movs	r3, #2
 8000af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000afe:	2307      	movs	r3, #7
 8000b00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	4619      	mov	r1, r3
 8000b08:	4805      	ldr	r0, [pc, #20]	; (8000b20 <HAL_UART_MspInit+0x8c>)
 8000b0a:	f000 fa3d 	bl	8000f88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b0e:	bf00      	nop
 8000b10:	3728      	adds	r7, #40	; 0x28
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40004400 	.word	0x40004400
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40020000 	.word	0x40020000

08000b24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08c      	sub	sp, #48	; 0x30
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000b34:	2200      	movs	r2, #0
 8000b36:	6879      	ldr	r1, [r7, #4]
 8000b38:	2019      	movs	r0, #25
 8000b3a:	f000 f9fb 	bl	8000f34 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b3e:	2019      	movs	r0, #25
 8000b40:	f000 fa14 	bl	8000f6c <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b44:	2300      	movs	r3, #0
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	4b1e      	ldr	r3, [pc, #120]	; (8000bc4 <HAL_InitTick+0xa0>)
 8000b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4c:	4a1d      	ldr	r2, [pc, #116]	; (8000bc4 <HAL_InitTick+0xa0>)
 8000b4e:	f043 0301 	orr.w	r3, r3, #1
 8000b52:	6453      	str	r3, [r2, #68]	; 0x44
 8000b54:	4b1b      	ldr	r3, [pc, #108]	; (8000bc4 <HAL_InitTick+0xa0>)
 8000b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b58:	f003 0301 	and.w	r3, r3, #1
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b60:	f107 0210 	add.w	r2, r7, #16
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	4611      	mov	r1, r2
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f001 f850 	bl	8001c10 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b70:	f001 f83a 	bl	8001be8 <HAL_RCC_GetPCLK2Freq>
 8000b74:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b78:	4a13      	ldr	r2, [pc, #76]	; (8000bc8 <HAL_InitTick+0xa4>)
 8000b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b7e:	0c9b      	lsrs	r3, r3, #18
 8000b80:	3b01      	subs	r3, #1
 8000b82:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b84:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <HAL_InitTick+0xa8>)
 8000b86:	4a12      	ldr	r2, [pc, #72]	; (8000bd0 <HAL_InitTick+0xac>)
 8000b88:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b8a:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <HAL_InitTick+0xa8>)
 8000b8c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b90:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b92:	4a0e      	ldr	r2, [pc, #56]	; (8000bcc <HAL_InitTick+0xa8>)
 8000b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b96:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b98:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <HAL_InitTick+0xa8>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <HAL_InitTick+0xa8>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000ba4:	4809      	ldr	r0, [pc, #36]	; (8000bcc <HAL_InitTick+0xa8>)
 8000ba6:	f001 f865 	bl	8001c74 <HAL_TIM_Base_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d104      	bne.n	8000bba <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000bb0:	4806      	ldr	r0, [pc, #24]	; (8000bcc <HAL_InitTick+0xa8>)
 8000bb2:	f001 f8b9 	bl	8001d28 <HAL_TIM_Base_Start_IT>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	e000      	b.n	8000bbc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3730      	adds	r7, #48	; 0x30
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	431bde83 	.word	0x431bde83
 8000bcc:	200049fc 	.word	0x200049fc
 8000bd0:	40010000 	.word	0x40010000

08000bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <NMI_Handler+0x4>

08000bda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bde:	e7fe      	b.n	8000bde <HardFault_Handler+0x4>

08000be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <MemManage_Handler+0x4>

08000be6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bea:	e7fe      	b.n	8000bea <BusFault_Handler+0x4>

08000bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <UsageFault_Handler+0x4>

08000bf2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c04:	4802      	ldr	r0, [pc, #8]	; (8000c10 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c06:	f001 f8f1 	bl	8001dec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	200049fc 	.word	0x200049fc

08000c14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c1c:	4a14      	ldr	r2, [pc, #80]	; (8000c70 <_sbrk+0x5c>)
 8000c1e:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <_sbrk+0x60>)
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c28:	4b13      	ldr	r3, [pc, #76]	; (8000c78 <_sbrk+0x64>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d102      	bne.n	8000c36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c30:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <_sbrk+0x64>)
 8000c32:	4a12      	ldr	r2, [pc, #72]	; (8000c7c <_sbrk+0x68>)
 8000c34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c36:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <_sbrk+0x64>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d207      	bcs.n	8000c54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c44:	f004 fbea 	bl	800541c <__errno>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	220c      	movs	r2, #12
 8000c4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c52:	e009      	b.n	8000c68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c54:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <_sbrk+0x64>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c5a:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <_sbrk+0x64>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4413      	add	r3, r2
 8000c62:	4a05      	ldr	r2, [pc, #20]	; (8000c78 <_sbrk+0x64>)
 8000c64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c66:	68fb      	ldr	r3, [r7, #12]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3718      	adds	r7, #24
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20018000 	.word	0x20018000
 8000c74:	00000400 	.word	0x00000400
 8000c78:	20000090 	.word	0x20000090
 8000c7c:	20004a98 	.word	0x20004a98

08000c80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <SystemInit+0x20>)
 8000c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c8a:	4a05      	ldr	r2, [pc, #20]	; (8000ca0 <SystemInit+0x20>)
 8000c8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ca4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cdc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ca8:	480d      	ldr	r0, [pc, #52]	; (8000ce0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000caa:	490e      	ldr	r1, [pc, #56]	; (8000ce4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cac:	4a0e      	ldr	r2, [pc, #56]	; (8000ce8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb0:	e002      	b.n	8000cb8 <LoopCopyDataInit>

08000cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb6:	3304      	adds	r3, #4

08000cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cbc:	d3f9      	bcc.n	8000cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cbe:	4a0b      	ldr	r2, [pc, #44]	; (8000cec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cc0:	4c0b      	ldr	r4, [pc, #44]	; (8000cf0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc4:	e001      	b.n	8000cca <LoopFillZerobss>

08000cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc8:	3204      	adds	r2, #4

08000cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ccc:	d3fb      	bcc.n	8000cc6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cce:	f7ff ffd7 	bl	8000c80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cd2:	f004 fba9 	bl	8005428 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cd6:	f7ff fc4f 	bl	8000578 <main>
  bx  lr    
 8000cda:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cdc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ce8:	080073f0 	.word	0x080073f0
  ldr r2, =_sbss
 8000cec:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000cf0:	20004a98 	.word	0x20004a98

08000cf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf4:	e7fe      	b.n	8000cf4 <ADC_IRQHandler>
	...

08000cf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cfc:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <HAL_Init+0x40>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a0d      	ldr	r2, [pc, #52]	; (8000d38 <HAL_Init+0x40>)
 8000d02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d08:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <HAL_Init+0x40>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a0a      	ldr	r2, [pc, #40]	; (8000d38 <HAL_Init+0x40>)
 8000d0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <HAL_Init+0x40>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a07      	ldr	r2, [pc, #28]	; (8000d38 <HAL_Init+0x40>)
 8000d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d20:	2003      	movs	r0, #3
 8000d22:	f000 f8fc 	bl	8000f1e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d26:	2000      	movs	r0, #0
 8000d28:	f7ff fefc 	bl	8000b24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d2c:	f7ff fe86 	bl	8000a3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40023c00 	.word	0x40023c00

08000d3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <HAL_IncTick+0x20>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	461a      	mov	r2, r3
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_IncTick+0x24>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <HAL_IncTick+0x24>)
 8000d4e:	6013      	str	r3, [r2, #0]
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	20000008 	.word	0x20000008
 8000d60:	20004a44 	.word	0x20004a44

08000d64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return uwTick;
 8000d68:	4b03      	ldr	r3, [pc, #12]	; (8000d78 <HAL_GetTick+0x14>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	20004a44 	.word	0x20004a44

08000d7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d84:	f7ff ffee 	bl	8000d64 <HAL_GetTick>
 8000d88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d94:	d005      	beq.n	8000da2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d96:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <HAL_Delay+0x44>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	4413      	add	r3, r2
 8000da0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000da2:	bf00      	nop
 8000da4:	f7ff ffde 	bl	8000d64 <HAL_GetTick>
 8000da8:	4602      	mov	r2, r0
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	68fa      	ldr	r2, [r7, #12]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d8f7      	bhi.n	8000da4 <HAL_Delay+0x28>
  {
  }
}
 8000db4:	bf00      	nop
 8000db6:	bf00      	nop
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000008 	.word	0x20000008

08000dc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000de0:	4013      	ands	r3, r2
 8000de2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000df6:	4a04      	ldr	r2, [pc, #16]	; (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	60d3      	str	r3, [r2, #12]
}
 8000dfc:	bf00      	nop
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e10:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <__NVIC_GetPriorityGrouping+0x18>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	0a1b      	lsrs	r3, r3, #8
 8000e16:	f003 0307 	and.w	r3, r3, #7
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	db0b      	blt.n	8000e52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	f003 021f 	and.w	r2, r3, #31
 8000e40:	4907      	ldr	r1, [pc, #28]	; (8000e60 <__NVIC_EnableIRQ+0x38>)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	095b      	lsrs	r3, r3, #5
 8000e48:	2001      	movs	r0, #1
 8000e4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	e000e100 	.word	0xe000e100

08000e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	6039      	str	r1, [r7, #0]
 8000e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	db0a      	blt.n	8000e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	490c      	ldr	r1, [pc, #48]	; (8000eb0 <__NVIC_SetPriority+0x4c>)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	0112      	lsls	r2, r2, #4
 8000e84:	b2d2      	uxtb	r2, r2
 8000e86:	440b      	add	r3, r1
 8000e88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e8c:	e00a      	b.n	8000ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	4908      	ldr	r1, [pc, #32]	; (8000eb4 <__NVIC_SetPriority+0x50>)
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	f003 030f 	and.w	r3, r3, #15
 8000e9a:	3b04      	subs	r3, #4
 8000e9c:	0112      	lsls	r2, r2, #4
 8000e9e:	b2d2      	uxtb	r2, r2
 8000ea0:	440b      	add	r3, r1
 8000ea2:	761a      	strb	r2, [r3, #24]
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000e100 	.word	0xe000e100
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b089      	sub	sp, #36	; 0x24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	f1c3 0307 	rsb	r3, r3, #7
 8000ed2:	2b04      	cmp	r3, #4
 8000ed4:	bf28      	it	cs
 8000ed6:	2304      	movcs	r3, #4
 8000ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3304      	adds	r3, #4
 8000ede:	2b06      	cmp	r3, #6
 8000ee0:	d902      	bls.n	8000ee8 <NVIC_EncodePriority+0x30>
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3b03      	subs	r3, #3
 8000ee6:	e000      	b.n	8000eea <NVIC_EncodePriority+0x32>
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43da      	mvns	r2, r3
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	401a      	ands	r2, r3
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0a:	43d9      	mvns	r1, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f10:	4313      	orrs	r3, r2
         );
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3724      	adds	r7, #36	; 0x24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff ff4c 	bl	8000dc4 <__NVIC_SetPriorityGrouping>
}
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
 8000f40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f46:	f7ff ff61 	bl	8000e0c <__NVIC_GetPriorityGrouping>
 8000f4a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	68b9      	ldr	r1, [r7, #8]
 8000f50:	6978      	ldr	r0, [r7, #20]
 8000f52:	f7ff ffb1 	bl	8000eb8 <NVIC_EncodePriority>
 8000f56:	4602      	mov	r2, r0
 8000f58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f5c:	4611      	mov	r1, r2
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff ff80 	bl	8000e64 <__NVIC_SetPriority>
}
 8000f64:	bf00      	nop
 8000f66:	3718      	adds	r7, #24
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff ff54 	bl	8000e28 <__NVIC_EnableIRQ>
}
 8000f80:	bf00      	nop
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b089      	sub	sp, #36	; 0x24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f92:	2300      	movs	r3, #0
 8000f94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61fb      	str	r3, [r7, #28]
 8000fa2:	e159      	b.n	8001258 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	697a      	ldr	r2, [r7, #20]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	f040 8148 	bne.w	8001252 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f003 0303 	and.w	r3, r3, #3
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d005      	beq.n	8000fda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d130      	bne.n	800103c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	2203      	movs	r2, #3
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	68da      	ldr	r2, [r3, #12]
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4313      	orrs	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001010:	2201      	movs	r2, #1
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	091b      	lsrs	r3, r3, #4
 8001026:	f003 0201 	and.w	r2, r3, #1
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4313      	orrs	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 0303 	and.w	r3, r3, #3
 8001044:	2b03      	cmp	r3, #3
 8001046:	d017      	beq.n	8001078 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	2203      	movs	r2, #3
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	689a      	ldr	r2, [r3, #8]
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 0303 	and.w	r3, r3, #3
 8001080:	2b02      	cmp	r3, #2
 8001082:	d123      	bne.n	80010cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	08da      	lsrs	r2, r3, #3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3208      	adds	r2, #8
 800108c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001090:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	f003 0307 	and.w	r3, r3, #7
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	220f      	movs	r2, #15
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4013      	ands	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	691a      	ldr	r2, [r3, #16]
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	08da      	lsrs	r2, r3, #3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	3208      	adds	r2, #8
 80010c6:	69b9      	ldr	r1, [r7, #24]
 80010c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	2203      	movs	r2, #3
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f003 0203 	and.w	r2, r3, #3
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001108:	2b00      	cmp	r3, #0
 800110a:	f000 80a2 	beq.w	8001252 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	4b57      	ldr	r3, [pc, #348]	; (8001270 <HAL_GPIO_Init+0x2e8>)
 8001114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001116:	4a56      	ldr	r2, [pc, #344]	; (8001270 <HAL_GPIO_Init+0x2e8>)
 8001118:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800111c:	6453      	str	r3, [r2, #68]	; 0x44
 800111e:	4b54      	ldr	r3, [pc, #336]	; (8001270 <HAL_GPIO_Init+0x2e8>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001122:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800112a:	4a52      	ldr	r2, [pc, #328]	; (8001274 <HAL_GPIO_Init+0x2ec>)
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	089b      	lsrs	r3, r3, #2
 8001130:	3302      	adds	r3, #2
 8001132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001136:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f003 0303 	and.w	r3, r3, #3
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	220f      	movs	r2, #15
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4013      	ands	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a49      	ldr	r2, [pc, #292]	; (8001278 <HAL_GPIO_Init+0x2f0>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d019      	beq.n	800118a <HAL_GPIO_Init+0x202>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a48      	ldr	r2, [pc, #288]	; (800127c <HAL_GPIO_Init+0x2f4>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d013      	beq.n	8001186 <HAL_GPIO_Init+0x1fe>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a47      	ldr	r2, [pc, #284]	; (8001280 <HAL_GPIO_Init+0x2f8>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d00d      	beq.n	8001182 <HAL_GPIO_Init+0x1fa>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a46      	ldr	r2, [pc, #280]	; (8001284 <HAL_GPIO_Init+0x2fc>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d007      	beq.n	800117e <HAL_GPIO_Init+0x1f6>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a45      	ldr	r2, [pc, #276]	; (8001288 <HAL_GPIO_Init+0x300>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d101      	bne.n	800117a <HAL_GPIO_Init+0x1f2>
 8001176:	2304      	movs	r3, #4
 8001178:	e008      	b.n	800118c <HAL_GPIO_Init+0x204>
 800117a:	2307      	movs	r3, #7
 800117c:	e006      	b.n	800118c <HAL_GPIO_Init+0x204>
 800117e:	2303      	movs	r3, #3
 8001180:	e004      	b.n	800118c <HAL_GPIO_Init+0x204>
 8001182:	2302      	movs	r3, #2
 8001184:	e002      	b.n	800118c <HAL_GPIO_Init+0x204>
 8001186:	2301      	movs	r3, #1
 8001188:	e000      	b.n	800118c <HAL_GPIO_Init+0x204>
 800118a:	2300      	movs	r3, #0
 800118c:	69fa      	ldr	r2, [r7, #28]
 800118e:	f002 0203 	and.w	r2, r2, #3
 8001192:	0092      	lsls	r2, r2, #2
 8001194:	4093      	lsls	r3, r2
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4313      	orrs	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800119c:	4935      	ldr	r1, [pc, #212]	; (8001274 <HAL_GPIO_Init+0x2ec>)
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	089b      	lsrs	r3, r3, #2
 80011a2:	3302      	adds	r3, #2
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011aa:	4b38      	ldr	r3, [pc, #224]	; (800128c <HAL_GPIO_Init+0x304>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	43db      	mvns	r3, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4013      	ands	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011ce:	4a2f      	ldr	r2, [pc, #188]	; (800128c <HAL_GPIO_Init+0x304>)
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011d4:	4b2d      	ldr	r3, [pc, #180]	; (800128c <HAL_GPIO_Init+0x304>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d003      	beq.n	80011f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011f8:	4a24      	ldr	r2, [pc, #144]	; (800128c <HAL_GPIO_Init+0x304>)
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011fe:	4b23      	ldr	r3, [pc, #140]	; (800128c <HAL_GPIO_Init+0x304>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	43db      	mvns	r3, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4013      	ands	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001222:	4a1a      	ldr	r2, [pc, #104]	; (800128c <HAL_GPIO_Init+0x304>)
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001228:	4b18      	ldr	r3, [pc, #96]	; (800128c <HAL_GPIO_Init+0x304>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d003      	beq.n	800124c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800124c:	4a0f      	ldr	r2, [pc, #60]	; (800128c <HAL_GPIO_Init+0x304>)
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3301      	adds	r3, #1
 8001256:	61fb      	str	r3, [r7, #28]
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	2b0f      	cmp	r3, #15
 800125c:	f67f aea2 	bls.w	8000fa4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001260:	bf00      	nop
 8001262:	bf00      	nop
 8001264:	3724      	adds	r7, #36	; 0x24
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	40023800 	.word	0x40023800
 8001274:	40013800 	.word	0x40013800
 8001278:	40020000 	.word	0x40020000
 800127c:	40020400 	.word	0x40020400
 8001280:	40020800 	.word	0x40020800
 8001284:	40020c00 	.word	0x40020c00
 8001288:	40021000 	.word	0x40021000
 800128c:	40013c00 	.word	0x40013c00

08001290 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	460b      	mov	r3, r1
 800129a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	691a      	ldr	r2, [r3, #16]
 80012a0:	887b      	ldrh	r3, [r7, #2]
 80012a2:	4013      	ands	r3, r2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d002      	beq.n	80012ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012a8:	2301      	movs	r3, #1
 80012aa:	73fb      	strb	r3, [r7, #15]
 80012ac:	e001      	b.n	80012b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012ae:	2300      	movs	r3, #0
 80012b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	460b      	mov	r3, r1
 80012ca:	807b      	strh	r3, [r7, #2]
 80012cc:	4613      	mov	r3, r2
 80012ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012d0:	787b      	ldrb	r3, [r7, #1]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d003      	beq.n	80012de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012d6:	887a      	ldrh	r2, [r7, #2]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012dc:	e003      	b.n	80012e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012de:	887b      	ldrh	r3, [r7, #2]
 80012e0:	041a      	lsls	r2, r3, #16
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	619a      	str	r2, [r3, #24]
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b085      	sub	sp, #20
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
 80012fa:	460b      	mov	r3, r1
 80012fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001304:	887a      	ldrh	r2, [r7, #2]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	4013      	ands	r3, r2
 800130a:	041a      	lsls	r2, r3, #16
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	43d9      	mvns	r1, r3
 8001310:	887b      	ldrh	r3, [r7, #2]
 8001312:	400b      	ands	r3, r1
 8001314:	431a      	orrs	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	619a      	str	r2, [r3, #24]
}
 800131a:	bf00      	nop
 800131c:	3714      	adds	r7, #20
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
	...

08001328 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d101      	bne.n	800133a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e264      	b.n	8001804 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	2b00      	cmp	r3, #0
 8001344:	d075      	beq.n	8001432 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001346:	4ba3      	ldr	r3, [pc, #652]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f003 030c 	and.w	r3, r3, #12
 800134e:	2b04      	cmp	r3, #4
 8001350:	d00c      	beq.n	800136c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001352:	4ba0      	ldr	r3, [pc, #640]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800135a:	2b08      	cmp	r3, #8
 800135c:	d112      	bne.n	8001384 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800135e:	4b9d      	ldr	r3, [pc, #628]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001366:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800136a:	d10b      	bne.n	8001384 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800136c:	4b99      	ldr	r3, [pc, #612]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d05b      	beq.n	8001430 <HAL_RCC_OscConfig+0x108>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d157      	bne.n	8001430 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e23f      	b.n	8001804 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800138c:	d106      	bne.n	800139c <HAL_RCC_OscConfig+0x74>
 800138e:	4b91      	ldr	r3, [pc, #580]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a90      	ldr	r2, [pc, #576]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 8001394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	e01d      	b.n	80013d8 <HAL_RCC_OscConfig+0xb0>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013a4:	d10c      	bne.n	80013c0 <HAL_RCC_OscConfig+0x98>
 80013a6:	4b8b      	ldr	r3, [pc, #556]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a8a      	ldr	r2, [pc, #552]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80013ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013b0:	6013      	str	r3, [r2, #0]
 80013b2:	4b88      	ldr	r3, [pc, #544]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a87      	ldr	r2, [pc, #540]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80013b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013bc:	6013      	str	r3, [r2, #0]
 80013be:	e00b      	b.n	80013d8 <HAL_RCC_OscConfig+0xb0>
 80013c0:	4b84      	ldr	r3, [pc, #528]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a83      	ldr	r2, [pc, #524]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80013c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ca:	6013      	str	r3, [r2, #0]
 80013cc:	4b81      	ldr	r3, [pc, #516]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a80      	ldr	r2, [pc, #512]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80013d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d013      	beq.n	8001408 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e0:	f7ff fcc0 	bl	8000d64 <HAL_GetTick>
 80013e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013e8:	f7ff fcbc 	bl	8000d64 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b64      	cmp	r3, #100	; 0x64
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e204      	b.n	8001804 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013fa:	4b76      	ldr	r3, [pc, #472]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d0f0      	beq.n	80013e8 <HAL_RCC_OscConfig+0xc0>
 8001406:	e014      	b.n	8001432 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001408:	f7ff fcac 	bl	8000d64 <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001410:	f7ff fca8 	bl	8000d64 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b64      	cmp	r3, #100	; 0x64
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e1f0      	b.n	8001804 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001422:	4b6c      	ldr	r3, [pc, #432]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1f0      	bne.n	8001410 <HAL_RCC_OscConfig+0xe8>
 800142e:	e000      	b.n	8001432 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001430:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d063      	beq.n	8001506 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800143e:	4b65      	ldr	r3, [pc, #404]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f003 030c 	and.w	r3, r3, #12
 8001446:	2b00      	cmp	r3, #0
 8001448:	d00b      	beq.n	8001462 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800144a:	4b62      	ldr	r3, [pc, #392]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001452:	2b08      	cmp	r3, #8
 8001454:	d11c      	bne.n	8001490 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001456:	4b5f      	ldr	r3, [pc, #380]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d116      	bne.n	8001490 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001462:	4b5c      	ldr	r3, [pc, #368]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d005      	beq.n	800147a <HAL_RCC_OscConfig+0x152>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d001      	beq.n	800147a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e1c4      	b.n	8001804 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800147a:	4b56      	ldr	r3, [pc, #344]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	691b      	ldr	r3, [r3, #16]
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	4952      	ldr	r1, [pc, #328]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 800148a:	4313      	orrs	r3, r2
 800148c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800148e:	e03a      	b.n	8001506 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d020      	beq.n	80014da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001498:	4b4f      	ldr	r3, [pc, #316]	; (80015d8 <HAL_RCC_OscConfig+0x2b0>)
 800149a:	2201      	movs	r2, #1
 800149c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800149e:	f7ff fc61 	bl	8000d64 <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014a6:	f7ff fc5d 	bl	8000d64 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e1a5      	b.n	8001804 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b8:	4b46      	ldr	r3, [pc, #280]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d0f0      	beq.n	80014a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014c4:	4b43      	ldr	r3, [pc, #268]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	691b      	ldr	r3, [r3, #16]
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	4940      	ldr	r1, [pc, #256]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80014d4:	4313      	orrs	r3, r2
 80014d6:	600b      	str	r3, [r1, #0]
 80014d8:	e015      	b.n	8001506 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014da:	4b3f      	ldr	r3, [pc, #252]	; (80015d8 <HAL_RCC_OscConfig+0x2b0>)
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e0:	f7ff fc40 	bl	8000d64 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014e8:	f7ff fc3c 	bl	8000d64 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e184      	b.n	8001804 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014fa:	4b36      	ldr	r3, [pc, #216]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1f0      	bne.n	80014e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0308 	and.w	r3, r3, #8
 800150e:	2b00      	cmp	r3, #0
 8001510:	d030      	beq.n	8001574 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	695b      	ldr	r3, [r3, #20]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d016      	beq.n	8001548 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800151a:	4b30      	ldr	r3, [pc, #192]	; (80015dc <HAL_RCC_OscConfig+0x2b4>)
 800151c:	2201      	movs	r2, #1
 800151e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001520:	f7ff fc20 	bl	8000d64 <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001526:	e008      	b.n	800153a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001528:	f7ff fc1c 	bl	8000d64 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e164      	b.n	8001804 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800153a:	4b26      	ldr	r3, [pc, #152]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 800153c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d0f0      	beq.n	8001528 <HAL_RCC_OscConfig+0x200>
 8001546:	e015      	b.n	8001574 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001548:	4b24      	ldr	r3, [pc, #144]	; (80015dc <HAL_RCC_OscConfig+0x2b4>)
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800154e:	f7ff fc09 	bl	8000d64 <HAL_GetTick>
 8001552:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001554:	e008      	b.n	8001568 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001556:	f7ff fc05 	bl	8000d64 <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d901      	bls.n	8001568 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e14d      	b.n	8001804 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001568:	4b1a      	ldr	r3, [pc, #104]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 800156a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d1f0      	bne.n	8001556 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0304 	and.w	r3, r3, #4
 800157c:	2b00      	cmp	r3, #0
 800157e:	f000 80a0 	beq.w	80016c2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001582:	2300      	movs	r3, #0
 8001584:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001586:	4b13      	ldr	r3, [pc, #76]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d10f      	bne.n	80015b2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	60bb      	str	r3, [r7, #8]
 8001596:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	4a0e      	ldr	r2, [pc, #56]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 800159c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a0:	6413      	str	r3, [r2, #64]	; 0x40
 80015a2:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015aa:	60bb      	str	r3, [r7, #8]
 80015ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015ae:	2301      	movs	r3, #1
 80015b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b2:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <HAL_RCC_OscConfig+0x2b8>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d121      	bne.n	8001602 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015be:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <HAL_RCC_OscConfig+0x2b8>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a07      	ldr	r2, [pc, #28]	; (80015e0 <HAL_RCC_OscConfig+0x2b8>)
 80015c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ca:	f7ff fbcb 	bl	8000d64 <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d0:	e011      	b.n	80015f6 <HAL_RCC_OscConfig+0x2ce>
 80015d2:	bf00      	nop
 80015d4:	40023800 	.word	0x40023800
 80015d8:	42470000 	.word	0x42470000
 80015dc:	42470e80 	.word	0x42470e80
 80015e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015e4:	f7ff fbbe 	bl	8000d64 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e106      	b.n	8001804 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f6:	4b85      	ldr	r3, [pc, #532]	; (800180c <HAL_RCC_OscConfig+0x4e4>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d0f0      	beq.n	80015e4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d106      	bne.n	8001618 <HAL_RCC_OscConfig+0x2f0>
 800160a:	4b81      	ldr	r3, [pc, #516]	; (8001810 <HAL_RCC_OscConfig+0x4e8>)
 800160c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800160e:	4a80      	ldr	r2, [pc, #512]	; (8001810 <HAL_RCC_OscConfig+0x4e8>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	6713      	str	r3, [r2, #112]	; 0x70
 8001616:	e01c      	b.n	8001652 <HAL_RCC_OscConfig+0x32a>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	2b05      	cmp	r3, #5
 800161e:	d10c      	bne.n	800163a <HAL_RCC_OscConfig+0x312>
 8001620:	4b7b      	ldr	r3, [pc, #492]	; (8001810 <HAL_RCC_OscConfig+0x4e8>)
 8001622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001624:	4a7a      	ldr	r2, [pc, #488]	; (8001810 <HAL_RCC_OscConfig+0x4e8>)
 8001626:	f043 0304 	orr.w	r3, r3, #4
 800162a:	6713      	str	r3, [r2, #112]	; 0x70
 800162c:	4b78      	ldr	r3, [pc, #480]	; (8001810 <HAL_RCC_OscConfig+0x4e8>)
 800162e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001630:	4a77      	ldr	r2, [pc, #476]	; (8001810 <HAL_RCC_OscConfig+0x4e8>)
 8001632:	f043 0301 	orr.w	r3, r3, #1
 8001636:	6713      	str	r3, [r2, #112]	; 0x70
 8001638:	e00b      	b.n	8001652 <HAL_RCC_OscConfig+0x32a>
 800163a:	4b75      	ldr	r3, [pc, #468]	; (8001810 <HAL_RCC_OscConfig+0x4e8>)
 800163c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800163e:	4a74      	ldr	r2, [pc, #464]	; (8001810 <HAL_RCC_OscConfig+0x4e8>)
 8001640:	f023 0301 	bic.w	r3, r3, #1
 8001644:	6713      	str	r3, [r2, #112]	; 0x70
 8001646:	4b72      	ldr	r3, [pc, #456]	; (8001810 <HAL_RCC_OscConfig+0x4e8>)
 8001648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800164a:	4a71      	ldr	r2, [pc, #452]	; (8001810 <HAL_RCC_OscConfig+0x4e8>)
 800164c:	f023 0304 	bic.w	r3, r3, #4
 8001650:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d015      	beq.n	8001686 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800165a:	f7ff fb83 	bl	8000d64 <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001660:	e00a      	b.n	8001678 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001662:	f7ff fb7f 	bl	8000d64 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001670:	4293      	cmp	r3, r2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e0c5      	b.n	8001804 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001678:	4b65      	ldr	r3, [pc, #404]	; (8001810 <HAL_RCC_OscConfig+0x4e8>)
 800167a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d0ee      	beq.n	8001662 <HAL_RCC_OscConfig+0x33a>
 8001684:	e014      	b.n	80016b0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001686:	f7ff fb6d 	bl	8000d64 <HAL_GetTick>
 800168a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800168c:	e00a      	b.n	80016a4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800168e:	f7ff fb69 	bl	8000d64 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	f241 3288 	movw	r2, #5000	; 0x1388
 800169c:	4293      	cmp	r3, r2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e0af      	b.n	8001804 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016a4:	4b5a      	ldr	r3, [pc, #360]	; (8001810 <HAL_RCC_OscConfig+0x4e8>)
 80016a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1ee      	bne.n	800168e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016b0:	7dfb      	ldrb	r3, [r7, #23]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d105      	bne.n	80016c2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016b6:	4b56      	ldr	r3, [pc, #344]	; (8001810 <HAL_RCC_OscConfig+0x4e8>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	4a55      	ldr	r2, [pc, #340]	; (8001810 <HAL_RCC_OscConfig+0x4e8>)
 80016bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f000 809b 	beq.w	8001802 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016cc:	4b50      	ldr	r3, [pc, #320]	; (8001810 <HAL_RCC_OscConfig+0x4e8>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f003 030c 	and.w	r3, r3, #12
 80016d4:	2b08      	cmp	r3, #8
 80016d6:	d05c      	beq.n	8001792 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d141      	bne.n	8001764 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e0:	4b4c      	ldr	r3, [pc, #304]	; (8001814 <HAL_RCC_OscConfig+0x4ec>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e6:	f7ff fb3d 	bl	8000d64 <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ee:	f7ff fb39 	bl	8000d64 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e081      	b.n	8001804 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001700:	4b43      	ldr	r3, [pc, #268]	; (8001810 <HAL_RCC_OscConfig+0x4e8>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d1f0      	bne.n	80016ee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	69da      	ldr	r2, [r3, #28]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a1b      	ldr	r3, [r3, #32]
 8001714:	431a      	orrs	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171a:	019b      	lsls	r3, r3, #6
 800171c:	431a      	orrs	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001722:	085b      	lsrs	r3, r3, #1
 8001724:	3b01      	subs	r3, #1
 8001726:	041b      	lsls	r3, r3, #16
 8001728:	431a      	orrs	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172e:	061b      	lsls	r3, r3, #24
 8001730:	4937      	ldr	r1, [pc, #220]	; (8001810 <HAL_RCC_OscConfig+0x4e8>)
 8001732:	4313      	orrs	r3, r2
 8001734:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001736:	4b37      	ldr	r3, [pc, #220]	; (8001814 <HAL_RCC_OscConfig+0x4ec>)
 8001738:	2201      	movs	r2, #1
 800173a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173c:	f7ff fb12 	bl	8000d64 <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001744:	f7ff fb0e 	bl	8000d64 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e056      	b.n	8001804 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001756:	4b2e      	ldr	r3, [pc, #184]	; (8001810 <HAL_RCC_OscConfig+0x4e8>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d0f0      	beq.n	8001744 <HAL_RCC_OscConfig+0x41c>
 8001762:	e04e      	b.n	8001802 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001764:	4b2b      	ldr	r3, [pc, #172]	; (8001814 <HAL_RCC_OscConfig+0x4ec>)
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176a:	f7ff fafb 	bl	8000d64 <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001770:	e008      	b.n	8001784 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001772:	f7ff faf7 	bl	8000d64 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e03f      	b.n	8001804 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001784:	4b22      	ldr	r3, [pc, #136]	; (8001810 <HAL_RCC_OscConfig+0x4e8>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1f0      	bne.n	8001772 <HAL_RCC_OscConfig+0x44a>
 8001790:	e037      	b.n	8001802 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d101      	bne.n	800179e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e032      	b.n	8001804 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800179e:	4b1c      	ldr	r3, [pc, #112]	; (8001810 <HAL_RCC_OscConfig+0x4e8>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d028      	beq.n	80017fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d121      	bne.n	80017fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d11a      	bne.n	80017fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017c8:	68fa      	ldr	r2, [r7, #12]
 80017ca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017ce:	4013      	ands	r3, r2
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017d4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d111      	bne.n	80017fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e4:	085b      	lsrs	r3, r3, #1
 80017e6:	3b01      	subs	r3, #1
 80017e8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d107      	bne.n	80017fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d001      	beq.n	8001802 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e000      	b.n	8001804 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	3718      	adds	r7, #24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40007000 	.word	0x40007000
 8001810:	40023800 	.word	0x40023800
 8001814:	42470060 	.word	0x42470060

08001818 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d101      	bne.n	800182c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e0cc      	b.n	80019c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800182c:	4b68      	ldr	r3, [pc, #416]	; (80019d0 <HAL_RCC_ClockConfig+0x1b8>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0307 	and.w	r3, r3, #7
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	429a      	cmp	r2, r3
 8001838:	d90c      	bls.n	8001854 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800183a:	4b65      	ldr	r3, [pc, #404]	; (80019d0 <HAL_RCC_ClockConfig+0x1b8>)
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	b2d2      	uxtb	r2, r2
 8001840:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001842:	4b63      	ldr	r3, [pc, #396]	; (80019d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	683a      	ldr	r2, [r7, #0]
 800184c:	429a      	cmp	r2, r3
 800184e:	d001      	beq.n	8001854 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e0b8      	b.n	80019c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d020      	beq.n	80018a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0304 	and.w	r3, r3, #4
 8001868:	2b00      	cmp	r3, #0
 800186a:	d005      	beq.n	8001878 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800186c:	4b59      	ldr	r3, [pc, #356]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	4a58      	ldr	r2, [pc, #352]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001872:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001876:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0308 	and.w	r3, r3, #8
 8001880:	2b00      	cmp	r3, #0
 8001882:	d005      	beq.n	8001890 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001884:	4b53      	ldr	r3, [pc, #332]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	4a52      	ldr	r2, [pc, #328]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 800188a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800188e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001890:	4b50      	ldr	r3, [pc, #320]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	494d      	ldr	r1, [pc, #308]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d044      	beq.n	8001938 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d107      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b6:	4b47      	ldr	r3, [pc, #284]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d119      	bne.n	80018f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e07f      	b.n	80019c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d003      	beq.n	80018d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018d2:	2b03      	cmp	r3, #3
 80018d4:	d107      	bne.n	80018e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018d6:	4b3f      	ldr	r3, [pc, #252]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d109      	bne.n	80018f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e06f      	b.n	80019c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e6:	4b3b      	ldr	r3, [pc, #236]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d101      	bne.n	80018f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e067      	b.n	80019c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018f6:	4b37      	ldr	r3, [pc, #220]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f023 0203 	bic.w	r2, r3, #3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	4934      	ldr	r1, [pc, #208]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001904:	4313      	orrs	r3, r2
 8001906:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001908:	f7ff fa2c 	bl	8000d64 <HAL_GetTick>
 800190c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800190e:	e00a      	b.n	8001926 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001910:	f7ff fa28 	bl	8000d64 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	f241 3288 	movw	r2, #5000	; 0x1388
 800191e:	4293      	cmp	r3, r2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e04f      	b.n	80019c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001926:	4b2b      	ldr	r3, [pc, #172]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f003 020c 	and.w	r2, r3, #12
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	429a      	cmp	r2, r3
 8001936:	d1eb      	bne.n	8001910 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001938:	4b25      	ldr	r3, [pc, #148]	; (80019d0 <HAL_RCC_ClockConfig+0x1b8>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0307 	and.w	r3, r3, #7
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	429a      	cmp	r2, r3
 8001944:	d20c      	bcs.n	8001960 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001946:	4b22      	ldr	r3, [pc, #136]	; (80019d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	b2d2      	uxtb	r2, r2
 800194c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800194e:	4b20      	ldr	r3, [pc, #128]	; (80019d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	429a      	cmp	r2, r3
 800195a:	d001      	beq.n	8001960 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e032      	b.n	80019c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0304 	and.w	r3, r3, #4
 8001968:	2b00      	cmp	r3, #0
 800196a:	d008      	beq.n	800197e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800196c:	4b19      	ldr	r3, [pc, #100]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	4916      	ldr	r1, [pc, #88]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 800197a:	4313      	orrs	r3, r2
 800197c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0308 	and.w	r3, r3, #8
 8001986:	2b00      	cmp	r3, #0
 8001988:	d009      	beq.n	800199e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800198a:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	490e      	ldr	r1, [pc, #56]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 800199a:	4313      	orrs	r3, r2
 800199c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800199e:	f000 f821 	bl	80019e4 <HAL_RCC_GetSysClockFreq>
 80019a2:	4602      	mov	r2, r0
 80019a4:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <HAL_RCC_ClockConfig+0x1bc>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	091b      	lsrs	r3, r3, #4
 80019aa:	f003 030f 	and.w	r3, r3, #15
 80019ae:	490a      	ldr	r1, [pc, #40]	; (80019d8 <HAL_RCC_ClockConfig+0x1c0>)
 80019b0:	5ccb      	ldrb	r3, [r1, r3]
 80019b2:	fa22 f303 	lsr.w	r3, r2, r3
 80019b6:	4a09      	ldr	r2, [pc, #36]	; (80019dc <HAL_RCC_ClockConfig+0x1c4>)
 80019b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019ba:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <HAL_RCC_ClockConfig+0x1c8>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff f8b0 	bl	8000b24 <HAL_InitTick>

  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40023c00 	.word	0x40023c00
 80019d4:	40023800 	.word	0x40023800
 80019d8:	08007214 	.word	0x08007214
 80019dc:	20000000 	.word	0x20000000
 80019e0:	20000004 	.word	0x20000004

080019e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019e4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80019e8:	b084      	sub	sp, #16
 80019ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019ec:	2300      	movs	r3, #0
 80019ee:	607b      	str	r3, [r7, #4]
 80019f0:	2300      	movs	r3, #0
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	2300      	movs	r3, #0
 80019f6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80019f8:	2300      	movs	r3, #0
 80019fa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019fc:	4b67      	ldr	r3, [pc, #412]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f003 030c 	and.w	r3, r3, #12
 8001a04:	2b08      	cmp	r3, #8
 8001a06:	d00d      	beq.n	8001a24 <HAL_RCC_GetSysClockFreq+0x40>
 8001a08:	2b08      	cmp	r3, #8
 8001a0a:	f200 80bd 	bhi.w	8001b88 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d002      	beq.n	8001a18 <HAL_RCC_GetSysClockFreq+0x34>
 8001a12:	2b04      	cmp	r3, #4
 8001a14:	d003      	beq.n	8001a1e <HAL_RCC_GetSysClockFreq+0x3a>
 8001a16:	e0b7      	b.n	8001b88 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a18:	4b61      	ldr	r3, [pc, #388]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001a1a:	60bb      	str	r3, [r7, #8]
       break;
 8001a1c:	e0b7      	b.n	8001b8e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a1e:	4b61      	ldr	r3, [pc, #388]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001a20:	60bb      	str	r3, [r7, #8]
      break;
 8001a22:	e0b4      	b.n	8001b8e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a24:	4b5d      	ldr	r3, [pc, #372]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a2c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a2e:	4b5b      	ldr	r3, [pc, #364]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d04d      	beq.n	8001ad6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a3a:	4b58      	ldr	r3, [pc, #352]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	099b      	lsrs	r3, r3, #6
 8001a40:	461a      	mov	r2, r3
 8001a42:	f04f 0300 	mov.w	r3, #0
 8001a46:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a4a:	f04f 0100 	mov.w	r1, #0
 8001a4e:	ea02 0800 	and.w	r8, r2, r0
 8001a52:	ea03 0901 	and.w	r9, r3, r1
 8001a56:	4640      	mov	r0, r8
 8001a58:	4649      	mov	r1, r9
 8001a5a:	f04f 0200 	mov.w	r2, #0
 8001a5e:	f04f 0300 	mov.w	r3, #0
 8001a62:	014b      	lsls	r3, r1, #5
 8001a64:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a68:	0142      	lsls	r2, r0, #5
 8001a6a:	4610      	mov	r0, r2
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	ebb0 0008 	subs.w	r0, r0, r8
 8001a72:	eb61 0109 	sbc.w	r1, r1, r9
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	f04f 0300 	mov.w	r3, #0
 8001a7e:	018b      	lsls	r3, r1, #6
 8001a80:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a84:	0182      	lsls	r2, r0, #6
 8001a86:	1a12      	subs	r2, r2, r0
 8001a88:	eb63 0301 	sbc.w	r3, r3, r1
 8001a8c:	f04f 0000 	mov.w	r0, #0
 8001a90:	f04f 0100 	mov.w	r1, #0
 8001a94:	00d9      	lsls	r1, r3, #3
 8001a96:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a9a:	00d0      	lsls	r0, r2, #3
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	eb12 0208 	adds.w	r2, r2, r8
 8001aa4:	eb43 0309 	adc.w	r3, r3, r9
 8001aa8:	f04f 0000 	mov.w	r0, #0
 8001aac:	f04f 0100 	mov.w	r1, #0
 8001ab0:	0259      	lsls	r1, r3, #9
 8001ab2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001ab6:	0250      	lsls	r0, r2, #9
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	4610      	mov	r0, r2
 8001abe:	4619      	mov	r1, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	f04f 0300 	mov.w	r3, #0
 8001ac8:	f7fe fbda 	bl	8000280 <__aeabi_uldivmod>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	e04a      	b.n	8001b6c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ad6:	4b31      	ldr	r3, [pc, #196]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	099b      	lsrs	r3, r3, #6
 8001adc:	461a      	mov	r2, r3
 8001ade:	f04f 0300 	mov.w	r3, #0
 8001ae2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001ae6:	f04f 0100 	mov.w	r1, #0
 8001aea:	ea02 0400 	and.w	r4, r2, r0
 8001aee:	ea03 0501 	and.w	r5, r3, r1
 8001af2:	4620      	mov	r0, r4
 8001af4:	4629      	mov	r1, r5
 8001af6:	f04f 0200 	mov.w	r2, #0
 8001afa:	f04f 0300 	mov.w	r3, #0
 8001afe:	014b      	lsls	r3, r1, #5
 8001b00:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b04:	0142      	lsls	r2, r0, #5
 8001b06:	4610      	mov	r0, r2
 8001b08:	4619      	mov	r1, r3
 8001b0a:	1b00      	subs	r0, r0, r4
 8001b0c:	eb61 0105 	sbc.w	r1, r1, r5
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	f04f 0300 	mov.w	r3, #0
 8001b18:	018b      	lsls	r3, r1, #6
 8001b1a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b1e:	0182      	lsls	r2, r0, #6
 8001b20:	1a12      	subs	r2, r2, r0
 8001b22:	eb63 0301 	sbc.w	r3, r3, r1
 8001b26:	f04f 0000 	mov.w	r0, #0
 8001b2a:	f04f 0100 	mov.w	r1, #0
 8001b2e:	00d9      	lsls	r1, r3, #3
 8001b30:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b34:	00d0      	lsls	r0, r2, #3
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	1912      	adds	r2, r2, r4
 8001b3c:	eb45 0303 	adc.w	r3, r5, r3
 8001b40:	f04f 0000 	mov.w	r0, #0
 8001b44:	f04f 0100 	mov.w	r1, #0
 8001b48:	0299      	lsls	r1, r3, #10
 8001b4a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001b4e:	0290      	lsls	r0, r2, #10
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	4610      	mov	r0, r2
 8001b56:	4619      	mov	r1, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	f04f 0300 	mov.w	r3, #0
 8001b60:	f7fe fb8e 	bl	8000280 <__aeabi_uldivmod>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4613      	mov	r3, r2
 8001b6a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	0c1b      	lsrs	r3, r3, #16
 8001b72:	f003 0303 	and.w	r3, r3, #3
 8001b76:	3301      	adds	r3, #1
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001b7c:	68fa      	ldr	r2, [r7, #12]
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b84:	60bb      	str	r3, [r7, #8]
      break;
 8001b86:	e002      	b.n	8001b8e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b88:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001b8a:	60bb      	str	r3, [r7, #8]
      break;
 8001b8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b8e:	68bb      	ldr	r3, [r7, #8]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	00f42400 	.word	0x00f42400
 8001ba4:	007a1200 	.word	0x007a1200

08001ba8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bac:	4b03      	ldr	r3, [pc, #12]	; (8001bbc <HAL_RCC_GetHCLKFreq+0x14>)
 8001bae:	681b      	ldr	r3, [r3, #0]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	20000000 	.word	0x20000000

08001bc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bc4:	f7ff fff0 	bl	8001ba8 <HAL_RCC_GetHCLKFreq>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	0a9b      	lsrs	r3, r3, #10
 8001bd0:	f003 0307 	and.w	r3, r3, #7
 8001bd4:	4903      	ldr	r1, [pc, #12]	; (8001be4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bd6:	5ccb      	ldrb	r3, [r1, r3]
 8001bd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40023800 	.word	0x40023800
 8001be4:	08007224 	.word	0x08007224

08001be8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001bec:	f7ff ffdc 	bl	8001ba8 <HAL_RCC_GetHCLKFreq>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	4b05      	ldr	r3, [pc, #20]	; (8001c08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	0b5b      	lsrs	r3, r3, #13
 8001bf8:	f003 0307 	and.w	r3, r3, #7
 8001bfc:	4903      	ldr	r1, [pc, #12]	; (8001c0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bfe:	5ccb      	ldrb	r3, [r1, r3]
 8001c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	08007224 	.word	0x08007224

08001c10 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	220f      	movs	r2, #15
 8001c1e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c20:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <HAL_RCC_GetClockConfig+0x5c>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f003 0203 	and.w	r2, r3, #3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c2c:	4b0f      	ldr	r3, [pc, #60]	; (8001c6c <HAL_RCC_GetClockConfig+0x5c>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c38:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <HAL_RCC_GetClockConfig+0x5c>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c44:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <HAL_RCC_GetClockConfig+0x5c>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	08db      	lsrs	r3, r3, #3
 8001c4a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c52:	4b07      	ldr	r3, [pc, #28]	; (8001c70 <HAL_RCC_GetClockConfig+0x60>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0207 	and.w	r2, r3, #7
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	601a      	str	r2, [r3, #0]
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	40023c00 	.word	0x40023c00

08001c74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e041      	b.n	8001d0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d106      	bne.n	8001ca0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 f839 	bl	8001d12 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3304      	adds	r3, #4
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	f000 f9ca 	bl	800204c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d12:	b480      	push	{r7}
 8001d14:	b083      	sub	sp, #12
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
	...

08001d28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d001      	beq.n	8001d40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e044      	b.n	8001dca <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2202      	movs	r2, #2
 8001d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68da      	ldr	r2, [r3, #12]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f042 0201 	orr.w	r2, r2, #1
 8001d56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a1e      	ldr	r2, [pc, #120]	; (8001dd8 <HAL_TIM_Base_Start_IT+0xb0>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d018      	beq.n	8001d94 <HAL_TIM_Base_Start_IT+0x6c>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d6a:	d013      	beq.n	8001d94 <HAL_TIM_Base_Start_IT+0x6c>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a1a      	ldr	r2, [pc, #104]	; (8001ddc <HAL_TIM_Base_Start_IT+0xb4>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d00e      	beq.n	8001d94 <HAL_TIM_Base_Start_IT+0x6c>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a19      	ldr	r2, [pc, #100]	; (8001de0 <HAL_TIM_Base_Start_IT+0xb8>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d009      	beq.n	8001d94 <HAL_TIM_Base_Start_IT+0x6c>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a17      	ldr	r2, [pc, #92]	; (8001de4 <HAL_TIM_Base_Start_IT+0xbc>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d004      	beq.n	8001d94 <HAL_TIM_Base_Start_IT+0x6c>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a16      	ldr	r2, [pc, #88]	; (8001de8 <HAL_TIM_Base_Start_IT+0xc0>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d111      	bne.n	8001db8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2b06      	cmp	r3, #6
 8001da4:	d010      	beq.n	8001dc8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f042 0201 	orr.w	r2, r2, #1
 8001db4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001db6:	e007      	b.n	8001dc8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f042 0201 	orr.w	r2, r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	40010000 	.word	0x40010000
 8001ddc:	40000400 	.word	0x40000400
 8001de0:	40000800 	.word	0x40000800
 8001de4:	40000c00 	.word	0x40000c00
 8001de8:	40014000 	.word	0x40014000

08001dec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d122      	bne.n	8001e48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d11b      	bne.n	8001e48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f06f 0202 	mvn.w	r2, #2
 8001e18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 f8ee 	bl	8002010 <HAL_TIM_IC_CaptureCallback>
 8001e34:	e005      	b.n	8001e42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f8e0 	bl	8001ffc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 f8f1 	bl	8002024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	f003 0304 	and.w	r3, r3, #4
 8001e52:	2b04      	cmp	r3, #4
 8001e54:	d122      	bne.n	8001e9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d11b      	bne.n	8001e9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f06f 0204 	mvn.w	r2, #4
 8001e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2202      	movs	r2, #2
 8001e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 f8c4 	bl	8002010 <HAL_TIM_IC_CaptureCallback>
 8001e88:	e005      	b.n	8001e96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f8b6 	bl	8001ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 f8c7 	bl	8002024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	f003 0308 	and.w	r3, r3, #8
 8001ea6:	2b08      	cmp	r3, #8
 8001ea8:	d122      	bne.n	8001ef0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	f003 0308 	and.w	r3, r3, #8
 8001eb4:	2b08      	cmp	r3, #8
 8001eb6:	d11b      	bne.n	8001ef0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f06f 0208 	mvn.w	r2, #8
 8001ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2204      	movs	r2, #4
 8001ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f89a 	bl	8002010 <HAL_TIM_IC_CaptureCallback>
 8001edc:	e005      	b.n	8001eea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f88c 	bl	8001ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 f89d 	bl	8002024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	f003 0310 	and.w	r3, r3, #16
 8001efa:	2b10      	cmp	r3, #16
 8001efc:	d122      	bne.n	8001f44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	f003 0310 	and.w	r3, r3, #16
 8001f08:	2b10      	cmp	r3, #16
 8001f0a:	d11b      	bne.n	8001f44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f06f 0210 	mvn.w	r2, #16
 8001f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2208      	movs	r2, #8
 8001f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f870 	bl	8002010 <HAL_TIM_IC_CaptureCallback>
 8001f30:	e005      	b.n	8001f3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f862 	bl	8001ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 f873 	bl	8002024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d10e      	bne.n	8001f70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d107      	bne.n	8001f70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f06f 0201 	mvn.w	r2, #1
 8001f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7fe fc88 	bl	8000880 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f7a:	2b80      	cmp	r3, #128	; 0x80
 8001f7c:	d10e      	bne.n	8001f9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f88:	2b80      	cmp	r3, #128	; 0x80
 8001f8a:	d107      	bne.n	8001f9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f8e2 	bl	8002160 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fa6:	2b40      	cmp	r3, #64	; 0x40
 8001fa8:	d10e      	bne.n	8001fc8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb4:	2b40      	cmp	r3, #64	; 0x40
 8001fb6:	d107      	bne.n	8001fc8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 f838 	bl	8002038 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	f003 0320 	and.w	r3, r3, #32
 8001fd2:	2b20      	cmp	r3, #32
 8001fd4:	d10e      	bne.n	8001ff4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	f003 0320 	and.w	r3, r3, #32
 8001fe0:	2b20      	cmp	r3, #32
 8001fe2:	d107      	bne.n	8001ff4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f06f 0220 	mvn.w	r2, #32
 8001fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f8ac 	bl	800214c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ff4:	bf00      	nop
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a34      	ldr	r2, [pc, #208]	; (8002130 <TIM_Base_SetConfig+0xe4>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d00f      	beq.n	8002084 <TIM_Base_SetConfig+0x38>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800206a:	d00b      	beq.n	8002084 <TIM_Base_SetConfig+0x38>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a31      	ldr	r2, [pc, #196]	; (8002134 <TIM_Base_SetConfig+0xe8>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d007      	beq.n	8002084 <TIM_Base_SetConfig+0x38>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a30      	ldr	r2, [pc, #192]	; (8002138 <TIM_Base_SetConfig+0xec>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d003      	beq.n	8002084 <TIM_Base_SetConfig+0x38>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a2f      	ldr	r2, [pc, #188]	; (800213c <TIM_Base_SetConfig+0xf0>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d108      	bne.n	8002096 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800208a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	4313      	orrs	r3, r2
 8002094:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a25      	ldr	r2, [pc, #148]	; (8002130 <TIM_Base_SetConfig+0xe4>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d01b      	beq.n	80020d6 <TIM_Base_SetConfig+0x8a>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020a4:	d017      	beq.n	80020d6 <TIM_Base_SetConfig+0x8a>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a22      	ldr	r2, [pc, #136]	; (8002134 <TIM_Base_SetConfig+0xe8>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d013      	beq.n	80020d6 <TIM_Base_SetConfig+0x8a>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a21      	ldr	r2, [pc, #132]	; (8002138 <TIM_Base_SetConfig+0xec>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d00f      	beq.n	80020d6 <TIM_Base_SetConfig+0x8a>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a20      	ldr	r2, [pc, #128]	; (800213c <TIM_Base_SetConfig+0xf0>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d00b      	beq.n	80020d6 <TIM_Base_SetConfig+0x8a>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a1f      	ldr	r2, [pc, #124]	; (8002140 <TIM_Base_SetConfig+0xf4>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d007      	beq.n	80020d6 <TIM_Base_SetConfig+0x8a>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a1e      	ldr	r2, [pc, #120]	; (8002144 <TIM_Base_SetConfig+0xf8>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d003      	beq.n	80020d6 <TIM_Base_SetConfig+0x8a>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a1d      	ldr	r2, [pc, #116]	; (8002148 <TIM_Base_SetConfig+0xfc>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d108      	bne.n	80020e8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a08      	ldr	r2, [pc, #32]	; (8002130 <TIM_Base_SetConfig+0xe4>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d103      	bne.n	800211c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	691a      	ldr	r2, [r3, #16]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	615a      	str	r2, [r3, #20]
}
 8002122:	bf00      	nop
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	40010000 	.word	0x40010000
 8002134:	40000400 	.word	0x40000400
 8002138:	40000800 	.word	0x40000800
 800213c:	40000c00 	.word	0x40000c00
 8002140:	40014000 	.word	0x40014000
 8002144:	40014400 	.word	0x40014400
 8002148:	40014800 	.word	0x40014800

0800214c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e03f      	b.n	8002206 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d106      	bne.n	80021a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7fe fc7a 	bl	8000a94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2224      	movs	r2, #36	; 0x24
 80021a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68da      	ldr	r2, [r3, #12]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 f9a7 	bl	800250c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	691a      	ldr	r2, [r3, #16]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	695a      	ldr	r2, [r3, #20]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68da      	ldr	r2, [r3, #12]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2220      	movs	r2, #32
 80021f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2220      	movs	r2, #32
 8002200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b08a      	sub	sp, #40	; 0x28
 8002212:	af02      	add	r7, sp, #8
 8002214:	60f8      	str	r0, [r7, #12]
 8002216:	60b9      	str	r1, [r7, #8]
 8002218:	603b      	str	r3, [r7, #0]
 800221a:	4613      	mov	r3, r2
 800221c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b20      	cmp	r3, #32
 800222c:	d17c      	bne.n	8002328 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d002      	beq.n	800223a <HAL_UART_Transmit+0x2c>
 8002234:	88fb      	ldrh	r3, [r7, #6]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e075      	b.n	800232a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002244:	2b01      	cmp	r3, #1
 8002246:	d101      	bne.n	800224c <HAL_UART_Transmit+0x3e>
 8002248:	2302      	movs	r3, #2
 800224a:	e06e      	b.n	800232a <HAL_UART_Transmit+0x11c>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2221      	movs	r2, #33	; 0x21
 800225e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002262:	f7fe fd7f 	bl	8000d64 <HAL_GetTick>
 8002266:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	88fa      	ldrh	r2, [r7, #6]
 800226c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	88fa      	ldrh	r2, [r7, #6]
 8002272:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800227c:	d108      	bne.n	8002290 <HAL_UART_Transmit+0x82>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d104      	bne.n	8002290 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002286:	2300      	movs	r3, #0
 8002288:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	61bb      	str	r3, [r7, #24]
 800228e:	e003      	b.n	8002298 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002294:	2300      	movs	r3, #0
 8002296:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80022a0:	e02a      	b.n	80022f8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	2200      	movs	r2, #0
 80022aa:	2180      	movs	r1, #128	; 0x80
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f000 f8e2 	bl	8002476 <UART_WaitOnFlagUntilTimeout>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e036      	b.n	800232a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d10b      	bne.n	80022da <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	881b      	ldrh	r3, [r3, #0]
 80022c6:	461a      	mov	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	3302      	adds	r3, #2
 80022d6:	61bb      	str	r3, [r7, #24]
 80022d8:	e007      	b.n	80022ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	781a      	ldrb	r2, [r3, #0]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	3301      	adds	r3, #1
 80022e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	3b01      	subs	r3, #1
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1cf      	bne.n	80022a2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	2200      	movs	r2, #0
 800230a:	2140      	movs	r1, #64	; 0x40
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f000 f8b2 	bl	8002476 <UART_WaitOnFlagUntilTimeout>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e006      	b.n	800232a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2220      	movs	r2, #32
 8002320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002324:	2300      	movs	r3, #0
 8002326:	e000      	b.n	800232a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002328:	2302      	movs	r3, #2
  }
}
 800232a:	4618      	mov	r0, r3
 800232c:	3720      	adds	r7, #32
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b08a      	sub	sp, #40	; 0x28
 8002336:	af02      	add	r7, sp, #8
 8002338:	60f8      	str	r0, [r7, #12]
 800233a:	60b9      	str	r1, [r7, #8]
 800233c:	603b      	str	r3, [r7, #0]
 800233e:	4613      	mov	r3, r2
 8002340:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002342:	2300      	movs	r3, #0
 8002344:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b20      	cmp	r3, #32
 8002350:	f040 808c 	bne.w	800246c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d002      	beq.n	8002360 <HAL_UART_Receive+0x2e>
 800235a:	88fb      	ldrh	r3, [r7, #6]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d101      	bne.n	8002364 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e084      	b.n	800246e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800236a:	2b01      	cmp	r3, #1
 800236c:	d101      	bne.n	8002372 <HAL_UART_Receive+0x40>
 800236e:	2302      	movs	r3, #2
 8002370:	e07d      	b.n	800246e <HAL_UART_Receive+0x13c>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2222      	movs	r2, #34	; 0x22
 8002384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800238e:	f7fe fce9 	bl	8000d64 <HAL_GetTick>
 8002392:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	88fa      	ldrh	r2, [r7, #6]
 8002398:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	88fa      	ldrh	r2, [r7, #6]
 800239e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023a8:	d108      	bne.n	80023bc <HAL_UART_Receive+0x8a>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d104      	bne.n	80023bc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80023b2:	2300      	movs	r3, #0
 80023b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	61bb      	str	r3, [r7, #24]
 80023ba:	e003      	b.n	80023c4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80023cc:	e043      	b.n	8002456 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	9300      	str	r3, [sp, #0]
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	2200      	movs	r2, #0
 80023d6:	2120      	movs	r1, #32
 80023d8:	68f8      	ldr	r0, [r7, #12]
 80023da:	f000 f84c 	bl	8002476 <UART_WaitOnFlagUntilTimeout>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e042      	b.n	800246e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d10c      	bne.n	8002408 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	3302      	adds	r3, #2
 8002404:	61bb      	str	r3, [r7, #24]
 8002406:	e01f      	b.n	8002448 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002410:	d007      	beq.n	8002422 <HAL_UART_Receive+0xf0>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10a      	bne.n	8002430 <HAL_UART_Receive+0xfe>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d106      	bne.n	8002430 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	b2da      	uxtb	r2, r3
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	701a      	strb	r2, [r3, #0]
 800242e:	e008      	b.n	8002442 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	b2db      	uxtb	r3, r3
 8002438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800243c:	b2da      	uxtb	r2, r3
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	3301      	adds	r3, #1
 8002446:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800244c:	b29b      	uxth	r3, r3
 800244e:	3b01      	subs	r3, #1
 8002450:	b29a      	uxth	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800245a:	b29b      	uxth	r3, r3
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1b6      	bne.n	80023ce <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2220      	movs	r2, #32
 8002464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002468:	2300      	movs	r3, #0
 800246a:	e000      	b.n	800246e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800246c:	2302      	movs	r3, #2
  }
}
 800246e:	4618      	mov	r0, r3
 8002470:	3720      	adds	r7, #32
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b084      	sub	sp, #16
 800247a:	af00      	add	r7, sp, #0
 800247c:	60f8      	str	r0, [r7, #12]
 800247e:	60b9      	str	r1, [r7, #8]
 8002480:	603b      	str	r3, [r7, #0]
 8002482:	4613      	mov	r3, r2
 8002484:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002486:	e02c      	b.n	80024e2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800248e:	d028      	beq.n	80024e2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d007      	beq.n	80024a6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002496:	f7fe fc65 	bl	8000d64 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d21d      	bcs.n	80024e2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68da      	ldr	r2, [r3, #12]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80024b4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	695a      	ldr	r2, [r3, #20]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 0201 	bic.w	r2, r2, #1
 80024c4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2220      	movs	r2, #32
 80024ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2220      	movs	r2, #32
 80024d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e00f      	b.n	8002502 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	4013      	ands	r3, r2
 80024ec:	68ba      	ldr	r2, [r7, #8]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	bf0c      	ite	eq
 80024f2:	2301      	moveq	r3, #1
 80024f4:	2300      	movne	r3, #0
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	461a      	mov	r2, r3
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d0c3      	beq.n	8002488 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
	...

0800250c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800250c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002510:	b09f      	sub	sp, #124	; 0x7c
 8002512:	af00      	add	r7, sp, #0
 8002514:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002522:	68d9      	ldr	r1, [r3, #12]
 8002524:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	ea40 0301 	orr.w	r3, r0, r1
 800252c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800252e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002530:	689a      	ldr	r2, [r3, #8]
 8002532:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	431a      	orrs	r2, r3
 8002538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	431a      	orrs	r2, r3
 800253e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	4313      	orrs	r3, r2
 8002544:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002550:	f021 010c 	bic.w	r1, r1, #12
 8002554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800255a:	430b      	orrs	r3, r1
 800255c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800255e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	695b      	ldr	r3, [r3, #20]
 8002564:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800256a:	6999      	ldr	r1, [r3, #24]
 800256c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	ea40 0301 	orr.w	r3, r0, r1
 8002574:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	4bc5      	ldr	r3, [pc, #788]	; (8002890 <UART_SetConfig+0x384>)
 800257c:	429a      	cmp	r2, r3
 800257e:	d004      	beq.n	800258a <UART_SetConfig+0x7e>
 8002580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	4bc3      	ldr	r3, [pc, #780]	; (8002894 <UART_SetConfig+0x388>)
 8002586:	429a      	cmp	r2, r3
 8002588:	d103      	bne.n	8002592 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800258a:	f7ff fb2d 	bl	8001be8 <HAL_RCC_GetPCLK2Freq>
 800258e:	6778      	str	r0, [r7, #116]	; 0x74
 8002590:	e002      	b.n	8002598 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002592:	f7ff fb15 	bl	8001bc0 <HAL_RCC_GetPCLK1Freq>
 8002596:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800259a:	69db      	ldr	r3, [r3, #28]
 800259c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025a0:	f040 80b6 	bne.w	8002710 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80025a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025a6:	461c      	mov	r4, r3
 80025a8:	f04f 0500 	mov.w	r5, #0
 80025ac:	4622      	mov	r2, r4
 80025ae:	462b      	mov	r3, r5
 80025b0:	1891      	adds	r1, r2, r2
 80025b2:	6439      	str	r1, [r7, #64]	; 0x40
 80025b4:	415b      	adcs	r3, r3
 80025b6:	647b      	str	r3, [r7, #68]	; 0x44
 80025b8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80025bc:	1912      	adds	r2, r2, r4
 80025be:	eb45 0303 	adc.w	r3, r5, r3
 80025c2:	f04f 0000 	mov.w	r0, #0
 80025c6:	f04f 0100 	mov.w	r1, #0
 80025ca:	00d9      	lsls	r1, r3, #3
 80025cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80025d0:	00d0      	lsls	r0, r2, #3
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	1911      	adds	r1, r2, r4
 80025d8:	6639      	str	r1, [r7, #96]	; 0x60
 80025da:	416b      	adcs	r3, r5
 80025dc:	667b      	str	r3, [r7, #100]	; 0x64
 80025de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	461a      	mov	r2, r3
 80025e4:	f04f 0300 	mov.w	r3, #0
 80025e8:	1891      	adds	r1, r2, r2
 80025ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80025ec:	415b      	adcs	r3, r3
 80025ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80025f4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80025f8:	f7fd fe42 	bl	8000280 <__aeabi_uldivmod>
 80025fc:	4602      	mov	r2, r0
 80025fe:	460b      	mov	r3, r1
 8002600:	4ba5      	ldr	r3, [pc, #660]	; (8002898 <UART_SetConfig+0x38c>)
 8002602:	fba3 2302 	umull	r2, r3, r3, r2
 8002606:	095b      	lsrs	r3, r3, #5
 8002608:	011e      	lsls	r6, r3, #4
 800260a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800260c:	461c      	mov	r4, r3
 800260e:	f04f 0500 	mov.w	r5, #0
 8002612:	4622      	mov	r2, r4
 8002614:	462b      	mov	r3, r5
 8002616:	1891      	adds	r1, r2, r2
 8002618:	6339      	str	r1, [r7, #48]	; 0x30
 800261a:	415b      	adcs	r3, r3
 800261c:	637b      	str	r3, [r7, #52]	; 0x34
 800261e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002622:	1912      	adds	r2, r2, r4
 8002624:	eb45 0303 	adc.w	r3, r5, r3
 8002628:	f04f 0000 	mov.w	r0, #0
 800262c:	f04f 0100 	mov.w	r1, #0
 8002630:	00d9      	lsls	r1, r3, #3
 8002632:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002636:	00d0      	lsls	r0, r2, #3
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	1911      	adds	r1, r2, r4
 800263e:	65b9      	str	r1, [r7, #88]	; 0x58
 8002640:	416b      	adcs	r3, r5
 8002642:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	461a      	mov	r2, r3
 800264a:	f04f 0300 	mov.w	r3, #0
 800264e:	1891      	adds	r1, r2, r2
 8002650:	62b9      	str	r1, [r7, #40]	; 0x28
 8002652:	415b      	adcs	r3, r3
 8002654:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002656:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800265a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800265e:	f7fd fe0f 	bl	8000280 <__aeabi_uldivmod>
 8002662:	4602      	mov	r2, r0
 8002664:	460b      	mov	r3, r1
 8002666:	4b8c      	ldr	r3, [pc, #560]	; (8002898 <UART_SetConfig+0x38c>)
 8002668:	fba3 1302 	umull	r1, r3, r3, r2
 800266c:	095b      	lsrs	r3, r3, #5
 800266e:	2164      	movs	r1, #100	; 0x64
 8002670:	fb01 f303 	mul.w	r3, r1, r3
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	3332      	adds	r3, #50	; 0x32
 800267a:	4a87      	ldr	r2, [pc, #540]	; (8002898 <UART_SetConfig+0x38c>)
 800267c:	fba2 2303 	umull	r2, r3, r2, r3
 8002680:	095b      	lsrs	r3, r3, #5
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002688:	441e      	add	r6, r3
 800268a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800268c:	4618      	mov	r0, r3
 800268e:	f04f 0100 	mov.w	r1, #0
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	1894      	adds	r4, r2, r2
 8002698:	623c      	str	r4, [r7, #32]
 800269a:	415b      	adcs	r3, r3
 800269c:	627b      	str	r3, [r7, #36]	; 0x24
 800269e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80026a2:	1812      	adds	r2, r2, r0
 80026a4:	eb41 0303 	adc.w	r3, r1, r3
 80026a8:	f04f 0400 	mov.w	r4, #0
 80026ac:	f04f 0500 	mov.w	r5, #0
 80026b0:	00dd      	lsls	r5, r3, #3
 80026b2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80026b6:	00d4      	lsls	r4, r2, #3
 80026b8:	4622      	mov	r2, r4
 80026ba:	462b      	mov	r3, r5
 80026bc:	1814      	adds	r4, r2, r0
 80026be:	653c      	str	r4, [r7, #80]	; 0x50
 80026c0:	414b      	adcs	r3, r1
 80026c2:	657b      	str	r3, [r7, #84]	; 0x54
 80026c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	461a      	mov	r2, r3
 80026ca:	f04f 0300 	mov.w	r3, #0
 80026ce:	1891      	adds	r1, r2, r2
 80026d0:	61b9      	str	r1, [r7, #24]
 80026d2:	415b      	adcs	r3, r3
 80026d4:	61fb      	str	r3, [r7, #28]
 80026d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026da:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80026de:	f7fd fdcf 	bl	8000280 <__aeabi_uldivmod>
 80026e2:	4602      	mov	r2, r0
 80026e4:	460b      	mov	r3, r1
 80026e6:	4b6c      	ldr	r3, [pc, #432]	; (8002898 <UART_SetConfig+0x38c>)
 80026e8:	fba3 1302 	umull	r1, r3, r3, r2
 80026ec:	095b      	lsrs	r3, r3, #5
 80026ee:	2164      	movs	r1, #100	; 0x64
 80026f0:	fb01 f303 	mul.w	r3, r1, r3
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	3332      	adds	r3, #50	; 0x32
 80026fa:	4a67      	ldr	r2, [pc, #412]	; (8002898 <UART_SetConfig+0x38c>)
 80026fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002700:	095b      	lsrs	r3, r3, #5
 8002702:	f003 0207 	and.w	r2, r3, #7
 8002706:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4432      	add	r2, r6
 800270c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800270e:	e0b9      	b.n	8002884 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002710:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002712:	461c      	mov	r4, r3
 8002714:	f04f 0500 	mov.w	r5, #0
 8002718:	4622      	mov	r2, r4
 800271a:	462b      	mov	r3, r5
 800271c:	1891      	adds	r1, r2, r2
 800271e:	6139      	str	r1, [r7, #16]
 8002720:	415b      	adcs	r3, r3
 8002722:	617b      	str	r3, [r7, #20]
 8002724:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002728:	1912      	adds	r2, r2, r4
 800272a:	eb45 0303 	adc.w	r3, r5, r3
 800272e:	f04f 0000 	mov.w	r0, #0
 8002732:	f04f 0100 	mov.w	r1, #0
 8002736:	00d9      	lsls	r1, r3, #3
 8002738:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800273c:	00d0      	lsls	r0, r2, #3
 800273e:	4602      	mov	r2, r0
 8002740:	460b      	mov	r3, r1
 8002742:	eb12 0804 	adds.w	r8, r2, r4
 8002746:	eb43 0905 	adc.w	r9, r3, r5
 800274a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	4618      	mov	r0, r3
 8002750:	f04f 0100 	mov.w	r1, #0
 8002754:	f04f 0200 	mov.w	r2, #0
 8002758:	f04f 0300 	mov.w	r3, #0
 800275c:	008b      	lsls	r3, r1, #2
 800275e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002762:	0082      	lsls	r2, r0, #2
 8002764:	4640      	mov	r0, r8
 8002766:	4649      	mov	r1, r9
 8002768:	f7fd fd8a 	bl	8000280 <__aeabi_uldivmod>
 800276c:	4602      	mov	r2, r0
 800276e:	460b      	mov	r3, r1
 8002770:	4b49      	ldr	r3, [pc, #292]	; (8002898 <UART_SetConfig+0x38c>)
 8002772:	fba3 2302 	umull	r2, r3, r3, r2
 8002776:	095b      	lsrs	r3, r3, #5
 8002778:	011e      	lsls	r6, r3, #4
 800277a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800277c:	4618      	mov	r0, r3
 800277e:	f04f 0100 	mov.w	r1, #0
 8002782:	4602      	mov	r2, r0
 8002784:	460b      	mov	r3, r1
 8002786:	1894      	adds	r4, r2, r2
 8002788:	60bc      	str	r4, [r7, #8]
 800278a:	415b      	adcs	r3, r3
 800278c:	60fb      	str	r3, [r7, #12]
 800278e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002792:	1812      	adds	r2, r2, r0
 8002794:	eb41 0303 	adc.w	r3, r1, r3
 8002798:	f04f 0400 	mov.w	r4, #0
 800279c:	f04f 0500 	mov.w	r5, #0
 80027a0:	00dd      	lsls	r5, r3, #3
 80027a2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80027a6:	00d4      	lsls	r4, r2, #3
 80027a8:	4622      	mov	r2, r4
 80027aa:	462b      	mov	r3, r5
 80027ac:	1814      	adds	r4, r2, r0
 80027ae:	64bc      	str	r4, [r7, #72]	; 0x48
 80027b0:	414b      	adcs	r3, r1
 80027b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f04f 0100 	mov.w	r1, #0
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	f04f 0300 	mov.w	r3, #0
 80027c6:	008b      	lsls	r3, r1, #2
 80027c8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80027cc:	0082      	lsls	r2, r0, #2
 80027ce:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80027d2:	f7fd fd55 	bl	8000280 <__aeabi_uldivmod>
 80027d6:	4602      	mov	r2, r0
 80027d8:	460b      	mov	r3, r1
 80027da:	4b2f      	ldr	r3, [pc, #188]	; (8002898 <UART_SetConfig+0x38c>)
 80027dc:	fba3 1302 	umull	r1, r3, r3, r2
 80027e0:	095b      	lsrs	r3, r3, #5
 80027e2:	2164      	movs	r1, #100	; 0x64
 80027e4:	fb01 f303 	mul.w	r3, r1, r3
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	011b      	lsls	r3, r3, #4
 80027ec:	3332      	adds	r3, #50	; 0x32
 80027ee:	4a2a      	ldr	r2, [pc, #168]	; (8002898 <UART_SetConfig+0x38c>)
 80027f0:	fba2 2303 	umull	r2, r3, r2, r3
 80027f4:	095b      	lsrs	r3, r3, #5
 80027f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027fa:	441e      	add	r6, r3
 80027fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027fe:	4618      	mov	r0, r3
 8002800:	f04f 0100 	mov.w	r1, #0
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	1894      	adds	r4, r2, r2
 800280a:	603c      	str	r4, [r7, #0]
 800280c:	415b      	adcs	r3, r3
 800280e:	607b      	str	r3, [r7, #4]
 8002810:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002814:	1812      	adds	r2, r2, r0
 8002816:	eb41 0303 	adc.w	r3, r1, r3
 800281a:	f04f 0400 	mov.w	r4, #0
 800281e:	f04f 0500 	mov.w	r5, #0
 8002822:	00dd      	lsls	r5, r3, #3
 8002824:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002828:	00d4      	lsls	r4, r2, #3
 800282a:	4622      	mov	r2, r4
 800282c:	462b      	mov	r3, r5
 800282e:	eb12 0a00 	adds.w	sl, r2, r0
 8002832:	eb43 0b01 	adc.w	fp, r3, r1
 8002836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	4618      	mov	r0, r3
 800283c:	f04f 0100 	mov.w	r1, #0
 8002840:	f04f 0200 	mov.w	r2, #0
 8002844:	f04f 0300 	mov.w	r3, #0
 8002848:	008b      	lsls	r3, r1, #2
 800284a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800284e:	0082      	lsls	r2, r0, #2
 8002850:	4650      	mov	r0, sl
 8002852:	4659      	mov	r1, fp
 8002854:	f7fd fd14 	bl	8000280 <__aeabi_uldivmod>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	4b0e      	ldr	r3, [pc, #56]	; (8002898 <UART_SetConfig+0x38c>)
 800285e:	fba3 1302 	umull	r1, r3, r3, r2
 8002862:	095b      	lsrs	r3, r3, #5
 8002864:	2164      	movs	r1, #100	; 0x64
 8002866:	fb01 f303 	mul.w	r3, r1, r3
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	011b      	lsls	r3, r3, #4
 800286e:	3332      	adds	r3, #50	; 0x32
 8002870:	4a09      	ldr	r2, [pc, #36]	; (8002898 <UART_SetConfig+0x38c>)
 8002872:	fba2 2303 	umull	r2, r3, r2, r3
 8002876:	095b      	lsrs	r3, r3, #5
 8002878:	f003 020f 	and.w	r2, r3, #15
 800287c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4432      	add	r2, r6
 8002882:	609a      	str	r2, [r3, #8]
}
 8002884:	bf00      	nop
 8002886:	377c      	adds	r7, #124	; 0x7c
 8002888:	46bd      	mov	sp, r7
 800288a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800288e:	bf00      	nop
 8002890:	40011000 	.word	0x40011000
 8002894:	40011400 	.word	0x40011400
 8002898:	51eb851f 	.word	0x51eb851f

0800289c <__NVIC_SetPriority>:
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	4603      	mov	r3, r0
 80028a4:	6039      	str	r1, [r7, #0]
 80028a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	db0a      	blt.n	80028c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	b2da      	uxtb	r2, r3
 80028b4:	490c      	ldr	r1, [pc, #48]	; (80028e8 <__NVIC_SetPriority+0x4c>)
 80028b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ba:	0112      	lsls	r2, r2, #4
 80028bc:	b2d2      	uxtb	r2, r2
 80028be:	440b      	add	r3, r1
 80028c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80028c4:	e00a      	b.n	80028dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	4908      	ldr	r1, [pc, #32]	; (80028ec <__NVIC_SetPriority+0x50>)
 80028cc:	79fb      	ldrb	r3, [r7, #7]
 80028ce:	f003 030f 	and.w	r3, r3, #15
 80028d2:	3b04      	subs	r3, #4
 80028d4:	0112      	lsls	r2, r2, #4
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	440b      	add	r3, r1
 80028da:	761a      	strb	r2, [r3, #24]
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	e000e100 	.word	0xe000e100
 80028ec:	e000ed00 	.word	0xe000ed00

080028f0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80028f4:	4b05      	ldr	r3, [pc, #20]	; (800290c <SysTick_Handler+0x1c>)
 80028f6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80028f8:	f001 fd2c 	bl	8004354 <xTaskGetSchedulerState>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d001      	beq.n	8002906 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002902:	f002 fb11 	bl	8004f28 <xPortSysTickHandler>
  }
}
 8002906:	bf00      	nop
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	e000e010 	.word	0xe000e010

08002910 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002914:	2100      	movs	r1, #0
 8002916:	f06f 0004 	mvn.w	r0, #4
 800291a:	f7ff ffbf 	bl	800289c <__NVIC_SetPriority>
#endif
}
 800291e:	bf00      	nop
 8002920:	bd80      	pop	{r7, pc}
	...

08002924 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800292a:	f3ef 8305 	mrs	r3, IPSR
 800292e:	603b      	str	r3, [r7, #0]
  return(result);
 8002930:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002936:	f06f 0305 	mvn.w	r3, #5
 800293a:	607b      	str	r3, [r7, #4]
 800293c:	e00c      	b.n	8002958 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800293e:	4b0a      	ldr	r3, [pc, #40]	; (8002968 <osKernelInitialize+0x44>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d105      	bne.n	8002952 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002946:	4b08      	ldr	r3, [pc, #32]	; (8002968 <osKernelInitialize+0x44>)
 8002948:	2201      	movs	r2, #1
 800294a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800294c:	2300      	movs	r3, #0
 800294e:	607b      	str	r3, [r7, #4]
 8002950:	e002      	b.n	8002958 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002952:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002956:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002958:	687b      	ldr	r3, [r7, #4]
}
 800295a:	4618      	mov	r0, r3
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	20000094 	.word	0x20000094

0800296c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002972:	f3ef 8305 	mrs	r3, IPSR
 8002976:	603b      	str	r3, [r7, #0]
  return(result);
 8002978:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <osKernelStart+0x1a>
    stat = osErrorISR;
 800297e:	f06f 0305 	mvn.w	r3, #5
 8002982:	607b      	str	r3, [r7, #4]
 8002984:	e010      	b.n	80029a8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002986:	4b0b      	ldr	r3, [pc, #44]	; (80029b4 <osKernelStart+0x48>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d109      	bne.n	80029a2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800298e:	f7ff ffbf 	bl	8002910 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002992:	4b08      	ldr	r3, [pc, #32]	; (80029b4 <osKernelStart+0x48>)
 8002994:	2202      	movs	r2, #2
 8002996:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002998:	f001 f894 	bl	8003ac4 <vTaskStartScheduler>
      stat = osOK;
 800299c:	2300      	movs	r3, #0
 800299e:	607b      	str	r3, [r7, #4]
 80029a0:	e002      	b.n	80029a8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80029a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80029a8:	687b      	ldr	r3, [r7, #4]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	20000094 	.word	0x20000094

080029b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b08e      	sub	sp, #56	; 0x38
 80029bc:	af04      	add	r7, sp, #16
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80029c4:	2300      	movs	r3, #0
 80029c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029c8:	f3ef 8305 	mrs	r3, IPSR
 80029cc:	617b      	str	r3, [r7, #20]
  return(result);
 80029ce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d17e      	bne.n	8002ad2 <osThreadNew+0x11a>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d07b      	beq.n	8002ad2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80029da:	2380      	movs	r3, #128	; 0x80
 80029dc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80029de:	2318      	movs	r3, #24
 80029e0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80029e2:	2300      	movs	r3, #0
 80029e4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80029e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d045      	beq.n	8002a7e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d002      	beq.n	8002a00 <osThreadNew+0x48>
        name = attr->name;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d002      	beq.n	8002a0e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d008      	beq.n	8002a26 <osThreadNew+0x6e>
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	2b38      	cmp	r3, #56	; 0x38
 8002a18:	d805      	bhi.n	8002a26 <osThreadNew+0x6e>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <osThreadNew+0x72>
        return (NULL);
 8002a26:	2300      	movs	r3, #0
 8002a28:	e054      	b.n	8002ad4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	089b      	lsrs	r3, r3, #2
 8002a38:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00e      	beq.n	8002a60 <osThreadNew+0xa8>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	2b5b      	cmp	r3, #91	; 0x5b
 8002a48:	d90a      	bls.n	8002a60 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d006      	beq.n	8002a60 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d002      	beq.n	8002a60 <osThreadNew+0xa8>
        mem = 1;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	61bb      	str	r3, [r7, #24]
 8002a5e:	e010      	b.n	8002a82 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d10c      	bne.n	8002a82 <osThreadNew+0xca>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d108      	bne.n	8002a82 <osThreadNew+0xca>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d104      	bne.n	8002a82 <osThreadNew+0xca>
          mem = 0;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	61bb      	str	r3, [r7, #24]
 8002a7c:	e001      	b.n	8002a82 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d110      	bne.n	8002aaa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002a90:	9202      	str	r2, [sp, #8]
 8002a92:	9301      	str	r3, [sp, #4]
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	6a3a      	ldr	r2, [r7, #32]
 8002a9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f000 fdf0 	bl	8003684 <xTaskCreateStatic>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	613b      	str	r3, [r7, #16]
 8002aa8:	e013      	b.n	8002ad2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d110      	bne.n	8002ad2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002ab0:	6a3b      	ldr	r3, [r7, #32]
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	f107 0310 	add.w	r3, r7, #16
 8002ab8:	9301      	str	r3, [sp, #4]
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	9300      	str	r3, [sp, #0]
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f000 fe3b 	bl	800373e <xTaskCreate>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d001      	beq.n	8002ad2 <osThreadNew+0x11a>
            hTask = NULL;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002ad2:	693b      	ldr	r3, [r7, #16]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3728      	adds	r7, #40	; 0x28
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	4a07      	ldr	r2, [pc, #28]	; (8002b08 <vApplicationGetIdleTaskMemory+0x2c>)
 8002aec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	4a06      	ldr	r2, [pc, #24]	; (8002b0c <vApplicationGetIdleTaskMemory+0x30>)
 8002af2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2280      	movs	r2, #128	; 0x80
 8002af8:	601a      	str	r2, [r3, #0]
}
 8002afa:	bf00      	nop
 8002afc:	3714      	adds	r7, #20
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	20000098 	.word	0x20000098
 8002b0c:	200000f4 	.word	0x200000f4

08002b10 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4a07      	ldr	r2, [pc, #28]	; (8002b3c <vApplicationGetTimerTaskMemory+0x2c>)
 8002b20:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	4a06      	ldr	r2, [pc, #24]	; (8002b40 <vApplicationGetTimerTaskMemory+0x30>)
 8002b26:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b2e:	601a      	str	r2, [r3, #0]
}
 8002b30:	bf00      	nop
 8002b32:	3714      	adds	r7, #20
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	200002f4 	.word	0x200002f4
 8002b40:	20000350 	.word	0x20000350

08002b44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f103 0208 	add.w	r2, r3, #8
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f103 0208 	add.w	r2, r3, #8
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f103 0208 	add.w	r2, r3, #8
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr

08002b9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b085      	sub	sp, #20
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
 8002ba6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	1c5a      	adds	r2, r3, #1
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	601a      	str	r2, [r3, #0]
}
 8002bda:	bf00      	nop
 8002bdc:	3714      	adds	r7, #20
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002be6:	b480      	push	{r7}
 8002be8:	b085      	sub	sp, #20
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
 8002bee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bfc:	d103      	bne.n	8002c06 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	e00c      	b.n	8002c20 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	3308      	adds	r3, #8
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	e002      	b.n	8002c14 <vListInsert+0x2e>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	60fb      	str	r3, [r7, #12]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d2f6      	bcs.n	8002c0e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	1c5a      	adds	r2, r3, #1
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	601a      	str	r2, [r3, #0]
}
 8002c4c:	bf00      	nop
 8002c4e:	3714      	adds	r7, #20
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	6892      	ldr	r2, [r2, #8]
 8002c6e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	6852      	ldr	r2, [r2, #4]
 8002c78:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d103      	bne.n	8002c8c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	1e5a      	subs	r2, r3, #1
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10a      	bne.n	8002cd6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc4:	f383 8811 	msr	BASEPRI, r3
 8002cc8:	f3bf 8f6f 	isb	sy
 8002ccc:	f3bf 8f4f 	dsb	sy
 8002cd0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002cd2:	bf00      	nop
 8002cd4:	e7fe      	b.n	8002cd4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002cd6:	f002 f895 	bl	8004e04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce2:	68f9      	ldr	r1, [r7, #12]
 8002ce4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002ce6:	fb01 f303 	mul.w	r3, r1, r3
 8002cea:	441a      	add	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d06:	3b01      	subs	r3, #1
 8002d08:	68f9      	ldr	r1, [r7, #12]
 8002d0a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002d0c:	fb01 f303 	mul.w	r3, r1, r3
 8002d10:	441a      	add	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	22ff      	movs	r2, #255	; 0xff
 8002d1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	22ff      	movs	r2, #255	; 0xff
 8002d22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d114      	bne.n	8002d56 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d01a      	beq.n	8002d6a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	3310      	adds	r3, #16
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f001 f94d 	bl	8003fd8 <xTaskRemoveFromEventList>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d012      	beq.n	8002d6a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002d44:	4b0c      	ldr	r3, [pc, #48]	; (8002d78 <xQueueGenericReset+0xcc>)
 8002d46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	f3bf 8f4f 	dsb	sy
 8002d50:	f3bf 8f6f 	isb	sy
 8002d54:	e009      	b.n	8002d6a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	3310      	adds	r3, #16
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff fef2 	bl	8002b44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	3324      	adds	r3, #36	; 0x24
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff feed 	bl	8002b44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002d6a:	f002 f87b 	bl	8004e64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002d6e:	2301      	movs	r3, #1
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	e000ed04 	.word	0xe000ed04

08002d7c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b08e      	sub	sp, #56	; 0x38
 8002d80:	af02      	add	r7, sp, #8
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
 8002d88:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10a      	bne.n	8002da6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d94:	f383 8811 	msr	BASEPRI, r3
 8002d98:	f3bf 8f6f 	isb	sy
 8002d9c:	f3bf 8f4f 	dsb	sy
 8002da0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002da2:	bf00      	nop
 8002da4:	e7fe      	b.n	8002da4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d10a      	bne.n	8002dc2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db0:	f383 8811 	msr	BASEPRI, r3
 8002db4:	f3bf 8f6f 	isb	sy
 8002db8:	f3bf 8f4f 	dsb	sy
 8002dbc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002dbe:	bf00      	nop
 8002dc0:	e7fe      	b.n	8002dc0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d002      	beq.n	8002dce <xQueueGenericCreateStatic+0x52>
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <xQueueGenericCreateStatic+0x56>
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e000      	b.n	8002dd4 <xQueueGenericCreateStatic+0x58>
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d10a      	bne.n	8002dee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ddc:	f383 8811 	msr	BASEPRI, r3
 8002de0:	f3bf 8f6f 	isb	sy
 8002de4:	f3bf 8f4f 	dsb	sy
 8002de8:	623b      	str	r3, [r7, #32]
}
 8002dea:	bf00      	nop
 8002dec:	e7fe      	b.n	8002dec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d102      	bne.n	8002dfa <xQueueGenericCreateStatic+0x7e>
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <xQueueGenericCreateStatic+0x82>
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e000      	b.n	8002e00 <xQueueGenericCreateStatic+0x84>
 8002dfe:	2300      	movs	r3, #0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d10a      	bne.n	8002e1a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e08:	f383 8811 	msr	BASEPRI, r3
 8002e0c:	f3bf 8f6f 	isb	sy
 8002e10:	f3bf 8f4f 	dsb	sy
 8002e14:	61fb      	str	r3, [r7, #28]
}
 8002e16:	bf00      	nop
 8002e18:	e7fe      	b.n	8002e18 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002e1a:	2350      	movs	r3, #80	; 0x50
 8002e1c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	2b50      	cmp	r3, #80	; 0x50
 8002e22:	d00a      	beq.n	8002e3a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e28:	f383 8811 	msr	BASEPRI, r3
 8002e2c:	f3bf 8f6f 	isb	sy
 8002e30:	f3bf 8f4f 	dsb	sy
 8002e34:	61bb      	str	r3, [r7, #24]
}
 8002e36:	bf00      	nop
 8002e38:	e7fe      	b.n	8002e38 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002e3a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00d      	beq.n	8002e62 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002e4e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	4613      	mov	r3, r2
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	68b9      	ldr	r1, [r7, #8]
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f000 f805 	bl	8002e6c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3730      	adds	r7, #48	; 0x30
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
 8002e78:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d103      	bne.n	8002e88 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	601a      	str	r2, [r3, #0]
 8002e86:	e002      	b.n	8002e8e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	68ba      	ldr	r2, [r7, #8]
 8002e98:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	69b8      	ldr	r0, [r7, #24]
 8002e9e:	f7ff ff05 	bl	8002cac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	78fa      	ldrb	r2, [r7, #3]
 8002ea6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002eaa:	bf00      	nop
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
	...

08002eb4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b08e      	sub	sp, #56	; 0x38
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
 8002ec0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d10a      	bne.n	8002ee6 <xQueueGenericSend+0x32>
	__asm volatile
 8002ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed4:	f383 8811 	msr	BASEPRI, r3
 8002ed8:	f3bf 8f6f 	isb	sy
 8002edc:	f3bf 8f4f 	dsb	sy
 8002ee0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002ee2:	bf00      	nop
 8002ee4:	e7fe      	b.n	8002ee4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d103      	bne.n	8002ef4 <xQueueGenericSend+0x40>
 8002eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <xQueueGenericSend+0x44>
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e000      	b.n	8002efa <xQueueGenericSend+0x46>
 8002ef8:	2300      	movs	r3, #0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10a      	bne.n	8002f14 <xQueueGenericSend+0x60>
	__asm volatile
 8002efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f02:	f383 8811 	msr	BASEPRI, r3
 8002f06:	f3bf 8f6f 	isb	sy
 8002f0a:	f3bf 8f4f 	dsb	sy
 8002f0e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f10:	bf00      	nop
 8002f12:	e7fe      	b.n	8002f12 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d103      	bne.n	8002f22 <xQueueGenericSend+0x6e>
 8002f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d101      	bne.n	8002f26 <xQueueGenericSend+0x72>
 8002f22:	2301      	movs	r3, #1
 8002f24:	e000      	b.n	8002f28 <xQueueGenericSend+0x74>
 8002f26:	2300      	movs	r3, #0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d10a      	bne.n	8002f42 <xQueueGenericSend+0x8e>
	__asm volatile
 8002f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f30:	f383 8811 	msr	BASEPRI, r3
 8002f34:	f3bf 8f6f 	isb	sy
 8002f38:	f3bf 8f4f 	dsb	sy
 8002f3c:	623b      	str	r3, [r7, #32]
}
 8002f3e:	bf00      	nop
 8002f40:	e7fe      	b.n	8002f40 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f42:	f001 fa07 	bl	8004354 <xTaskGetSchedulerState>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d102      	bne.n	8002f52 <xQueueGenericSend+0x9e>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <xQueueGenericSend+0xa2>
 8002f52:	2301      	movs	r3, #1
 8002f54:	e000      	b.n	8002f58 <xQueueGenericSend+0xa4>
 8002f56:	2300      	movs	r3, #0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10a      	bne.n	8002f72 <xQueueGenericSend+0xbe>
	__asm volatile
 8002f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f60:	f383 8811 	msr	BASEPRI, r3
 8002f64:	f3bf 8f6f 	isb	sy
 8002f68:	f3bf 8f4f 	dsb	sy
 8002f6c:	61fb      	str	r3, [r7, #28]
}
 8002f6e:	bf00      	nop
 8002f70:	e7fe      	b.n	8002f70 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f72:	f001 ff47 	bl	8004e04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d302      	bcc.n	8002f88 <xQueueGenericSend+0xd4>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d129      	bne.n	8002fdc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	68b9      	ldr	r1, [r7, #8]
 8002f8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f8e:	f000 fa0b 	bl	80033a8 <prvCopyDataToQueue>
 8002f92:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d010      	beq.n	8002fbe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9e:	3324      	adds	r3, #36	; 0x24
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f001 f819 	bl	8003fd8 <xTaskRemoveFromEventList>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d013      	beq.n	8002fd4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002fac:	4b3f      	ldr	r3, [pc, #252]	; (80030ac <xQueueGenericSend+0x1f8>)
 8002fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	f3bf 8f4f 	dsb	sy
 8002fb8:	f3bf 8f6f 	isb	sy
 8002fbc:	e00a      	b.n	8002fd4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d007      	beq.n	8002fd4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002fc4:	4b39      	ldr	r3, [pc, #228]	; (80030ac <xQueueGenericSend+0x1f8>)
 8002fc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	f3bf 8f4f 	dsb	sy
 8002fd0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002fd4:	f001 ff46 	bl	8004e64 <vPortExitCritical>
				return pdPASS;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e063      	b.n	80030a4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d103      	bne.n	8002fea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002fe2:	f001 ff3f 	bl	8004e64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	e05c      	b.n	80030a4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d106      	bne.n	8002ffe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ff0:	f107 0314 	add.w	r3, r7, #20
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f001 f853 	bl	80040a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ffe:	f001 ff31 	bl	8004e64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003002:	f000 fdc5 	bl	8003b90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003006:	f001 fefd 	bl	8004e04 <vPortEnterCritical>
 800300a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003010:	b25b      	sxtb	r3, r3
 8003012:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003016:	d103      	bne.n	8003020 <xQueueGenericSend+0x16c>
 8003018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003022:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003026:	b25b      	sxtb	r3, r3
 8003028:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800302c:	d103      	bne.n	8003036 <xQueueGenericSend+0x182>
 800302e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003036:	f001 ff15 	bl	8004e64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800303a:	1d3a      	adds	r2, r7, #4
 800303c:	f107 0314 	add.w	r3, r7, #20
 8003040:	4611      	mov	r1, r2
 8003042:	4618      	mov	r0, r3
 8003044:	f001 f842 	bl	80040cc <xTaskCheckForTimeOut>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d124      	bne.n	8003098 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800304e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003050:	f000 faa2 	bl	8003598 <prvIsQueueFull>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d018      	beq.n	800308c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800305a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305c:	3310      	adds	r3, #16
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	4611      	mov	r1, r2
 8003062:	4618      	mov	r0, r3
 8003064:	f000 ff68 	bl	8003f38 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003068:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800306a:	f000 fa2d 	bl	80034c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800306e:	f000 fd9d 	bl	8003bac <xTaskResumeAll>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	f47f af7c 	bne.w	8002f72 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800307a:	4b0c      	ldr	r3, [pc, #48]	; (80030ac <xQueueGenericSend+0x1f8>)
 800307c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	f3bf 8f4f 	dsb	sy
 8003086:	f3bf 8f6f 	isb	sy
 800308a:	e772      	b.n	8002f72 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800308c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800308e:	f000 fa1b 	bl	80034c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003092:	f000 fd8b 	bl	8003bac <xTaskResumeAll>
 8003096:	e76c      	b.n	8002f72 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003098:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800309a:	f000 fa15 	bl	80034c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800309e:	f000 fd85 	bl	8003bac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80030a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3738      	adds	r7, #56	; 0x38
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	e000ed04 	.word	0xe000ed04

080030b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b090      	sub	sp, #64	; 0x40
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
 80030bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80030c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d10a      	bne.n	80030de <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80030c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030cc:	f383 8811 	msr	BASEPRI, r3
 80030d0:	f3bf 8f6f 	isb	sy
 80030d4:	f3bf 8f4f 	dsb	sy
 80030d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80030da:	bf00      	nop
 80030dc:	e7fe      	b.n	80030dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d103      	bne.n	80030ec <xQueueGenericSendFromISR+0x3c>
 80030e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d101      	bne.n	80030f0 <xQueueGenericSendFromISR+0x40>
 80030ec:	2301      	movs	r3, #1
 80030ee:	e000      	b.n	80030f2 <xQueueGenericSendFromISR+0x42>
 80030f0:	2300      	movs	r3, #0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10a      	bne.n	800310c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80030f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030fa:	f383 8811 	msr	BASEPRI, r3
 80030fe:	f3bf 8f6f 	isb	sy
 8003102:	f3bf 8f4f 	dsb	sy
 8003106:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003108:	bf00      	nop
 800310a:	e7fe      	b.n	800310a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	2b02      	cmp	r3, #2
 8003110:	d103      	bne.n	800311a <xQueueGenericSendFromISR+0x6a>
 8003112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003116:	2b01      	cmp	r3, #1
 8003118:	d101      	bne.n	800311e <xQueueGenericSendFromISR+0x6e>
 800311a:	2301      	movs	r3, #1
 800311c:	e000      	b.n	8003120 <xQueueGenericSendFromISR+0x70>
 800311e:	2300      	movs	r3, #0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d10a      	bne.n	800313a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003128:	f383 8811 	msr	BASEPRI, r3
 800312c:	f3bf 8f6f 	isb	sy
 8003130:	f3bf 8f4f 	dsb	sy
 8003134:	623b      	str	r3, [r7, #32]
}
 8003136:	bf00      	nop
 8003138:	e7fe      	b.n	8003138 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800313a:	f001 ff45 	bl	8004fc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800313e:	f3ef 8211 	mrs	r2, BASEPRI
 8003142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003146:	f383 8811 	msr	BASEPRI, r3
 800314a:	f3bf 8f6f 	isb	sy
 800314e:	f3bf 8f4f 	dsb	sy
 8003152:	61fa      	str	r2, [r7, #28]
 8003154:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003156:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003158:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800315a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800315c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800315e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003162:	429a      	cmp	r2, r3
 8003164:	d302      	bcc.n	800316c <xQueueGenericSendFromISR+0xbc>
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	2b02      	cmp	r3, #2
 800316a:	d12f      	bne.n	80031cc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800316c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800316e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	68b9      	ldr	r1, [r7, #8]
 8003180:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003182:	f000 f911 	bl	80033a8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003186:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800318a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800318e:	d112      	bne.n	80031b6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003194:	2b00      	cmp	r3, #0
 8003196:	d016      	beq.n	80031c6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800319a:	3324      	adds	r3, #36	; 0x24
 800319c:	4618      	mov	r0, r3
 800319e:	f000 ff1b 	bl	8003fd8 <xTaskRemoveFromEventList>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00e      	beq.n	80031c6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00b      	beq.n	80031c6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2201      	movs	r2, #1
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	e007      	b.n	80031c6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80031b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80031ba:	3301      	adds	r3, #1
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	b25a      	sxtb	r2, r3
 80031c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80031c6:	2301      	movs	r3, #1
 80031c8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80031ca:	e001      	b.n	80031d0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80031cc:	2300      	movs	r3, #0
 80031ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031d2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80031da:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80031dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3740      	adds	r7, #64	; 0x40
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
	...

080031e8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b08c      	sub	sp, #48	; 0x30
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80031f4:	2300      	movs	r3, #0
 80031f6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80031fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10a      	bne.n	8003218 <xQueueReceive+0x30>
	__asm volatile
 8003202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003206:	f383 8811 	msr	BASEPRI, r3
 800320a:	f3bf 8f6f 	isb	sy
 800320e:	f3bf 8f4f 	dsb	sy
 8003212:	623b      	str	r3, [r7, #32]
}
 8003214:	bf00      	nop
 8003216:	e7fe      	b.n	8003216 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d103      	bne.n	8003226 <xQueueReceive+0x3e>
 800321e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <xQueueReceive+0x42>
 8003226:	2301      	movs	r3, #1
 8003228:	e000      	b.n	800322c <xQueueReceive+0x44>
 800322a:	2300      	movs	r3, #0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10a      	bne.n	8003246 <xQueueReceive+0x5e>
	__asm volatile
 8003230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003234:	f383 8811 	msr	BASEPRI, r3
 8003238:	f3bf 8f6f 	isb	sy
 800323c:	f3bf 8f4f 	dsb	sy
 8003240:	61fb      	str	r3, [r7, #28]
}
 8003242:	bf00      	nop
 8003244:	e7fe      	b.n	8003244 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003246:	f001 f885 	bl	8004354 <xTaskGetSchedulerState>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d102      	bne.n	8003256 <xQueueReceive+0x6e>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <xQueueReceive+0x72>
 8003256:	2301      	movs	r3, #1
 8003258:	e000      	b.n	800325c <xQueueReceive+0x74>
 800325a:	2300      	movs	r3, #0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10a      	bne.n	8003276 <xQueueReceive+0x8e>
	__asm volatile
 8003260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003264:	f383 8811 	msr	BASEPRI, r3
 8003268:	f3bf 8f6f 	isb	sy
 800326c:	f3bf 8f4f 	dsb	sy
 8003270:	61bb      	str	r3, [r7, #24]
}
 8003272:	bf00      	nop
 8003274:	e7fe      	b.n	8003274 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003276:	f001 fdc5 	bl	8004e04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800327a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800327c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	2b00      	cmp	r3, #0
 8003284:	d01f      	beq.n	80032c6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003286:	68b9      	ldr	r1, [r7, #8]
 8003288:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800328a:	f000 f8f7 	bl	800347c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	1e5a      	subs	r2, r3, #1
 8003292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003294:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00f      	beq.n	80032be <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800329e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a0:	3310      	adds	r3, #16
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 fe98 	bl	8003fd8 <xTaskRemoveFromEventList>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d007      	beq.n	80032be <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80032ae:	4b3d      	ldr	r3, [pc, #244]	; (80033a4 <xQueueReceive+0x1bc>)
 80032b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	f3bf 8f4f 	dsb	sy
 80032ba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80032be:	f001 fdd1 	bl	8004e64 <vPortExitCritical>
				return pdPASS;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e069      	b.n	800339a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d103      	bne.n	80032d4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80032cc:	f001 fdca 	bl	8004e64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80032d0:	2300      	movs	r3, #0
 80032d2:	e062      	b.n	800339a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80032d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d106      	bne.n	80032e8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032da:	f107 0310 	add.w	r3, r7, #16
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 fede 	bl	80040a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032e4:	2301      	movs	r3, #1
 80032e6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80032e8:	f001 fdbc 	bl	8004e64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80032ec:	f000 fc50 	bl	8003b90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80032f0:	f001 fd88 	bl	8004e04 <vPortEnterCritical>
 80032f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032fa:	b25b      	sxtb	r3, r3
 80032fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003300:	d103      	bne.n	800330a <xQueueReceive+0x122>
 8003302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800330a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800330c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003310:	b25b      	sxtb	r3, r3
 8003312:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003316:	d103      	bne.n	8003320 <xQueueReceive+0x138>
 8003318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800331a:	2200      	movs	r2, #0
 800331c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003320:	f001 fda0 	bl	8004e64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003324:	1d3a      	adds	r2, r7, #4
 8003326:	f107 0310 	add.w	r3, r7, #16
 800332a:	4611      	mov	r1, r2
 800332c:	4618      	mov	r0, r3
 800332e:	f000 fecd 	bl	80040cc <xTaskCheckForTimeOut>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d123      	bne.n	8003380 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003338:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800333a:	f000 f917 	bl	800356c <prvIsQueueEmpty>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d017      	beq.n	8003374 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003346:	3324      	adds	r3, #36	; 0x24
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	4611      	mov	r1, r2
 800334c:	4618      	mov	r0, r3
 800334e:	f000 fdf3 	bl	8003f38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003352:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003354:	f000 f8b8 	bl	80034c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003358:	f000 fc28 	bl	8003bac <xTaskResumeAll>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d189      	bne.n	8003276 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003362:	4b10      	ldr	r3, [pc, #64]	; (80033a4 <xQueueReceive+0x1bc>)
 8003364:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003368:	601a      	str	r2, [r3, #0]
 800336a:	f3bf 8f4f 	dsb	sy
 800336e:	f3bf 8f6f 	isb	sy
 8003372:	e780      	b.n	8003276 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003374:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003376:	f000 f8a7 	bl	80034c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800337a:	f000 fc17 	bl	8003bac <xTaskResumeAll>
 800337e:	e77a      	b.n	8003276 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003380:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003382:	f000 f8a1 	bl	80034c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003386:	f000 fc11 	bl	8003bac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800338a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800338c:	f000 f8ee 	bl	800356c <prvIsQueueEmpty>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	f43f af6f 	beq.w	8003276 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003398:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800339a:	4618      	mov	r0, r3
 800339c:	3730      	adds	r7, #48	; 0x30
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	e000ed04 	.word	0xe000ed04

080033a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80033b4:	2300      	movs	r3, #0
 80033b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10d      	bne.n	80033e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d14d      	bne.n	800346a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f000 ffdc 	bl	8004390 <xTaskPriorityDisinherit>
 80033d8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	609a      	str	r2, [r3, #8]
 80033e0:	e043      	b.n	800346a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d119      	bne.n	800341c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6858      	ldr	r0, [r3, #4]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f0:	461a      	mov	r2, r3
 80033f2:	68b9      	ldr	r1, [r7, #8]
 80033f4:	f002 f83c 	bl	8005470 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003400:	441a      	add	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	429a      	cmp	r2, r3
 8003410:	d32b      	bcc.n	800346a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	605a      	str	r2, [r3, #4]
 800341a:	e026      	b.n	800346a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	68d8      	ldr	r0, [r3, #12]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003424:	461a      	mov	r2, r3
 8003426:	68b9      	ldr	r1, [r7, #8]
 8003428:	f002 f822 	bl	8005470 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	68da      	ldr	r2, [r3, #12]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003434:	425b      	negs	r3, r3
 8003436:	441a      	add	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	68da      	ldr	r2, [r3, #12]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	429a      	cmp	r2, r3
 8003446:	d207      	bcs.n	8003458 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003450:	425b      	negs	r3, r3
 8003452:	441a      	add	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b02      	cmp	r3, #2
 800345c:	d105      	bne.n	800346a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d002      	beq.n	800346a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	3b01      	subs	r3, #1
 8003468:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1c5a      	adds	r2, r3, #1
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003472:	697b      	ldr	r3, [r7, #20]
}
 8003474:	4618      	mov	r0, r3
 8003476:	3718      	adds	r7, #24
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	2b00      	cmp	r3, #0
 800348c:	d018      	beq.n	80034c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	68da      	ldr	r2, [r3, #12]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	441a      	add	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68da      	ldr	r2, [r3, #12]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d303      	bcc.n	80034b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68d9      	ldr	r1, [r3, #12]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b8:	461a      	mov	r2, r3
 80034ba:	6838      	ldr	r0, [r7, #0]
 80034bc:	f001 ffd8 	bl	8005470 <memcpy>
	}
}
 80034c0:	bf00      	nop
 80034c2:	3708      	adds	r7, #8
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80034d0:	f001 fc98 	bl	8004e04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80034dc:	e011      	b.n	8003502 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d012      	beq.n	800350c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	3324      	adds	r3, #36	; 0x24
 80034ea:	4618      	mov	r0, r3
 80034ec:	f000 fd74 	bl	8003fd8 <xTaskRemoveFromEventList>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80034f6:	f000 fe4b 	bl	8004190 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80034fa:	7bfb      	ldrb	r3, [r7, #15]
 80034fc:	3b01      	subs	r3, #1
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003506:	2b00      	cmp	r3, #0
 8003508:	dce9      	bgt.n	80034de <prvUnlockQueue+0x16>
 800350a:	e000      	b.n	800350e <prvUnlockQueue+0x46>
					break;
 800350c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	22ff      	movs	r2, #255	; 0xff
 8003512:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003516:	f001 fca5 	bl	8004e64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800351a:	f001 fc73 	bl	8004e04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003524:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003526:	e011      	b.n	800354c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d012      	beq.n	8003556 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3310      	adds	r3, #16
 8003534:	4618      	mov	r0, r3
 8003536:	f000 fd4f 	bl	8003fd8 <xTaskRemoveFromEventList>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d001      	beq.n	8003544 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003540:	f000 fe26 	bl	8004190 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003544:	7bbb      	ldrb	r3, [r7, #14]
 8003546:	3b01      	subs	r3, #1
 8003548:	b2db      	uxtb	r3, r3
 800354a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800354c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003550:	2b00      	cmp	r3, #0
 8003552:	dce9      	bgt.n	8003528 <prvUnlockQueue+0x60>
 8003554:	e000      	b.n	8003558 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003556:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	22ff      	movs	r2, #255	; 0xff
 800355c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003560:	f001 fc80 	bl	8004e64 <vPortExitCritical>
}
 8003564:	bf00      	nop
 8003566:	3710      	adds	r7, #16
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003574:	f001 fc46 	bl	8004e04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357c:	2b00      	cmp	r3, #0
 800357e:	d102      	bne.n	8003586 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003580:	2301      	movs	r3, #1
 8003582:	60fb      	str	r3, [r7, #12]
 8003584:	e001      	b.n	800358a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003586:	2300      	movs	r3, #0
 8003588:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800358a:	f001 fc6b 	bl	8004e64 <vPortExitCritical>

	return xReturn;
 800358e:	68fb      	ldr	r3, [r7, #12]
}
 8003590:	4618      	mov	r0, r3
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80035a0:	f001 fc30 	bl	8004e04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d102      	bne.n	80035b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80035b0:	2301      	movs	r3, #1
 80035b2:	60fb      	str	r3, [r7, #12]
 80035b4:	e001      	b.n	80035ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80035b6:	2300      	movs	r3, #0
 80035b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80035ba:	f001 fc53 	bl	8004e64 <vPortExitCritical>

	return xReturn;
 80035be:	68fb      	ldr	r3, [r7, #12]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3710      	adds	r7, #16
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80035d2:	2300      	movs	r3, #0
 80035d4:	60fb      	str	r3, [r7, #12]
 80035d6:	e014      	b.n	8003602 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80035d8:	4a0f      	ldr	r2, [pc, #60]	; (8003618 <vQueueAddToRegistry+0x50>)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d10b      	bne.n	80035fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80035e4:	490c      	ldr	r1, [pc, #48]	; (8003618 <vQueueAddToRegistry+0x50>)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80035ee:	4a0a      	ldr	r2, [pc, #40]	; (8003618 <vQueueAddToRegistry+0x50>)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	4413      	add	r3, r2
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80035fa:	e006      	b.n	800360a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	3301      	adds	r3, #1
 8003600:	60fb      	str	r3, [r7, #12]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2b07      	cmp	r3, #7
 8003606:	d9e7      	bls.n	80035d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003608:	bf00      	nop
 800360a:	bf00      	nop
 800360c:	3714      	adds	r7, #20
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	20004a48 	.word	0x20004a48

0800361c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800362c:	f001 fbea 	bl	8004e04 <vPortEnterCritical>
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003636:	b25b      	sxtb	r3, r3
 8003638:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800363c:	d103      	bne.n	8003646 <vQueueWaitForMessageRestricted+0x2a>
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800364c:	b25b      	sxtb	r3, r3
 800364e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003652:	d103      	bne.n	800365c <vQueueWaitForMessageRestricted+0x40>
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800365c:	f001 fc02 	bl	8004e64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003664:	2b00      	cmp	r3, #0
 8003666:	d106      	bne.n	8003676 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	3324      	adds	r3, #36	; 0x24
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	68b9      	ldr	r1, [r7, #8]
 8003670:	4618      	mov	r0, r3
 8003672:	f000 fc85 	bl	8003f80 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003676:	6978      	ldr	r0, [r7, #20]
 8003678:	f7ff ff26 	bl	80034c8 <prvUnlockQueue>
	}
 800367c:	bf00      	nop
 800367e:	3718      	adds	r7, #24
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003684:	b580      	push	{r7, lr}
 8003686:	b08e      	sub	sp, #56	; 0x38
 8003688:	af04      	add	r7, sp, #16
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
 8003690:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003694:	2b00      	cmp	r3, #0
 8003696:	d10a      	bne.n	80036ae <xTaskCreateStatic+0x2a>
	__asm volatile
 8003698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800369c:	f383 8811 	msr	BASEPRI, r3
 80036a0:	f3bf 8f6f 	isb	sy
 80036a4:	f3bf 8f4f 	dsb	sy
 80036a8:	623b      	str	r3, [r7, #32]
}
 80036aa:	bf00      	nop
 80036ac:	e7fe      	b.n	80036ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80036ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10a      	bne.n	80036ca <xTaskCreateStatic+0x46>
	__asm volatile
 80036b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b8:	f383 8811 	msr	BASEPRI, r3
 80036bc:	f3bf 8f6f 	isb	sy
 80036c0:	f3bf 8f4f 	dsb	sy
 80036c4:	61fb      	str	r3, [r7, #28]
}
 80036c6:	bf00      	nop
 80036c8:	e7fe      	b.n	80036c8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80036ca:	235c      	movs	r3, #92	; 0x5c
 80036cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	2b5c      	cmp	r3, #92	; 0x5c
 80036d2:	d00a      	beq.n	80036ea <xTaskCreateStatic+0x66>
	__asm volatile
 80036d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d8:	f383 8811 	msr	BASEPRI, r3
 80036dc:	f3bf 8f6f 	isb	sy
 80036e0:	f3bf 8f4f 	dsb	sy
 80036e4:	61bb      	str	r3, [r7, #24]
}
 80036e6:	bf00      	nop
 80036e8:	e7fe      	b.n	80036e8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80036ea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80036ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d01e      	beq.n	8003730 <xTaskCreateStatic+0xac>
 80036f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d01b      	beq.n	8003730 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80036f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036fa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80036fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003700:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003704:	2202      	movs	r2, #2
 8003706:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800370a:	2300      	movs	r3, #0
 800370c:	9303      	str	r3, [sp, #12]
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	9302      	str	r3, [sp, #8]
 8003712:	f107 0314 	add.w	r3, r7, #20
 8003716:	9301      	str	r3, [sp, #4]
 8003718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371a:	9300      	str	r3, [sp, #0]
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	68b9      	ldr	r1, [r7, #8]
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f000 f850 	bl	80037c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003728:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800372a:	f000 f8dd 	bl	80038e8 <prvAddNewTaskToReadyList>
 800372e:	e001      	b.n	8003734 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003730:	2300      	movs	r3, #0
 8003732:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003734:	697b      	ldr	r3, [r7, #20]
	}
 8003736:	4618      	mov	r0, r3
 8003738:	3728      	adds	r7, #40	; 0x28
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800373e:	b580      	push	{r7, lr}
 8003740:	b08c      	sub	sp, #48	; 0x30
 8003742:	af04      	add	r7, sp, #16
 8003744:	60f8      	str	r0, [r7, #12]
 8003746:	60b9      	str	r1, [r7, #8]
 8003748:	603b      	str	r3, [r7, #0]
 800374a:	4613      	mov	r3, r2
 800374c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800374e:	88fb      	ldrh	r3, [r7, #6]
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	4618      	mov	r0, r3
 8003754:	f001 fc78 	bl	8005048 <pvPortMalloc>
 8003758:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00e      	beq.n	800377e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003760:	205c      	movs	r0, #92	; 0x5c
 8003762:	f001 fc71 	bl	8005048 <pvPortMalloc>
 8003766:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d003      	beq.n	8003776 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	697a      	ldr	r2, [r7, #20]
 8003772:	631a      	str	r2, [r3, #48]	; 0x30
 8003774:	e005      	b.n	8003782 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003776:	6978      	ldr	r0, [r7, #20]
 8003778:	f001 fd32 	bl	80051e0 <vPortFree>
 800377c:	e001      	b.n	8003782 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800377e:	2300      	movs	r3, #0
 8003780:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d017      	beq.n	80037b8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003790:	88fa      	ldrh	r2, [r7, #6]
 8003792:	2300      	movs	r3, #0
 8003794:	9303      	str	r3, [sp, #12]
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	9302      	str	r3, [sp, #8]
 800379a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800379c:	9301      	str	r3, [sp, #4]
 800379e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a0:	9300      	str	r3, [sp, #0]
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	68b9      	ldr	r1, [r7, #8]
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f000 f80e 	bl	80037c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80037ac:	69f8      	ldr	r0, [r7, #28]
 80037ae:	f000 f89b 	bl	80038e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80037b2:	2301      	movs	r3, #1
 80037b4:	61bb      	str	r3, [r7, #24]
 80037b6:	e002      	b.n	80037be <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80037b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80037be:	69bb      	ldr	r3, [r7, #24]
	}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3720      	adds	r7, #32
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b088      	sub	sp, #32
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
 80037d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80037d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	461a      	mov	r2, r3
 80037e0:	21a5      	movs	r1, #165	; 0xa5
 80037e2:	f001 fe53 	bl	800548c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80037e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80037f0:	3b01      	subs	r3, #1
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4413      	add	r3, r2
 80037f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	f023 0307 	bic.w	r3, r3, #7
 80037fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	f003 0307 	and.w	r3, r3, #7
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00a      	beq.n	8003820 <prvInitialiseNewTask+0x58>
	__asm volatile
 800380a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800380e:	f383 8811 	msr	BASEPRI, r3
 8003812:	f3bf 8f6f 	isb	sy
 8003816:	f3bf 8f4f 	dsb	sy
 800381a:	617b      	str	r3, [r7, #20]
}
 800381c:	bf00      	nop
 800381e:	e7fe      	b.n	800381e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d01f      	beq.n	8003866 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003826:	2300      	movs	r3, #0
 8003828:	61fb      	str	r3, [r7, #28]
 800382a:	e012      	b.n	8003852 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800382c:	68ba      	ldr	r2, [r7, #8]
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	4413      	add	r3, r2
 8003832:	7819      	ldrb	r1, [r3, #0]
 8003834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	4413      	add	r3, r2
 800383a:	3334      	adds	r3, #52	; 0x34
 800383c:	460a      	mov	r2, r1
 800383e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	4413      	add	r3, r2
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d006      	beq.n	800385a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	3301      	adds	r3, #1
 8003850:	61fb      	str	r3, [r7, #28]
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	2b0f      	cmp	r3, #15
 8003856:	d9e9      	bls.n	800382c <prvInitialiseNewTask+0x64>
 8003858:	e000      	b.n	800385c <prvInitialiseNewTask+0x94>
			{
				break;
 800385a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800385c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003864:	e003      	b.n	800386e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800386e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003870:	2b37      	cmp	r3, #55	; 0x37
 8003872:	d901      	bls.n	8003878 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003874:	2337      	movs	r3, #55	; 0x37
 8003876:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800387c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800387e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003880:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003882:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003886:	2200      	movs	r2, #0
 8003888:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800388a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388c:	3304      	adds	r3, #4
 800388e:	4618      	mov	r0, r3
 8003890:	f7ff f978 	bl	8002b84 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003896:	3318      	adds	r3, #24
 8003898:	4618      	mov	r0, r3
 800389a:	f7ff f973 	bl	8002b84 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800389e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80038aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80038ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80038b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b6:	2200      	movs	r2, #0
 80038b8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80038ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	68f9      	ldr	r1, [r7, #12]
 80038c6:	69b8      	ldr	r0, [r7, #24]
 80038c8:	f001 f972 	bl	8004bb0 <pxPortInitialiseStack>
 80038cc:	4602      	mov	r2, r0
 80038ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80038d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d002      	beq.n	80038de <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80038d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038de:	bf00      	nop
 80038e0:	3720      	adds	r7, #32
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
	...

080038e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80038f0:	f001 fa88 	bl	8004e04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80038f4:	4b2d      	ldr	r3, [pc, #180]	; (80039ac <prvAddNewTaskToReadyList+0xc4>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	3301      	adds	r3, #1
 80038fa:	4a2c      	ldr	r2, [pc, #176]	; (80039ac <prvAddNewTaskToReadyList+0xc4>)
 80038fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80038fe:	4b2c      	ldr	r3, [pc, #176]	; (80039b0 <prvAddNewTaskToReadyList+0xc8>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d109      	bne.n	800391a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003906:	4a2a      	ldr	r2, [pc, #168]	; (80039b0 <prvAddNewTaskToReadyList+0xc8>)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800390c:	4b27      	ldr	r3, [pc, #156]	; (80039ac <prvAddNewTaskToReadyList+0xc4>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d110      	bne.n	8003936 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003914:	f000 fc60 	bl	80041d8 <prvInitialiseTaskLists>
 8003918:	e00d      	b.n	8003936 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800391a:	4b26      	ldr	r3, [pc, #152]	; (80039b4 <prvAddNewTaskToReadyList+0xcc>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d109      	bne.n	8003936 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003922:	4b23      	ldr	r3, [pc, #140]	; (80039b0 <prvAddNewTaskToReadyList+0xc8>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392c:	429a      	cmp	r2, r3
 800392e:	d802      	bhi.n	8003936 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003930:	4a1f      	ldr	r2, [pc, #124]	; (80039b0 <prvAddNewTaskToReadyList+0xc8>)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003936:	4b20      	ldr	r3, [pc, #128]	; (80039b8 <prvAddNewTaskToReadyList+0xd0>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	3301      	adds	r3, #1
 800393c:	4a1e      	ldr	r2, [pc, #120]	; (80039b8 <prvAddNewTaskToReadyList+0xd0>)
 800393e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003940:	4b1d      	ldr	r3, [pc, #116]	; (80039b8 <prvAddNewTaskToReadyList+0xd0>)
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800394c:	4b1b      	ldr	r3, [pc, #108]	; (80039bc <prvAddNewTaskToReadyList+0xd4>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	429a      	cmp	r2, r3
 8003952:	d903      	bls.n	800395c <prvAddNewTaskToReadyList+0x74>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003958:	4a18      	ldr	r2, [pc, #96]	; (80039bc <prvAddNewTaskToReadyList+0xd4>)
 800395a:	6013      	str	r3, [r2, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003960:	4613      	mov	r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4413      	add	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4a15      	ldr	r2, [pc, #84]	; (80039c0 <prvAddNewTaskToReadyList+0xd8>)
 800396a:	441a      	add	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	3304      	adds	r3, #4
 8003970:	4619      	mov	r1, r3
 8003972:	4610      	mov	r0, r2
 8003974:	f7ff f913 	bl	8002b9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003978:	f001 fa74 	bl	8004e64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800397c:	4b0d      	ldr	r3, [pc, #52]	; (80039b4 <prvAddNewTaskToReadyList+0xcc>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00e      	beq.n	80039a2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003984:	4b0a      	ldr	r3, [pc, #40]	; (80039b0 <prvAddNewTaskToReadyList+0xc8>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398e:	429a      	cmp	r2, r3
 8003990:	d207      	bcs.n	80039a2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003992:	4b0c      	ldr	r3, [pc, #48]	; (80039c4 <prvAddNewTaskToReadyList+0xdc>)
 8003994:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003998:	601a      	str	r2, [r3, #0]
 800399a:	f3bf 8f4f 	dsb	sy
 800399e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039a2:	bf00      	nop
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	20000c24 	.word	0x20000c24
 80039b0:	20000750 	.word	0x20000750
 80039b4:	20000c30 	.word	0x20000c30
 80039b8:	20000c40 	.word	0x20000c40
 80039bc:	20000c2c 	.word	0x20000c2c
 80039c0:	20000754 	.word	0x20000754
 80039c4:	e000ed04 	.word	0xe000ed04

080039c8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b08a      	sub	sp, #40	; 0x28
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80039d2:	2300      	movs	r3, #0
 80039d4:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d10a      	bne.n	80039f2 <vTaskDelayUntil+0x2a>
	__asm volatile
 80039dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e0:	f383 8811 	msr	BASEPRI, r3
 80039e4:	f3bf 8f6f 	isb	sy
 80039e8:	f3bf 8f4f 	dsb	sy
 80039ec:	617b      	str	r3, [r7, #20]
}
 80039ee:	bf00      	nop
 80039f0:	e7fe      	b.n	80039f0 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10a      	bne.n	8003a0e <vTaskDelayUntil+0x46>
	__asm volatile
 80039f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fc:	f383 8811 	msr	BASEPRI, r3
 8003a00:	f3bf 8f6f 	isb	sy
 8003a04:	f3bf 8f4f 	dsb	sy
 8003a08:	613b      	str	r3, [r7, #16]
}
 8003a0a:	bf00      	nop
 8003a0c:	e7fe      	b.n	8003a0c <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8003a0e:	4b2a      	ldr	r3, [pc, #168]	; (8003ab8 <vTaskDelayUntil+0xf0>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00a      	beq.n	8003a2c <vTaskDelayUntil+0x64>
	__asm volatile
 8003a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a1a:	f383 8811 	msr	BASEPRI, r3
 8003a1e:	f3bf 8f6f 	isb	sy
 8003a22:	f3bf 8f4f 	dsb	sy
 8003a26:	60fb      	str	r3, [r7, #12]
}
 8003a28:	bf00      	nop
 8003a2a:	e7fe      	b.n	8003a2a <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8003a2c:	f000 f8b0 	bl	8003b90 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8003a30:	4b22      	ldr	r3, [pc, #136]	; (8003abc <vTaskDelayUntil+0xf4>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6a3a      	ldr	r2, [r7, #32]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d20b      	bcs.n	8003a62 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	69fa      	ldr	r2, [r7, #28]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d211      	bcs.n	8003a78 <vTaskDelayUntil+0xb0>
 8003a54:	69fa      	ldr	r2, [r7, #28]
 8003a56:	6a3b      	ldr	r3, [r7, #32]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d90d      	bls.n	8003a78 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a60:	e00a      	b.n	8003a78 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	69fa      	ldr	r2, [r7, #28]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d303      	bcc.n	8003a74 <vTaskDelayUntil+0xac>
 8003a6c:	69fa      	ldr	r2, [r7, #28]
 8003a6e:	6a3b      	ldr	r3, [r7, #32]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d901      	bls.n	8003a78 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8003a74:	2301      	movs	r3, #1
 8003a76:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	69fa      	ldr	r2, [r7, #28]
 8003a7c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d006      	beq.n	8003a92 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8003a84:	69fa      	ldr	r2, [r7, #28]
 8003a86:	6a3b      	ldr	r3, [r7, #32]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f000 fced 	bl	800446c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8003a92:	f000 f88b 	bl	8003bac <xTaskResumeAll>
 8003a96:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d107      	bne.n	8003aae <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8003a9e:	4b08      	ldr	r3, [pc, #32]	; (8003ac0 <vTaskDelayUntil+0xf8>)
 8003aa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aa4:	601a      	str	r2, [r3, #0]
 8003aa6:	f3bf 8f4f 	dsb	sy
 8003aaa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003aae:	bf00      	nop
 8003ab0:	3728      	adds	r7, #40	; 0x28
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	20000c4c 	.word	0x20000c4c
 8003abc:	20000c28 	.word	0x20000c28
 8003ac0:	e000ed04 	.word	0xe000ed04

08003ac4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b08a      	sub	sp, #40	; 0x28
 8003ac8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003aca:	2300      	movs	r3, #0
 8003acc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003ad2:	463a      	mov	r2, r7
 8003ad4:	1d39      	adds	r1, r7, #4
 8003ad6:	f107 0308 	add.w	r3, r7, #8
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7fe fffe 	bl	8002adc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003ae0:	6839      	ldr	r1, [r7, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68ba      	ldr	r2, [r7, #8]
 8003ae6:	9202      	str	r2, [sp, #8]
 8003ae8:	9301      	str	r3, [sp, #4]
 8003aea:	2300      	movs	r3, #0
 8003aec:	9300      	str	r3, [sp, #0]
 8003aee:	2300      	movs	r3, #0
 8003af0:	460a      	mov	r2, r1
 8003af2:	4921      	ldr	r1, [pc, #132]	; (8003b78 <vTaskStartScheduler+0xb4>)
 8003af4:	4821      	ldr	r0, [pc, #132]	; (8003b7c <vTaskStartScheduler+0xb8>)
 8003af6:	f7ff fdc5 	bl	8003684 <xTaskCreateStatic>
 8003afa:	4603      	mov	r3, r0
 8003afc:	4a20      	ldr	r2, [pc, #128]	; (8003b80 <vTaskStartScheduler+0xbc>)
 8003afe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003b00:	4b1f      	ldr	r3, [pc, #124]	; (8003b80 <vTaskStartScheduler+0xbc>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d002      	beq.n	8003b0e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	617b      	str	r3, [r7, #20]
 8003b0c:	e001      	b.n	8003b12 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d102      	bne.n	8003b1e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003b18:	f000 fcfc 	bl	8004514 <xTimerCreateTimerTask>
 8003b1c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d116      	bne.n	8003b52 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b28:	f383 8811 	msr	BASEPRI, r3
 8003b2c:	f3bf 8f6f 	isb	sy
 8003b30:	f3bf 8f4f 	dsb	sy
 8003b34:	613b      	str	r3, [r7, #16]
}
 8003b36:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003b38:	4b12      	ldr	r3, [pc, #72]	; (8003b84 <vTaskStartScheduler+0xc0>)
 8003b3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b3e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003b40:	4b11      	ldr	r3, [pc, #68]	; (8003b88 <vTaskStartScheduler+0xc4>)
 8003b42:	2201      	movs	r2, #1
 8003b44:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003b46:	4b11      	ldr	r3, [pc, #68]	; (8003b8c <vTaskStartScheduler+0xc8>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003b4c:	f001 f8b8 	bl	8004cc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003b50:	e00e      	b.n	8003b70 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b58:	d10a      	bne.n	8003b70 <vTaskStartScheduler+0xac>
	__asm volatile
 8003b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b5e:	f383 8811 	msr	BASEPRI, r3
 8003b62:	f3bf 8f6f 	isb	sy
 8003b66:	f3bf 8f4f 	dsb	sy
 8003b6a:	60fb      	str	r3, [r7, #12]
}
 8003b6c:	bf00      	nop
 8003b6e:	e7fe      	b.n	8003b6e <vTaskStartScheduler+0xaa>
}
 8003b70:	bf00      	nop
 8003b72:	3718      	adds	r7, #24
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	080071a8 	.word	0x080071a8
 8003b7c:	080041a9 	.word	0x080041a9
 8003b80:	20000c48 	.word	0x20000c48
 8003b84:	20000c44 	.word	0x20000c44
 8003b88:	20000c30 	.word	0x20000c30
 8003b8c:	20000c28 	.word	0x20000c28

08003b90 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003b90:	b480      	push	{r7}
 8003b92:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003b94:	4b04      	ldr	r3, [pc, #16]	; (8003ba8 <vTaskSuspendAll+0x18>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	3301      	adds	r3, #1
 8003b9a:	4a03      	ldr	r2, [pc, #12]	; (8003ba8 <vTaskSuspendAll+0x18>)
 8003b9c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003b9e:	bf00      	nop
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr
 8003ba8:	20000c4c 	.word	0x20000c4c

08003bac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003bba:	4b42      	ldr	r3, [pc, #264]	; (8003cc4 <xTaskResumeAll+0x118>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10a      	bne.n	8003bd8 <xTaskResumeAll+0x2c>
	__asm volatile
 8003bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc6:	f383 8811 	msr	BASEPRI, r3
 8003bca:	f3bf 8f6f 	isb	sy
 8003bce:	f3bf 8f4f 	dsb	sy
 8003bd2:	603b      	str	r3, [r7, #0]
}
 8003bd4:	bf00      	nop
 8003bd6:	e7fe      	b.n	8003bd6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003bd8:	f001 f914 	bl	8004e04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003bdc:	4b39      	ldr	r3, [pc, #228]	; (8003cc4 <xTaskResumeAll+0x118>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	3b01      	subs	r3, #1
 8003be2:	4a38      	ldr	r2, [pc, #224]	; (8003cc4 <xTaskResumeAll+0x118>)
 8003be4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003be6:	4b37      	ldr	r3, [pc, #220]	; (8003cc4 <xTaskResumeAll+0x118>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d162      	bne.n	8003cb4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003bee:	4b36      	ldr	r3, [pc, #216]	; (8003cc8 <xTaskResumeAll+0x11c>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d05e      	beq.n	8003cb4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003bf6:	e02f      	b.n	8003c58 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bf8:	4b34      	ldr	r3, [pc, #208]	; (8003ccc <xTaskResumeAll+0x120>)
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	3318      	adds	r3, #24
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7ff f827 	bl	8002c58 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	3304      	adds	r3, #4
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7ff f822 	bl	8002c58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c18:	4b2d      	ldr	r3, [pc, #180]	; (8003cd0 <xTaskResumeAll+0x124>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d903      	bls.n	8003c28 <xTaskResumeAll+0x7c>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c24:	4a2a      	ldr	r2, [pc, #168]	; (8003cd0 <xTaskResumeAll+0x124>)
 8003c26:	6013      	str	r3, [r2, #0]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4413      	add	r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	4a27      	ldr	r2, [pc, #156]	; (8003cd4 <xTaskResumeAll+0x128>)
 8003c36:	441a      	add	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	3304      	adds	r3, #4
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	4610      	mov	r0, r2
 8003c40:	f7fe ffad 	bl	8002b9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c48:	4b23      	ldr	r3, [pc, #140]	; (8003cd8 <xTaskResumeAll+0x12c>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d302      	bcc.n	8003c58 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003c52:	4b22      	ldr	r3, [pc, #136]	; (8003cdc <xTaskResumeAll+0x130>)
 8003c54:	2201      	movs	r2, #1
 8003c56:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c58:	4b1c      	ldr	r3, [pc, #112]	; (8003ccc <xTaskResumeAll+0x120>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1cb      	bne.n	8003bf8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003c66:	f000 fb55 	bl	8004314 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003c6a:	4b1d      	ldr	r3, [pc, #116]	; (8003ce0 <xTaskResumeAll+0x134>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d010      	beq.n	8003c98 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003c76:	f000 f847 	bl	8003d08 <xTaskIncrementTick>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d002      	beq.n	8003c86 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003c80:	4b16      	ldr	r3, [pc, #88]	; (8003cdc <xTaskResumeAll+0x130>)
 8003c82:	2201      	movs	r2, #1
 8003c84:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1f1      	bne.n	8003c76 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003c92:	4b13      	ldr	r3, [pc, #76]	; (8003ce0 <xTaskResumeAll+0x134>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003c98:	4b10      	ldr	r3, [pc, #64]	; (8003cdc <xTaskResumeAll+0x130>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d009      	beq.n	8003cb4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003ca4:	4b0f      	ldr	r3, [pc, #60]	; (8003ce4 <xTaskResumeAll+0x138>)
 8003ca6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003caa:	601a      	str	r2, [r3, #0]
 8003cac:	f3bf 8f4f 	dsb	sy
 8003cb0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003cb4:	f001 f8d6 	bl	8004e64 <vPortExitCritical>

	return xAlreadyYielded;
 8003cb8:	68bb      	ldr	r3, [r7, #8]
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	20000c4c 	.word	0x20000c4c
 8003cc8:	20000c24 	.word	0x20000c24
 8003ccc:	20000be4 	.word	0x20000be4
 8003cd0:	20000c2c 	.word	0x20000c2c
 8003cd4:	20000754 	.word	0x20000754
 8003cd8:	20000750 	.word	0x20000750
 8003cdc:	20000c38 	.word	0x20000c38
 8003ce0:	20000c34 	.word	0x20000c34
 8003ce4:	e000ed04 	.word	0xe000ed04

08003ce8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003cee:	4b05      	ldr	r3, [pc, #20]	; (8003d04 <xTaskGetTickCount+0x1c>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003cf4:	687b      	ldr	r3, [r7, #4]
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	20000c28 	.word	0x20000c28

08003d08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d12:	4b4f      	ldr	r3, [pc, #316]	; (8003e50 <xTaskIncrementTick+0x148>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f040 808f 	bne.w	8003e3a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d1c:	4b4d      	ldr	r3, [pc, #308]	; (8003e54 <xTaskIncrementTick+0x14c>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	3301      	adds	r3, #1
 8003d22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003d24:	4a4b      	ldr	r2, [pc, #300]	; (8003e54 <xTaskIncrementTick+0x14c>)
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d120      	bne.n	8003d72 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003d30:	4b49      	ldr	r3, [pc, #292]	; (8003e58 <xTaskIncrementTick+0x150>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00a      	beq.n	8003d50 <xTaskIncrementTick+0x48>
	__asm volatile
 8003d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d3e:	f383 8811 	msr	BASEPRI, r3
 8003d42:	f3bf 8f6f 	isb	sy
 8003d46:	f3bf 8f4f 	dsb	sy
 8003d4a:	603b      	str	r3, [r7, #0]
}
 8003d4c:	bf00      	nop
 8003d4e:	e7fe      	b.n	8003d4e <xTaskIncrementTick+0x46>
 8003d50:	4b41      	ldr	r3, [pc, #260]	; (8003e58 <xTaskIncrementTick+0x150>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	60fb      	str	r3, [r7, #12]
 8003d56:	4b41      	ldr	r3, [pc, #260]	; (8003e5c <xTaskIncrementTick+0x154>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a3f      	ldr	r2, [pc, #252]	; (8003e58 <xTaskIncrementTick+0x150>)
 8003d5c:	6013      	str	r3, [r2, #0]
 8003d5e:	4a3f      	ldr	r2, [pc, #252]	; (8003e5c <xTaskIncrementTick+0x154>)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6013      	str	r3, [r2, #0]
 8003d64:	4b3e      	ldr	r3, [pc, #248]	; (8003e60 <xTaskIncrementTick+0x158>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	3301      	adds	r3, #1
 8003d6a:	4a3d      	ldr	r2, [pc, #244]	; (8003e60 <xTaskIncrementTick+0x158>)
 8003d6c:	6013      	str	r3, [r2, #0]
 8003d6e:	f000 fad1 	bl	8004314 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003d72:	4b3c      	ldr	r3, [pc, #240]	; (8003e64 <xTaskIncrementTick+0x15c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d349      	bcc.n	8003e10 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d7c:	4b36      	ldr	r3, [pc, #216]	; (8003e58 <xTaskIncrementTick+0x150>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d104      	bne.n	8003d90 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d86:	4b37      	ldr	r3, [pc, #220]	; (8003e64 <xTaskIncrementTick+0x15c>)
 8003d88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d8c:	601a      	str	r2, [r3, #0]
					break;
 8003d8e:	e03f      	b.n	8003e10 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d90:	4b31      	ldr	r3, [pc, #196]	; (8003e58 <xTaskIncrementTick+0x150>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d203      	bcs.n	8003db0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003da8:	4a2e      	ldr	r2, [pc, #184]	; (8003e64 <xTaskIncrementTick+0x15c>)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003dae:	e02f      	b.n	8003e10 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	3304      	adds	r3, #4
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7fe ff4f 	bl	8002c58 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d004      	beq.n	8003dcc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	3318      	adds	r3, #24
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7fe ff46 	bl	8002c58 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dd0:	4b25      	ldr	r3, [pc, #148]	; (8003e68 <xTaskIncrementTick+0x160>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d903      	bls.n	8003de0 <xTaskIncrementTick+0xd8>
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ddc:	4a22      	ldr	r2, [pc, #136]	; (8003e68 <xTaskIncrementTick+0x160>)
 8003dde:	6013      	str	r3, [r2, #0]
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003de4:	4613      	mov	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4413      	add	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	4a1f      	ldr	r2, [pc, #124]	; (8003e6c <xTaskIncrementTick+0x164>)
 8003dee:	441a      	add	r2, r3
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	3304      	adds	r3, #4
 8003df4:	4619      	mov	r1, r3
 8003df6:	4610      	mov	r0, r2
 8003df8:	f7fe fed1 	bl	8002b9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e00:	4b1b      	ldr	r3, [pc, #108]	; (8003e70 <xTaskIncrementTick+0x168>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d3b8      	bcc.n	8003d7c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e0e:	e7b5      	b.n	8003d7c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e10:	4b17      	ldr	r3, [pc, #92]	; (8003e70 <xTaskIncrementTick+0x168>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e16:	4915      	ldr	r1, [pc, #84]	; (8003e6c <xTaskIncrementTick+0x164>)
 8003e18:	4613      	mov	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	440b      	add	r3, r1
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d901      	bls.n	8003e2c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003e2c:	4b11      	ldr	r3, [pc, #68]	; (8003e74 <xTaskIncrementTick+0x16c>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d007      	beq.n	8003e44 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003e34:	2301      	movs	r3, #1
 8003e36:	617b      	str	r3, [r7, #20]
 8003e38:	e004      	b.n	8003e44 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003e3a:	4b0f      	ldr	r3, [pc, #60]	; (8003e78 <xTaskIncrementTick+0x170>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	3301      	adds	r3, #1
 8003e40:	4a0d      	ldr	r2, [pc, #52]	; (8003e78 <xTaskIncrementTick+0x170>)
 8003e42:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003e44:	697b      	ldr	r3, [r7, #20]
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3718      	adds	r7, #24
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	20000c4c 	.word	0x20000c4c
 8003e54:	20000c28 	.word	0x20000c28
 8003e58:	20000bdc 	.word	0x20000bdc
 8003e5c:	20000be0 	.word	0x20000be0
 8003e60:	20000c3c 	.word	0x20000c3c
 8003e64:	20000c44 	.word	0x20000c44
 8003e68:	20000c2c 	.word	0x20000c2c
 8003e6c:	20000754 	.word	0x20000754
 8003e70:	20000750 	.word	0x20000750
 8003e74:	20000c38 	.word	0x20000c38
 8003e78:	20000c34 	.word	0x20000c34

08003e7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003e82:	4b28      	ldr	r3, [pc, #160]	; (8003f24 <vTaskSwitchContext+0xa8>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003e8a:	4b27      	ldr	r3, [pc, #156]	; (8003f28 <vTaskSwitchContext+0xac>)
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003e90:	e041      	b.n	8003f16 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003e92:	4b25      	ldr	r3, [pc, #148]	; (8003f28 <vTaskSwitchContext+0xac>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e98:	4b24      	ldr	r3, [pc, #144]	; (8003f2c <vTaskSwitchContext+0xb0>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	60fb      	str	r3, [r7, #12]
 8003e9e:	e010      	b.n	8003ec2 <vTaskSwitchContext+0x46>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10a      	bne.n	8003ebc <vTaskSwitchContext+0x40>
	__asm volatile
 8003ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eaa:	f383 8811 	msr	BASEPRI, r3
 8003eae:	f3bf 8f6f 	isb	sy
 8003eb2:	f3bf 8f4f 	dsb	sy
 8003eb6:	607b      	str	r3, [r7, #4]
}
 8003eb8:	bf00      	nop
 8003eba:	e7fe      	b.n	8003eba <vTaskSwitchContext+0x3e>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	60fb      	str	r3, [r7, #12]
 8003ec2:	491b      	ldr	r1, [pc, #108]	; (8003f30 <vTaskSwitchContext+0xb4>)
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	4413      	add	r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	440b      	add	r3, r1
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d0e4      	beq.n	8003ea0 <vTaskSwitchContext+0x24>
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4413      	add	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4a13      	ldr	r2, [pc, #76]	; (8003f30 <vTaskSwitchContext+0xb4>)
 8003ee2:	4413      	add	r3, r2
 8003ee4:	60bb      	str	r3, [r7, #8]
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	605a      	str	r2, [r3, #4]
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	685a      	ldr	r2, [r3, #4]
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	3308      	adds	r3, #8
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d104      	bne.n	8003f06 <vTaskSwitchContext+0x8a>
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	605a      	str	r2, [r3, #4]
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	4a09      	ldr	r2, [pc, #36]	; (8003f34 <vTaskSwitchContext+0xb8>)
 8003f0e:	6013      	str	r3, [r2, #0]
 8003f10:	4a06      	ldr	r2, [pc, #24]	; (8003f2c <vTaskSwitchContext+0xb0>)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6013      	str	r3, [r2, #0]
}
 8003f16:	bf00      	nop
 8003f18:	3714      	adds	r7, #20
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	20000c4c 	.word	0x20000c4c
 8003f28:	20000c38 	.word	0x20000c38
 8003f2c:	20000c2c 	.word	0x20000c2c
 8003f30:	20000754 	.word	0x20000754
 8003f34:	20000750 	.word	0x20000750

08003f38 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10a      	bne.n	8003f5e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f4c:	f383 8811 	msr	BASEPRI, r3
 8003f50:	f3bf 8f6f 	isb	sy
 8003f54:	f3bf 8f4f 	dsb	sy
 8003f58:	60fb      	str	r3, [r7, #12]
}
 8003f5a:	bf00      	nop
 8003f5c:	e7fe      	b.n	8003f5c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f5e:	4b07      	ldr	r3, [pc, #28]	; (8003f7c <vTaskPlaceOnEventList+0x44>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	3318      	adds	r3, #24
 8003f64:	4619      	mov	r1, r3
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f7fe fe3d 	bl	8002be6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003f6c:	2101      	movs	r1, #1
 8003f6e:	6838      	ldr	r0, [r7, #0]
 8003f70:	f000 fa7c 	bl	800446c <prvAddCurrentTaskToDelayedList>
}
 8003f74:	bf00      	nop
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	20000750 	.word	0x20000750

08003f80 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10a      	bne.n	8003fa8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f96:	f383 8811 	msr	BASEPRI, r3
 8003f9a:	f3bf 8f6f 	isb	sy
 8003f9e:	f3bf 8f4f 	dsb	sy
 8003fa2:	617b      	str	r3, [r7, #20]
}
 8003fa4:	bf00      	nop
 8003fa6:	e7fe      	b.n	8003fa6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003fa8:	4b0a      	ldr	r3, [pc, #40]	; (8003fd4 <vTaskPlaceOnEventListRestricted+0x54>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	3318      	adds	r3, #24
 8003fae:	4619      	mov	r1, r3
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f7fe fdf4 	bl	8002b9e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d002      	beq.n	8003fc2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003fbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003fc0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003fc2:	6879      	ldr	r1, [r7, #4]
 8003fc4:	68b8      	ldr	r0, [r7, #8]
 8003fc6:	f000 fa51 	bl	800446c <prvAddCurrentTaskToDelayedList>
	}
 8003fca:	bf00      	nop
 8003fcc:	3718      	adds	r7, #24
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	20000750 	.word	0x20000750

08003fd8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10a      	bne.n	8004004 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff2:	f383 8811 	msr	BASEPRI, r3
 8003ff6:	f3bf 8f6f 	isb	sy
 8003ffa:	f3bf 8f4f 	dsb	sy
 8003ffe:	60fb      	str	r3, [r7, #12]
}
 8004000:	bf00      	nop
 8004002:	e7fe      	b.n	8004002 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	3318      	adds	r3, #24
 8004008:	4618      	mov	r0, r3
 800400a:	f7fe fe25 	bl	8002c58 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800400e:	4b1e      	ldr	r3, [pc, #120]	; (8004088 <xTaskRemoveFromEventList+0xb0>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d11d      	bne.n	8004052 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	3304      	adds	r3, #4
 800401a:	4618      	mov	r0, r3
 800401c:	f7fe fe1c 	bl	8002c58 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004024:	4b19      	ldr	r3, [pc, #100]	; (800408c <xTaskRemoveFromEventList+0xb4>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	429a      	cmp	r2, r3
 800402a:	d903      	bls.n	8004034 <xTaskRemoveFromEventList+0x5c>
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004030:	4a16      	ldr	r2, [pc, #88]	; (800408c <xTaskRemoveFromEventList+0xb4>)
 8004032:	6013      	str	r3, [r2, #0]
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004038:	4613      	mov	r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	4413      	add	r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	4a13      	ldr	r2, [pc, #76]	; (8004090 <xTaskRemoveFromEventList+0xb8>)
 8004042:	441a      	add	r2, r3
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	3304      	adds	r3, #4
 8004048:	4619      	mov	r1, r3
 800404a:	4610      	mov	r0, r2
 800404c:	f7fe fda7 	bl	8002b9e <vListInsertEnd>
 8004050:	e005      	b.n	800405e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	3318      	adds	r3, #24
 8004056:	4619      	mov	r1, r3
 8004058:	480e      	ldr	r0, [pc, #56]	; (8004094 <xTaskRemoveFromEventList+0xbc>)
 800405a:	f7fe fda0 	bl	8002b9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004062:	4b0d      	ldr	r3, [pc, #52]	; (8004098 <xTaskRemoveFromEventList+0xc0>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004068:	429a      	cmp	r2, r3
 800406a:	d905      	bls.n	8004078 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800406c:	2301      	movs	r3, #1
 800406e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004070:	4b0a      	ldr	r3, [pc, #40]	; (800409c <xTaskRemoveFromEventList+0xc4>)
 8004072:	2201      	movs	r2, #1
 8004074:	601a      	str	r2, [r3, #0]
 8004076:	e001      	b.n	800407c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004078:	2300      	movs	r3, #0
 800407a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800407c:	697b      	ldr	r3, [r7, #20]
}
 800407e:	4618      	mov	r0, r3
 8004080:	3718      	adds	r7, #24
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	20000c4c 	.word	0x20000c4c
 800408c:	20000c2c 	.word	0x20000c2c
 8004090:	20000754 	.word	0x20000754
 8004094:	20000be4 	.word	0x20000be4
 8004098:	20000750 	.word	0x20000750
 800409c:	20000c38 	.word	0x20000c38

080040a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80040a8:	4b06      	ldr	r3, [pc, #24]	; (80040c4 <vTaskInternalSetTimeOutState+0x24>)
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80040b0:	4b05      	ldr	r3, [pc, #20]	; (80040c8 <vTaskInternalSetTimeOutState+0x28>)
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	605a      	str	r2, [r3, #4]
}
 80040b8:	bf00      	nop
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr
 80040c4:	20000c3c 	.word	0x20000c3c
 80040c8:	20000c28 	.word	0x20000c28

080040cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b088      	sub	sp, #32
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10a      	bne.n	80040f2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80040dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e0:	f383 8811 	msr	BASEPRI, r3
 80040e4:	f3bf 8f6f 	isb	sy
 80040e8:	f3bf 8f4f 	dsb	sy
 80040ec:	613b      	str	r3, [r7, #16]
}
 80040ee:	bf00      	nop
 80040f0:	e7fe      	b.n	80040f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10a      	bne.n	800410e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80040f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fc:	f383 8811 	msr	BASEPRI, r3
 8004100:	f3bf 8f6f 	isb	sy
 8004104:	f3bf 8f4f 	dsb	sy
 8004108:	60fb      	str	r3, [r7, #12]
}
 800410a:	bf00      	nop
 800410c:	e7fe      	b.n	800410c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800410e:	f000 fe79 	bl	8004e04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004112:	4b1d      	ldr	r3, [pc, #116]	; (8004188 <xTaskCheckForTimeOut+0xbc>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800412a:	d102      	bne.n	8004132 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800412c:	2300      	movs	r3, #0
 800412e:	61fb      	str	r3, [r7, #28]
 8004130:	e023      	b.n	800417a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	4b15      	ldr	r3, [pc, #84]	; (800418c <xTaskCheckForTimeOut+0xc0>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	429a      	cmp	r2, r3
 800413c:	d007      	beq.n	800414e <xTaskCheckForTimeOut+0x82>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	429a      	cmp	r2, r3
 8004146:	d302      	bcc.n	800414e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004148:	2301      	movs	r3, #1
 800414a:	61fb      	str	r3, [r7, #28]
 800414c:	e015      	b.n	800417a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	429a      	cmp	r2, r3
 8004156:	d20b      	bcs.n	8004170 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	1ad2      	subs	r2, r2, r3
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7ff ff9b 	bl	80040a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800416a:	2300      	movs	r3, #0
 800416c:	61fb      	str	r3, [r7, #28]
 800416e:	e004      	b.n	800417a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	2200      	movs	r2, #0
 8004174:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004176:	2301      	movs	r3, #1
 8004178:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800417a:	f000 fe73 	bl	8004e64 <vPortExitCritical>

	return xReturn;
 800417e:	69fb      	ldr	r3, [r7, #28]
}
 8004180:	4618      	mov	r0, r3
 8004182:	3720      	adds	r7, #32
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	20000c28 	.word	0x20000c28
 800418c:	20000c3c 	.word	0x20000c3c

08004190 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004190:	b480      	push	{r7}
 8004192:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004194:	4b03      	ldr	r3, [pc, #12]	; (80041a4 <vTaskMissedYield+0x14>)
 8004196:	2201      	movs	r2, #1
 8004198:	601a      	str	r2, [r3, #0]
}
 800419a:	bf00      	nop
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr
 80041a4:	20000c38 	.word	0x20000c38

080041a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80041b0:	f000 f852 	bl	8004258 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80041b4:	4b06      	ldr	r3, [pc, #24]	; (80041d0 <prvIdleTask+0x28>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d9f9      	bls.n	80041b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80041bc:	4b05      	ldr	r3, [pc, #20]	; (80041d4 <prvIdleTask+0x2c>)
 80041be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041c2:	601a      	str	r2, [r3, #0]
 80041c4:	f3bf 8f4f 	dsb	sy
 80041c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80041cc:	e7f0      	b.n	80041b0 <prvIdleTask+0x8>
 80041ce:	bf00      	nop
 80041d0:	20000754 	.word	0x20000754
 80041d4:	e000ed04 	.word	0xe000ed04

080041d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041de:	2300      	movs	r3, #0
 80041e0:	607b      	str	r3, [r7, #4]
 80041e2:	e00c      	b.n	80041fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	4613      	mov	r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	4413      	add	r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	4a12      	ldr	r2, [pc, #72]	; (8004238 <prvInitialiseTaskLists+0x60>)
 80041f0:	4413      	add	r3, r2
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7fe fca6 	bl	8002b44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	3301      	adds	r3, #1
 80041fc:	607b      	str	r3, [r7, #4]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b37      	cmp	r3, #55	; 0x37
 8004202:	d9ef      	bls.n	80041e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004204:	480d      	ldr	r0, [pc, #52]	; (800423c <prvInitialiseTaskLists+0x64>)
 8004206:	f7fe fc9d 	bl	8002b44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800420a:	480d      	ldr	r0, [pc, #52]	; (8004240 <prvInitialiseTaskLists+0x68>)
 800420c:	f7fe fc9a 	bl	8002b44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004210:	480c      	ldr	r0, [pc, #48]	; (8004244 <prvInitialiseTaskLists+0x6c>)
 8004212:	f7fe fc97 	bl	8002b44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004216:	480c      	ldr	r0, [pc, #48]	; (8004248 <prvInitialiseTaskLists+0x70>)
 8004218:	f7fe fc94 	bl	8002b44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800421c:	480b      	ldr	r0, [pc, #44]	; (800424c <prvInitialiseTaskLists+0x74>)
 800421e:	f7fe fc91 	bl	8002b44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004222:	4b0b      	ldr	r3, [pc, #44]	; (8004250 <prvInitialiseTaskLists+0x78>)
 8004224:	4a05      	ldr	r2, [pc, #20]	; (800423c <prvInitialiseTaskLists+0x64>)
 8004226:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004228:	4b0a      	ldr	r3, [pc, #40]	; (8004254 <prvInitialiseTaskLists+0x7c>)
 800422a:	4a05      	ldr	r2, [pc, #20]	; (8004240 <prvInitialiseTaskLists+0x68>)
 800422c:	601a      	str	r2, [r3, #0]
}
 800422e:	bf00      	nop
 8004230:	3708      	adds	r7, #8
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	20000754 	.word	0x20000754
 800423c:	20000bb4 	.word	0x20000bb4
 8004240:	20000bc8 	.word	0x20000bc8
 8004244:	20000be4 	.word	0x20000be4
 8004248:	20000bf8 	.word	0x20000bf8
 800424c:	20000c10 	.word	0x20000c10
 8004250:	20000bdc 	.word	0x20000bdc
 8004254:	20000be0 	.word	0x20000be0

08004258 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800425e:	e019      	b.n	8004294 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004260:	f000 fdd0 	bl	8004e04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004264:	4b10      	ldr	r3, [pc, #64]	; (80042a8 <prvCheckTasksWaitingTermination+0x50>)
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	3304      	adds	r3, #4
 8004270:	4618      	mov	r0, r3
 8004272:	f7fe fcf1 	bl	8002c58 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004276:	4b0d      	ldr	r3, [pc, #52]	; (80042ac <prvCheckTasksWaitingTermination+0x54>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	3b01      	subs	r3, #1
 800427c:	4a0b      	ldr	r2, [pc, #44]	; (80042ac <prvCheckTasksWaitingTermination+0x54>)
 800427e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004280:	4b0b      	ldr	r3, [pc, #44]	; (80042b0 <prvCheckTasksWaitingTermination+0x58>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	3b01      	subs	r3, #1
 8004286:	4a0a      	ldr	r2, [pc, #40]	; (80042b0 <prvCheckTasksWaitingTermination+0x58>)
 8004288:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800428a:	f000 fdeb 	bl	8004e64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 f810 	bl	80042b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004294:	4b06      	ldr	r3, [pc, #24]	; (80042b0 <prvCheckTasksWaitingTermination+0x58>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1e1      	bne.n	8004260 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800429c:	bf00      	nop
 800429e:	bf00      	nop
 80042a0:	3708      	adds	r7, #8
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	20000bf8 	.word	0x20000bf8
 80042ac:	20000c24 	.word	0x20000c24
 80042b0:	20000c0c 	.word	0x20000c0c

080042b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d108      	bne.n	80042d8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ca:	4618      	mov	r0, r3
 80042cc:	f000 ff88 	bl	80051e0 <vPortFree>
				vPortFree( pxTCB );
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 ff85 	bl	80051e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80042d6:	e018      	b.n	800430a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d103      	bne.n	80042ea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 ff7c 	bl	80051e0 <vPortFree>
	}
 80042e8:	e00f      	b.n	800430a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d00a      	beq.n	800430a <prvDeleteTCB+0x56>
	__asm volatile
 80042f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f8:	f383 8811 	msr	BASEPRI, r3
 80042fc:	f3bf 8f6f 	isb	sy
 8004300:	f3bf 8f4f 	dsb	sy
 8004304:	60fb      	str	r3, [r7, #12]
}
 8004306:	bf00      	nop
 8004308:	e7fe      	b.n	8004308 <prvDeleteTCB+0x54>
	}
 800430a:	bf00      	nop
 800430c:	3710      	adds	r7, #16
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
	...

08004314 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800431a:	4b0c      	ldr	r3, [pc, #48]	; (800434c <prvResetNextTaskUnblockTime+0x38>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d104      	bne.n	800432e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004324:	4b0a      	ldr	r3, [pc, #40]	; (8004350 <prvResetNextTaskUnblockTime+0x3c>)
 8004326:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800432a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800432c:	e008      	b.n	8004340 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800432e:	4b07      	ldr	r3, [pc, #28]	; (800434c <prvResetNextTaskUnblockTime+0x38>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	4a04      	ldr	r2, [pc, #16]	; (8004350 <prvResetNextTaskUnblockTime+0x3c>)
 800433e:	6013      	str	r3, [r2, #0]
}
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr
 800434c:	20000bdc 	.word	0x20000bdc
 8004350:	20000c44 	.word	0x20000c44

08004354 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800435a:	4b0b      	ldr	r3, [pc, #44]	; (8004388 <xTaskGetSchedulerState+0x34>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d102      	bne.n	8004368 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004362:	2301      	movs	r3, #1
 8004364:	607b      	str	r3, [r7, #4]
 8004366:	e008      	b.n	800437a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004368:	4b08      	ldr	r3, [pc, #32]	; (800438c <xTaskGetSchedulerState+0x38>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d102      	bne.n	8004376 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004370:	2302      	movs	r3, #2
 8004372:	607b      	str	r3, [r7, #4]
 8004374:	e001      	b.n	800437a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004376:	2300      	movs	r3, #0
 8004378:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800437a:	687b      	ldr	r3, [r7, #4]
	}
 800437c:	4618      	mov	r0, r3
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr
 8004388:	20000c30 	.word	0x20000c30
 800438c:	20000c4c 	.word	0x20000c4c

08004390 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800439c:	2300      	movs	r3, #0
 800439e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d056      	beq.n	8004454 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80043a6:	4b2e      	ldr	r3, [pc, #184]	; (8004460 <xTaskPriorityDisinherit+0xd0>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d00a      	beq.n	80043c6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80043b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b4:	f383 8811 	msr	BASEPRI, r3
 80043b8:	f3bf 8f6f 	isb	sy
 80043bc:	f3bf 8f4f 	dsb	sy
 80043c0:	60fb      	str	r3, [r7, #12]
}
 80043c2:	bf00      	nop
 80043c4:	e7fe      	b.n	80043c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d10a      	bne.n	80043e4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80043ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d2:	f383 8811 	msr	BASEPRI, r3
 80043d6:	f3bf 8f6f 	isb	sy
 80043da:	f3bf 8f4f 	dsb	sy
 80043de:	60bb      	str	r3, [r7, #8]
}
 80043e0:	bf00      	nop
 80043e2:	e7fe      	b.n	80043e2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043e8:	1e5a      	subs	r2, r3, #1
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d02c      	beq.n	8004454 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d128      	bne.n	8004454 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	3304      	adds	r3, #4
 8004406:	4618      	mov	r0, r3
 8004408:	f7fe fc26 	bl	8002c58 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004418:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004424:	4b0f      	ldr	r3, [pc, #60]	; (8004464 <xTaskPriorityDisinherit+0xd4>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	429a      	cmp	r2, r3
 800442a:	d903      	bls.n	8004434 <xTaskPriorityDisinherit+0xa4>
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004430:	4a0c      	ldr	r2, [pc, #48]	; (8004464 <xTaskPriorityDisinherit+0xd4>)
 8004432:	6013      	str	r3, [r2, #0]
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004438:	4613      	mov	r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	4413      	add	r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	4a09      	ldr	r2, [pc, #36]	; (8004468 <xTaskPriorityDisinherit+0xd8>)
 8004442:	441a      	add	r2, r3
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	3304      	adds	r3, #4
 8004448:	4619      	mov	r1, r3
 800444a:	4610      	mov	r0, r2
 800444c:	f7fe fba7 	bl	8002b9e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004450:	2301      	movs	r3, #1
 8004452:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004454:	697b      	ldr	r3, [r7, #20]
	}
 8004456:	4618      	mov	r0, r3
 8004458:	3718      	adds	r7, #24
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	20000750 	.word	0x20000750
 8004464:	20000c2c 	.word	0x20000c2c
 8004468:	20000754 	.word	0x20000754

0800446c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004476:	4b21      	ldr	r3, [pc, #132]	; (80044fc <prvAddCurrentTaskToDelayedList+0x90>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800447c:	4b20      	ldr	r3, [pc, #128]	; (8004500 <prvAddCurrentTaskToDelayedList+0x94>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	3304      	adds	r3, #4
 8004482:	4618      	mov	r0, r3
 8004484:	f7fe fbe8 	bl	8002c58 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800448e:	d10a      	bne.n	80044a6 <prvAddCurrentTaskToDelayedList+0x3a>
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d007      	beq.n	80044a6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004496:	4b1a      	ldr	r3, [pc, #104]	; (8004500 <prvAddCurrentTaskToDelayedList+0x94>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	3304      	adds	r3, #4
 800449c:	4619      	mov	r1, r3
 800449e:	4819      	ldr	r0, [pc, #100]	; (8004504 <prvAddCurrentTaskToDelayedList+0x98>)
 80044a0:	f7fe fb7d 	bl	8002b9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80044a4:	e026      	b.n	80044f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4413      	add	r3, r2
 80044ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80044ae:	4b14      	ldr	r3, [pc, #80]	; (8004500 <prvAddCurrentTaskToDelayedList+0x94>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68ba      	ldr	r2, [r7, #8]
 80044b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d209      	bcs.n	80044d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044be:	4b12      	ldr	r3, [pc, #72]	; (8004508 <prvAddCurrentTaskToDelayedList+0x9c>)
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	4b0f      	ldr	r3, [pc, #60]	; (8004500 <prvAddCurrentTaskToDelayedList+0x94>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	3304      	adds	r3, #4
 80044c8:	4619      	mov	r1, r3
 80044ca:	4610      	mov	r0, r2
 80044cc:	f7fe fb8b 	bl	8002be6 <vListInsert>
}
 80044d0:	e010      	b.n	80044f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044d2:	4b0e      	ldr	r3, [pc, #56]	; (800450c <prvAddCurrentTaskToDelayedList+0xa0>)
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	4b0a      	ldr	r3, [pc, #40]	; (8004500 <prvAddCurrentTaskToDelayedList+0x94>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	3304      	adds	r3, #4
 80044dc:	4619      	mov	r1, r3
 80044de:	4610      	mov	r0, r2
 80044e0:	f7fe fb81 	bl	8002be6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80044e4:	4b0a      	ldr	r3, [pc, #40]	; (8004510 <prvAddCurrentTaskToDelayedList+0xa4>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d202      	bcs.n	80044f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80044ee:	4a08      	ldr	r2, [pc, #32]	; (8004510 <prvAddCurrentTaskToDelayedList+0xa4>)
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	6013      	str	r3, [r2, #0]
}
 80044f4:	bf00      	nop
 80044f6:	3710      	adds	r7, #16
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	20000c28 	.word	0x20000c28
 8004500:	20000750 	.word	0x20000750
 8004504:	20000c10 	.word	0x20000c10
 8004508:	20000be0 	.word	0x20000be0
 800450c:	20000bdc 	.word	0x20000bdc
 8004510:	20000c44 	.word	0x20000c44

08004514 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b08a      	sub	sp, #40	; 0x28
 8004518:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800451a:	2300      	movs	r3, #0
 800451c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800451e:	f000 fb07 	bl	8004b30 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004522:	4b1c      	ldr	r3, [pc, #112]	; (8004594 <xTimerCreateTimerTask+0x80>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d021      	beq.n	800456e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800452a:	2300      	movs	r3, #0
 800452c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800452e:	2300      	movs	r3, #0
 8004530:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004532:	1d3a      	adds	r2, r7, #4
 8004534:	f107 0108 	add.w	r1, r7, #8
 8004538:	f107 030c 	add.w	r3, r7, #12
 800453c:	4618      	mov	r0, r3
 800453e:	f7fe fae7 	bl	8002b10 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004542:	6879      	ldr	r1, [r7, #4]
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	9202      	str	r2, [sp, #8]
 800454a:	9301      	str	r3, [sp, #4]
 800454c:	2302      	movs	r3, #2
 800454e:	9300      	str	r3, [sp, #0]
 8004550:	2300      	movs	r3, #0
 8004552:	460a      	mov	r2, r1
 8004554:	4910      	ldr	r1, [pc, #64]	; (8004598 <xTimerCreateTimerTask+0x84>)
 8004556:	4811      	ldr	r0, [pc, #68]	; (800459c <xTimerCreateTimerTask+0x88>)
 8004558:	f7ff f894 	bl	8003684 <xTaskCreateStatic>
 800455c:	4603      	mov	r3, r0
 800455e:	4a10      	ldr	r2, [pc, #64]	; (80045a0 <xTimerCreateTimerTask+0x8c>)
 8004560:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004562:	4b0f      	ldr	r3, [pc, #60]	; (80045a0 <xTimerCreateTimerTask+0x8c>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800456a:	2301      	movs	r3, #1
 800456c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d10a      	bne.n	800458a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004578:	f383 8811 	msr	BASEPRI, r3
 800457c:	f3bf 8f6f 	isb	sy
 8004580:	f3bf 8f4f 	dsb	sy
 8004584:	613b      	str	r3, [r7, #16]
}
 8004586:	bf00      	nop
 8004588:	e7fe      	b.n	8004588 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800458a:	697b      	ldr	r3, [r7, #20]
}
 800458c:	4618      	mov	r0, r3
 800458e:	3718      	adds	r7, #24
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	20000c80 	.word	0x20000c80
 8004598:	080071b0 	.word	0x080071b0
 800459c:	080046d9 	.word	0x080046d9
 80045a0:	20000c84 	.word	0x20000c84

080045a4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b08a      	sub	sp, #40	; 0x28
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	607a      	str	r2, [r7, #4]
 80045b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80045b2:	2300      	movs	r3, #0
 80045b4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10a      	bne.n	80045d2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80045bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c0:	f383 8811 	msr	BASEPRI, r3
 80045c4:	f3bf 8f6f 	isb	sy
 80045c8:	f3bf 8f4f 	dsb	sy
 80045cc:	623b      	str	r3, [r7, #32]
}
 80045ce:	bf00      	nop
 80045d0:	e7fe      	b.n	80045d0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80045d2:	4b1a      	ldr	r3, [pc, #104]	; (800463c <xTimerGenericCommand+0x98>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d02a      	beq.n	8004630 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	2b05      	cmp	r3, #5
 80045ea:	dc18      	bgt.n	800461e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80045ec:	f7ff feb2 	bl	8004354 <xTaskGetSchedulerState>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d109      	bne.n	800460a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80045f6:	4b11      	ldr	r3, [pc, #68]	; (800463c <xTimerGenericCommand+0x98>)
 80045f8:	6818      	ldr	r0, [r3, #0]
 80045fa:	f107 0110 	add.w	r1, r7, #16
 80045fe:	2300      	movs	r3, #0
 8004600:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004602:	f7fe fc57 	bl	8002eb4 <xQueueGenericSend>
 8004606:	6278      	str	r0, [r7, #36]	; 0x24
 8004608:	e012      	b.n	8004630 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800460a:	4b0c      	ldr	r3, [pc, #48]	; (800463c <xTimerGenericCommand+0x98>)
 800460c:	6818      	ldr	r0, [r3, #0]
 800460e:	f107 0110 	add.w	r1, r7, #16
 8004612:	2300      	movs	r3, #0
 8004614:	2200      	movs	r2, #0
 8004616:	f7fe fc4d 	bl	8002eb4 <xQueueGenericSend>
 800461a:	6278      	str	r0, [r7, #36]	; 0x24
 800461c:	e008      	b.n	8004630 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800461e:	4b07      	ldr	r3, [pc, #28]	; (800463c <xTimerGenericCommand+0x98>)
 8004620:	6818      	ldr	r0, [r3, #0]
 8004622:	f107 0110 	add.w	r1, r7, #16
 8004626:	2300      	movs	r3, #0
 8004628:	683a      	ldr	r2, [r7, #0]
 800462a:	f7fe fd41 	bl	80030b0 <xQueueGenericSendFromISR>
 800462e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004632:	4618      	mov	r0, r3
 8004634:	3728      	adds	r7, #40	; 0x28
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	20000c80 	.word	0x20000c80

08004640 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b088      	sub	sp, #32
 8004644:	af02      	add	r7, sp, #8
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800464a:	4b22      	ldr	r3, [pc, #136]	; (80046d4 <prvProcessExpiredTimer+0x94>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	3304      	adds	r3, #4
 8004658:	4618      	mov	r0, r3
 800465a:	f7fe fafd 	bl	8002c58 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004664:	f003 0304 	and.w	r3, r3, #4
 8004668:	2b00      	cmp	r3, #0
 800466a:	d022      	beq.n	80046b2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	699a      	ldr	r2, [r3, #24]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	18d1      	adds	r1, r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	683a      	ldr	r2, [r7, #0]
 8004678:	6978      	ldr	r0, [r7, #20]
 800467a:	f000 f8d1 	bl	8004820 <prvInsertTimerInActiveList>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d01f      	beq.n	80046c4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004684:	2300      	movs	r3, #0
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	2300      	movs	r3, #0
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	2100      	movs	r1, #0
 800468e:	6978      	ldr	r0, [r7, #20]
 8004690:	f7ff ff88 	bl	80045a4 <xTimerGenericCommand>
 8004694:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d113      	bne.n	80046c4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800469c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a0:	f383 8811 	msr	BASEPRI, r3
 80046a4:	f3bf 8f6f 	isb	sy
 80046a8:	f3bf 8f4f 	dsb	sy
 80046ac:	60fb      	str	r3, [r7, #12]
}
 80046ae:	bf00      	nop
 80046b0:	e7fe      	b.n	80046b0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046b8:	f023 0301 	bic.w	r3, r3, #1
 80046bc:	b2da      	uxtb	r2, r3
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	6a1b      	ldr	r3, [r3, #32]
 80046c8:	6978      	ldr	r0, [r7, #20]
 80046ca:	4798      	blx	r3
}
 80046cc:	bf00      	nop
 80046ce:	3718      	adds	r7, #24
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	20000c78 	.word	0x20000c78

080046d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80046e0:	f107 0308 	add.w	r3, r7, #8
 80046e4:	4618      	mov	r0, r3
 80046e6:	f000 f857 	bl	8004798 <prvGetNextExpireTime>
 80046ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	4619      	mov	r1, r3
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f000 f803 	bl	80046fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80046f6:	f000 f8d5 	bl	80048a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80046fa:	e7f1      	b.n	80046e0 <prvTimerTask+0x8>

080046fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004706:	f7ff fa43 	bl	8003b90 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800470a:	f107 0308 	add.w	r3, r7, #8
 800470e:	4618      	mov	r0, r3
 8004710:	f000 f866 	bl	80047e0 <prvSampleTimeNow>
 8004714:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d130      	bne.n	800477e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10a      	bne.n	8004738 <prvProcessTimerOrBlockTask+0x3c>
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	429a      	cmp	r2, r3
 8004728:	d806      	bhi.n	8004738 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800472a:	f7ff fa3f 	bl	8003bac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800472e:	68f9      	ldr	r1, [r7, #12]
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f7ff ff85 	bl	8004640 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004736:	e024      	b.n	8004782 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d008      	beq.n	8004750 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800473e:	4b13      	ldr	r3, [pc, #76]	; (800478c <prvProcessTimerOrBlockTask+0x90>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d101      	bne.n	800474c <prvProcessTimerOrBlockTask+0x50>
 8004748:	2301      	movs	r3, #1
 800474a:	e000      	b.n	800474e <prvProcessTimerOrBlockTask+0x52>
 800474c:	2300      	movs	r3, #0
 800474e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004750:	4b0f      	ldr	r3, [pc, #60]	; (8004790 <prvProcessTimerOrBlockTask+0x94>)
 8004752:	6818      	ldr	r0, [r3, #0]
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	683a      	ldr	r2, [r7, #0]
 800475c:	4619      	mov	r1, r3
 800475e:	f7fe ff5d 	bl	800361c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004762:	f7ff fa23 	bl	8003bac <xTaskResumeAll>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10a      	bne.n	8004782 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800476c:	4b09      	ldr	r3, [pc, #36]	; (8004794 <prvProcessTimerOrBlockTask+0x98>)
 800476e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004772:	601a      	str	r2, [r3, #0]
 8004774:	f3bf 8f4f 	dsb	sy
 8004778:	f3bf 8f6f 	isb	sy
}
 800477c:	e001      	b.n	8004782 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800477e:	f7ff fa15 	bl	8003bac <xTaskResumeAll>
}
 8004782:	bf00      	nop
 8004784:	3710      	adds	r7, #16
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	20000c7c 	.word	0x20000c7c
 8004790:	20000c80 	.word	0x20000c80
 8004794:	e000ed04 	.word	0xe000ed04

08004798 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80047a0:	4b0e      	ldr	r3, [pc, #56]	; (80047dc <prvGetNextExpireTime+0x44>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <prvGetNextExpireTime+0x16>
 80047aa:	2201      	movs	r2, #1
 80047ac:	e000      	b.n	80047b0 <prvGetNextExpireTime+0x18>
 80047ae:	2200      	movs	r2, #0
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d105      	bne.n	80047c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80047bc:	4b07      	ldr	r3, [pc, #28]	; (80047dc <prvGetNextExpireTime+0x44>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	60fb      	str	r3, [r7, #12]
 80047c6:	e001      	b.n	80047cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80047c8:	2300      	movs	r3, #0
 80047ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80047cc:	68fb      	ldr	r3, [r7, #12]
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3714      	adds	r7, #20
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	20000c78 	.word	0x20000c78

080047e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80047e8:	f7ff fa7e 	bl	8003ce8 <xTaskGetTickCount>
 80047ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80047ee:	4b0b      	ldr	r3, [pc, #44]	; (800481c <prvSampleTimeNow+0x3c>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d205      	bcs.n	8004804 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80047f8:	f000 f936 	bl	8004a68 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	601a      	str	r2, [r3, #0]
 8004802:	e002      	b.n	800480a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800480a:	4a04      	ldr	r2, [pc, #16]	; (800481c <prvSampleTimeNow+0x3c>)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004810:	68fb      	ldr	r3, [r7, #12]
}
 8004812:	4618      	mov	r0, r3
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	20000c88 	.word	0x20000c88

08004820 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b086      	sub	sp, #24
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
 800482c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800482e:	2300      	movs	r3, #0
 8004830:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	68ba      	ldr	r2, [r7, #8]
 8004836:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	429a      	cmp	r2, r3
 8004844:	d812      	bhi.n	800486c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	1ad2      	subs	r2, r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	429a      	cmp	r2, r3
 8004852:	d302      	bcc.n	800485a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004854:	2301      	movs	r3, #1
 8004856:	617b      	str	r3, [r7, #20]
 8004858:	e01b      	b.n	8004892 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800485a:	4b10      	ldr	r3, [pc, #64]	; (800489c <prvInsertTimerInActiveList+0x7c>)
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	3304      	adds	r3, #4
 8004862:	4619      	mov	r1, r3
 8004864:	4610      	mov	r0, r2
 8004866:	f7fe f9be 	bl	8002be6 <vListInsert>
 800486a:	e012      	b.n	8004892 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	429a      	cmp	r2, r3
 8004872:	d206      	bcs.n	8004882 <prvInsertTimerInActiveList+0x62>
 8004874:	68ba      	ldr	r2, [r7, #8]
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	429a      	cmp	r2, r3
 800487a:	d302      	bcc.n	8004882 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800487c:	2301      	movs	r3, #1
 800487e:	617b      	str	r3, [r7, #20]
 8004880:	e007      	b.n	8004892 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004882:	4b07      	ldr	r3, [pc, #28]	; (80048a0 <prvInsertTimerInActiveList+0x80>)
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	3304      	adds	r3, #4
 800488a:	4619      	mov	r1, r3
 800488c:	4610      	mov	r0, r2
 800488e:	f7fe f9aa 	bl	8002be6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004892:	697b      	ldr	r3, [r7, #20]
}
 8004894:	4618      	mov	r0, r3
 8004896:	3718      	adds	r7, #24
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	20000c7c 	.word	0x20000c7c
 80048a0:	20000c78 	.word	0x20000c78

080048a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b08e      	sub	sp, #56	; 0x38
 80048a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80048aa:	e0ca      	b.n	8004a42 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	da18      	bge.n	80048e4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80048b2:	1d3b      	adds	r3, r7, #4
 80048b4:	3304      	adds	r3, #4
 80048b6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80048b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d10a      	bne.n	80048d4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80048be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c2:	f383 8811 	msr	BASEPRI, r3
 80048c6:	f3bf 8f6f 	isb	sy
 80048ca:	f3bf 8f4f 	dsb	sy
 80048ce:	61fb      	str	r3, [r7, #28]
}
 80048d0:	bf00      	nop
 80048d2:	e7fe      	b.n	80048d2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80048d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048da:	6850      	ldr	r0, [r2, #4]
 80048dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048de:	6892      	ldr	r2, [r2, #8]
 80048e0:	4611      	mov	r1, r2
 80048e2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	f2c0 80aa 	blt.w	8004a40 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80048f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d004      	beq.n	8004902 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fa:	3304      	adds	r3, #4
 80048fc:	4618      	mov	r0, r3
 80048fe:	f7fe f9ab 	bl	8002c58 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004902:	463b      	mov	r3, r7
 8004904:	4618      	mov	r0, r3
 8004906:	f7ff ff6b 	bl	80047e0 <prvSampleTimeNow>
 800490a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b09      	cmp	r3, #9
 8004910:	f200 8097 	bhi.w	8004a42 <prvProcessReceivedCommands+0x19e>
 8004914:	a201      	add	r2, pc, #4	; (adr r2, 800491c <prvProcessReceivedCommands+0x78>)
 8004916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800491a:	bf00      	nop
 800491c:	08004945 	.word	0x08004945
 8004920:	08004945 	.word	0x08004945
 8004924:	08004945 	.word	0x08004945
 8004928:	080049b9 	.word	0x080049b9
 800492c:	080049cd 	.word	0x080049cd
 8004930:	08004a17 	.word	0x08004a17
 8004934:	08004945 	.word	0x08004945
 8004938:	08004945 	.word	0x08004945
 800493c:	080049b9 	.word	0x080049b9
 8004940:	080049cd 	.word	0x080049cd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004946:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800494a:	f043 0301 	orr.w	r3, r3, #1
 800494e:	b2da      	uxtb	r2, r3
 8004950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004952:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	18d1      	adds	r1, r2, r3
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004962:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004964:	f7ff ff5c 	bl	8004820 <prvInsertTimerInActiveList>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d069      	beq.n	8004a42 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800496e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004974:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004978:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800497c:	f003 0304 	and.w	r3, r3, #4
 8004980:	2b00      	cmp	r3, #0
 8004982:	d05e      	beq.n	8004a42 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004984:	68ba      	ldr	r2, [r7, #8]
 8004986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	441a      	add	r2, r3
 800498c:	2300      	movs	r3, #0
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	2300      	movs	r3, #0
 8004992:	2100      	movs	r1, #0
 8004994:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004996:	f7ff fe05 	bl	80045a4 <xTimerGenericCommand>
 800499a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800499c:	6a3b      	ldr	r3, [r7, #32]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d14f      	bne.n	8004a42 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80049a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a6:	f383 8811 	msr	BASEPRI, r3
 80049aa:	f3bf 8f6f 	isb	sy
 80049ae:	f3bf 8f4f 	dsb	sy
 80049b2:	61bb      	str	r3, [r7, #24]
}
 80049b4:	bf00      	nop
 80049b6:	e7fe      	b.n	80049b6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80049b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049be:	f023 0301 	bic.w	r3, r3, #1
 80049c2:	b2da      	uxtb	r2, r3
 80049c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80049ca:	e03a      	b.n	8004a42 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80049cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049d2:	f043 0301 	orr.w	r3, r3, #1
 80049d6:	b2da      	uxtb	r2, r3
 80049d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80049e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d10a      	bne.n	8004a02 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80049ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f0:	f383 8811 	msr	BASEPRI, r3
 80049f4:	f3bf 8f6f 	isb	sy
 80049f8:	f3bf 8f4f 	dsb	sy
 80049fc:	617b      	str	r3, [r7, #20]
}
 80049fe:	bf00      	nop
 8004a00:	e7fe      	b.n	8004a00 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a04:	699a      	ldr	r2, [r3, #24]
 8004a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a08:	18d1      	adds	r1, r2, r3
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a10:	f7ff ff06 	bl	8004820 <prvInsertTimerInActiveList>
					break;
 8004a14:	e015      	b.n	8004a42 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a1c:	f003 0302 	and.w	r3, r3, #2
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d103      	bne.n	8004a2c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004a24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a26:	f000 fbdb 	bl	80051e0 <vPortFree>
 8004a2a:	e00a      	b.n	8004a42 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a32:	f023 0301 	bic.w	r3, r3, #1
 8004a36:	b2da      	uxtb	r2, r3
 8004a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004a3e:	e000      	b.n	8004a42 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004a40:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a42:	4b08      	ldr	r3, [pc, #32]	; (8004a64 <prvProcessReceivedCommands+0x1c0>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	1d39      	adds	r1, r7, #4
 8004a48:	2200      	movs	r2, #0
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7fe fbcc 	bl	80031e8 <xQueueReceive>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	f47f af2a 	bne.w	80048ac <prvProcessReceivedCommands+0x8>
	}
}
 8004a58:	bf00      	nop
 8004a5a:	bf00      	nop
 8004a5c:	3730      	adds	r7, #48	; 0x30
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	20000c80 	.word	0x20000c80

08004a68 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b088      	sub	sp, #32
 8004a6c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a6e:	e048      	b.n	8004b02 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a70:	4b2d      	ldr	r3, [pc, #180]	; (8004b28 <prvSwitchTimerLists+0xc0>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a7a:	4b2b      	ldr	r3, [pc, #172]	; (8004b28 <prvSwitchTimerLists+0xc0>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	3304      	adds	r3, #4
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7fe f8e5 	bl	8002c58 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a9c:	f003 0304 	and.w	r3, r3, #4
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d02e      	beq.n	8004b02 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	4413      	add	r3, r2
 8004aac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d90e      	bls.n	8004ad4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ac2:	4b19      	ldr	r3, [pc, #100]	; (8004b28 <prvSwitchTimerLists+0xc0>)
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	3304      	adds	r3, #4
 8004aca:	4619      	mov	r1, r3
 8004acc:	4610      	mov	r0, r2
 8004ace:	f7fe f88a 	bl	8002be6 <vListInsert>
 8004ad2:	e016      	b.n	8004b02 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	9300      	str	r3, [sp, #0]
 8004ad8:	2300      	movs	r3, #0
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	2100      	movs	r1, #0
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	f7ff fd60 	bl	80045a4 <xTimerGenericCommand>
 8004ae4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d10a      	bne.n	8004b02 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af0:	f383 8811 	msr	BASEPRI, r3
 8004af4:	f3bf 8f6f 	isb	sy
 8004af8:	f3bf 8f4f 	dsb	sy
 8004afc:	603b      	str	r3, [r7, #0]
}
 8004afe:	bf00      	nop
 8004b00:	e7fe      	b.n	8004b00 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b02:	4b09      	ldr	r3, [pc, #36]	; (8004b28 <prvSwitchTimerLists+0xc0>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1b1      	bne.n	8004a70 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004b0c:	4b06      	ldr	r3, [pc, #24]	; (8004b28 <prvSwitchTimerLists+0xc0>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004b12:	4b06      	ldr	r3, [pc, #24]	; (8004b2c <prvSwitchTimerLists+0xc4>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a04      	ldr	r2, [pc, #16]	; (8004b28 <prvSwitchTimerLists+0xc0>)
 8004b18:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004b1a:	4a04      	ldr	r2, [pc, #16]	; (8004b2c <prvSwitchTimerLists+0xc4>)
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	6013      	str	r3, [r2, #0]
}
 8004b20:	bf00      	nop
 8004b22:	3718      	adds	r7, #24
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	20000c78 	.word	0x20000c78
 8004b2c:	20000c7c 	.word	0x20000c7c

08004b30 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004b36:	f000 f965 	bl	8004e04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004b3a:	4b15      	ldr	r3, [pc, #84]	; (8004b90 <prvCheckForValidListAndQueue+0x60>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d120      	bne.n	8004b84 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004b42:	4814      	ldr	r0, [pc, #80]	; (8004b94 <prvCheckForValidListAndQueue+0x64>)
 8004b44:	f7fd fffe 	bl	8002b44 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004b48:	4813      	ldr	r0, [pc, #76]	; (8004b98 <prvCheckForValidListAndQueue+0x68>)
 8004b4a:	f7fd fffb 	bl	8002b44 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004b4e:	4b13      	ldr	r3, [pc, #76]	; (8004b9c <prvCheckForValidListAndQueue+0x6c>)
 8004b50:	4a10      	ldr	r2, [pc, #64]	; (8004b94 <prvCheckForValidListAndQueue+0x64>)
 8004b52:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004b54:	4b12      	ldr	r3, [pc, #72]	; (8004ba0 <prvCheckForValidListAndQueue+0x70>)
 8004b56:	4a10      	ldr	r2, [pc, #64]	; (8004b98 <prvCheckForValidListAndQueue+0x68>)
 8004b58:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	9300      	str	r3, [sp, #0]
 8004b5e:	4b11      	ldr	r3, [pc, #68]	; (8004ba4 <prvCheckForValidListAndQueue+0x74>)
 8004b60:	4a11      	ldr	r2, [pc, #68]	; (8004ba8 <prvCheckForValidListAndQueue+0x78>)
 8004b62:	2110      	movs	r1, #16
 8004b64:	200a      	movs	r0, #10
 8004b66:	f7fe f909 	bl	8002d7c <xQueueGenericCreateStatic>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	4a08      	ldr	r2, [pc, #32]	; (8004b90 <prvCheckForValidListAndQueue+0x60>)
 8004b6e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004b70:	4b07      	ldr	r3, [pc, #28]	; (8004b90 <prvCheckForValidListAndQueue+0x60>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d005      	beq.n	8004b84 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004b78:	4b05      	ldr	r3, [pc, #20]	; (8004b90 <prvCheckForValidListAndQueue+0x60>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	490b      	ldr	r1, [pc, #44]	; (8004bac <prvCheckForValidListAndQueue+0x7c>)
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7fe fd22 	bl	80035c8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b84:	f000 f96e 	bl	8004e64 <vPortExitCritical>
}
 8004b88:	bf00      	nop
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	20000c80 	.word	0x20000c80
 8004b94:	20000c50 	.word	0x20000c50
 8004b98:	20000c64 	.word	0x20000c64
 8004b9c:	20000c78 	.word	0x20000c78
 8004ba0:	20000c7c 	.word	0x20000c7c
 8004ba4:	20000d2c 	.word	0x20000d2c
 8004ba8:	20000c8c 	.word	0x20000c8c
 8004bac:	080071b8 	.word	0x080071b8

08004bb0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	3b04      	subs	r3, #4
 8004bc0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004bc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	3b04      	subs	r3, #4
 8004bce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	f023 0201 	bic.w	r2, r3, #1
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	3b04      	subs	r3, #4
 8004bde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004be0:	4a0c      	ldr	r2, [pc, #48]	; (8004c14 <pxPortInitialiseStack+0x64>)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	3b14      	subs	r3, #20
 8004bea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	3b04      	subs	r3, #4
 8004bf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f06f 0202 	mvn.w	r2, #2
 8004bfe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	3b20      	subs	r3, #32
 8004c04:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004c06:	68fb      	ldr	r3, [r7, #12]
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3714      	adds	r7, #20
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr
 8004c14:	08004c19 	.word	0x08004c19

08004c18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004c22:	4b12      	ldr	r3, [pc, #72]	; (8004c6c <prvTaskExitError+0x54>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c2a:	d00a      	beq.n	8004c42 <prvTaskExitError+0x2a>
	__asm volatile
 8004c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c30:	f383 8811 	msr	BASEPRI, r3
 8004c34:	f3bf 8f6f 	isb	sy
 8004c38:	f3bf 8f4f 	dsb	sy
 8004c3c:	60fb      	str	r3, [r7, #12]
}
 8004c3e:	bf00      	nop
 8004c40:	e7fe      	b.n	8004c40 <prvTaskExitError+0x28>
	__asm volatile
 8004c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c46:	f383 8811 	msr	BASEPRI, r3
 8004c4a:	f3bf 8f6f 	isb	sy
 8004c4e:	f3bf 8f4f 	dsb	sy
 8004c52:	60bb      	str	r3, [r7, #8]
}
 8004c54:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004c56:	bf00      	nop
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d0fc      	beq.n	8004c58 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004c5e:	bf00      	nop
 8004c60:	bf00      	nop
 8004c62:	3714      	adds	r7, #20
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr
 8004c6c:	2000000c 	.word	0x2000000c

08004c70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004c70:	4b07      	ldr	r3, [pc, #28]	; (8004c90 <pxCurrentTCBConst2>)
 8004c72:	6819      	ldr	r1, [r3, #0]
 8004c74:	6808      	ldr	r0, [r1, #0]
 8004c76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c7a:	f380 8809 	msr	PSP, r0
 8004c7e:	f3bf 8f6f 	isb	sy
 8004c82:	f04f 0000 	mov.w	r0, #0
 8004c86:	f380 8811 	msr	BASEPRI, r0
 8004c8a:	4770      	bx	lr
 8004c8c:	f3af 8000 	nop.w

08004c90 <pxCurrentTCBConst2>:
 8004c90:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004c94:	bf00      	nop
 8004c96:	bf00      	nop

08004c98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004c98:	4808      	ldr	r0, [pc, #32]	; (8004cbc <prvPortStartFirstTask+0x24>)
 8004c9a:	6800      	ldr	r0, [r0, #0]
 8004c9c:	6800      	ldr	r0, [r0, #0]
 8004c9e:	f380 8808 	msr	MSP, r0
 8004ca2:	f04f 0000 	mov.w	r0, #0
 8004ca6:	f380 8814 	msr	CONTROL, r0
 8004caa:	b662      	cpsie	i
 8004cac:	b661      	cpsie	f
 8004cae:	f3bf 8f4f 	dsb	sy
 8004cb2:	f3bf 8f6f 	isb	sy
 8004cb6:	df00      	svc	0
 8004cb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004cba:	bf00      	nop
 8004cbc:	e000ed08 	.word	0xe000ed08

08004cc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b086      	sub	sp, #24
 8004cc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004cc6:	4b46      	ldr	r3, [pc, #280]	; (8004de0 <xPortStartScheduler+0x120>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a46      	ldr	r2, [pc, #280]	; (8004de4 <xPortStartScheduler+0x124>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d10a      	bne.n	8004ce6 <xPortStartScheduler+0x26>
	__asm volatile
 8004cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd4:	f383 8811 	msr	BASEPRI, r3
 8004cd8:	f3bf 8f6f 	isb	sy
 8004cdc:	f3bf 8f4f 	dsb	sy
 8004ce0:	613b      	str	r3, [r7, #16]
}
 8004ce2:	bf00      	nop
 8004ce4:	e7fe      	b.n	8004ce4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004ce6:	4b3e      	ldr	r3, [pc, #248]	; (8004de0 <xPortStartScheduler+0x120>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a3f      	ldr	r2, [pc, #252]	; (8004de8 <xPortStartScheduler+0x128>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d10a      	bne.n	8004d06 <xPortStartScheduler+0x46>
	__asm volatile
 8004cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf4:	f383 8811 	msr	BASEPRI, r3
 8004cf8:	f3bf 8f6f 	isb	sy
 8004cfc:	f3bf 8f4f 	dsb	sy
 8004d00:	60fb      	str	r3, [r7, #12]
}
 8004d02:	bf00      	nop
 8004d04:	e7fe      	b.n	8004d04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004d06:	4b39      	ldr	r3, [pc, #228]	; (8004dec <xPortStartScheduler+0x12c>)
 8004d08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	22ff      	movs	r2, #255	; 0xff
 8004d16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004d20:	78fb      	ldrb	r3, [r7, #3]
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004d28:	b2da      	uxtb	r2, r3
 8004d2a:	4b31      	ldr	r3, [pc, #196]	; (8004df0 <xPortStartScheduler+0x130>)
 8004d2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004d2e:	4b31      	ldr	r3, [pc, #196]	; (8004df4 <xPortStartScheduler+0x134>)
 8004d30:	2207      	movs	r2, #7
 8004d32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d34:	e009      	b.n	8004d4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004d36:	4b2f      	ldr	r3, [pc, #188]	; (8004df4 <xPortStartScheduler+0x134>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	4a2d      	ldr	r2, [pc, #180]	; (8004df4 <xPortStartScheduler+0x134>)
 8004d3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004d40:	78fb      	ldrb	r3, [r7, #3]
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	005b      	lsls	r3, r3, #1
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d4a:	78fb      	ldrb	r3, [r7, #3]
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d52:	2b80      	cmp	r3, #128	; 0x80
 8004d54:	d0ef      	beq.n	8004d36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004d56:	4b27      	ldr	r3, [pc, #156]	; (8004df4 <xPortStartScheduler+0x134>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f1c3 0307 	rsb	r3, r3, #7
 8004d5e:	2b04      	cmp	r3, #4
 8004d60:	d00a      	beq.n	8004d78 <xPortStartScheduler+0xb8>
	__asm volatile
 8004d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d66:	f383 8811 	msr	BASEPRI, r3
 8004d6a:	f3bf 8f6f 	isb	sy
 8004d6e:	f3bf 8f4f 	dsb	sy
 8004d72:	60bb      	str	r3, [r7, #8]
}
 8004d74:	bf00      	nop
 8004d76:	e7fe      	b.n	8004d76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d78:	4b1e      	ldr	r3, [pc, #120]	; (8004df4 <xPortStartScheduler+0x134>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	021b      	lsls	r3, r3, #8
 8004d7e:	4a1d      	ldr	r2, [pc, #116]	; (8004df4 <xPortStartScheduler+0x134>)
 8004d80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d82:	4b1c      	ldr	r3, [pc, #112]	; (8004df4 <xPortStartScheduler+0x134>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d8a:	4a1a      	ldr	r2, [pc, #104]	; (8004df4 <xPortStartScheduler+0x134>)
 8004d8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	b2da      	uxtb	r2, r3
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004d96:	4b18      	ldr	r3, [pc, #96]	; (8004df8 <xPortStartScheduler+0x138>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a17      	ldr	r2, [pc, #92]	; (8004df8 <xPortStartScheduler+0x138>)
 8004d9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004da0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004da2:	4b15      	ldr	r3, [pc, #84]	; (8004df8 <xPortStartScheduler+0x138>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a14      	ldr	r2, [pc, #80]	; (8004df8 <xPortStartScheduler+0x138>)
 8004da8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004dac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004dae:	f000 f8dd 	bl	8004f6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004db2:	4b12      	ldr	r3, [pc, #72]	; (8004dfc <xPortStartScheduler+0x13c>)
 8004db4:	2200      	movs	r2, #0
 8004db6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004db8:	f000 f8fc 	bl	8004fb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004dbc:	4b10      	ldr	r3, [pc, #64]	; (8004e00 <xPortStartScheduler+0x140>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a0f      	ldr	r2, [pc, #60]	; (8004e00 <xPortStartScheduler+0x140>)
 8004dc2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004dc6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004dc8:	f7ff ff66 	bl	8004c98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004dcc:	f7ff f856 	bl	8003e7c <vTaskSwitchContext>
	prvTaskExitError();
 8004dd0:	f7ff ff22 	bl	8004c18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3718      	adds	r7, #24
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	e000ed00 	.word	0xe000ed00
 8004de4:	410fc271 	.word	0x410fc271
 8004de8:	410fc270 	.word	0x410fc270
 8004dec:	e000e400 	.word	0xe000e400
 8004df0:	20000d7c 	.word	0x20000d7c
 8004df4:	20000d80 	.word	0x20000d80
 8004df8:	e000ed20 	.word	0xe000ed20
 8004dfc:	2000000c 	.word	0x2000000c
 8004e00:	e000ef34 	.word	0xe000ef34

08004e04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
	__asm volatile
 8004e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e0e:	f383 8811 	msr	BASEPRI, r3
 8004e12:	f3bf 8f6f 	isb	sy
 8004e16:	f3bf 8f4f 	dsb	sy
 8004e1a:	607b      	str	r3, [r7, #4]
}
 8004e1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004e1e:	4b0f      	ldr	r3, [pc, #60]	; (8004e5c <vPortEnterCritical+0x58>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	3301      	adds	r3, #1
 8004e24:	4a0d      	ldr	r2, [pc, #52]	; (8004e5c <vPortEnterCritical+0x58>)
 8004e26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004e28:	4b0c      	ldr	r3, [pc, #48]	; (8004e5c <vPortEnterCritical+0x58>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d10f      	bne.n	8004e50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004e30:	4b0b      	ldr	r3, [pc, #44]	; (8004e60 <vPortEnterCritical+0x5c>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00a      	beq.n	8004e50 <vPortEnterCritical+0x4c>
	__asm volatile
 8004e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3e:	f383 8811 	msr	BASEPRI, r3
 8004e42:	f3bf 8f6f 	isb	sy
 8004e46:	f3bf 8f4f 	dsb	sy
 8004e4a:	603b      	str	r3, [r7, #0]
}
 8004e4c:	bf00      	nop
 8004e4e:	e7fe      	b.n	8004e4e <vPortEnterCritical+0x4a>
	}
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr
 8004e5c:	2000000c 	.word	0x2000000c
 8004e60:	e000ed04 	.word	0xe000ed04

08004e64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004e6a:	4b12      	ldr	r3, [pc, #72]	; (8004eb4 <vPortExitCritical+0x50>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d10a      	bne.n	8004e88 <vPortExitCritical+0x24>
	__asm volatile
 8004e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e76:	f383 8811 	msr	BASEPRI, r3
 8004e7a:	f3bf 8f6f 	isb	sy
 8004e7e:	f3bf 8f4f 	dsb	sy
 8004e82:	607b      	str	r3, [r7, #4]
}
 8004e84:	bf00      	nop
 8004e86:	e7fe      	b.n	8004e86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004e88:	4b0a      	ldr	r3, [pc, #40]	; (8004eb4 <vPortExitCritical+0x50>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	4a09      	ldr	r2, [pc, #36]	; (8004eb4 <vPortExitCritical+0x50>)
 8004e90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004e92:	4b08      	ldr	r3, [pc, #32]	; (8004eb4 <vPortExitCritical+0x50>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d105      	bne.n	8004ea6 <vPortExitCritical+0x42>
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	f383 8811 	msr	BASEPRI, r3
}
 8004ea4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004ea6:	bf00      	nop
 8004ea8:	370c      	adds	r7, #12
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	2000000c 	.word	0x2000000c
	...

08004ec0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ec0:	f3ef 8009 	mrs	r0, PSP
 8004ec4:	f3bf 8f6f 	isb	sy
 8004ec8:	4b15      	ldr	r3, [pc, #84]	; (8004f20 <pxCurrentTCBConst>)
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	f01e 0f10 	tst.w	lr, #16
 8004ed0:	bf08      	it	eq
 8004ed2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ed6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eda:	6010      	str	r0, [r2, #0]
 8004edc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004ee0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004ee4:	f380 8811 	msr	BASEPRI, r0
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	f3bf 8f6f 	isb	sy
 8004ef0:	f7fe ffc4 	bl	8003e7c <vTaskSwitchContext>
 8004ef4:	f04f 0000 	mov.w	r0, #0
 8004ef8:	f380 8811 	msr	BASEPRI, r0
 8004efc:	bc09      	pop	{r0, r3}
 8004efe:	6819      	ldr	r1, [r3, #0]
 8004f00:	6808      	ldr	r0, [r1, #0]
 8004f02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f06:	f01e 0f10 	tst.w	lr, #16
 8004f0a:	bf08      	it	eq
 8004f0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004f10:	f380 8809 	msr	PSP, r0
 8004f14:	f3bf 8f6f 	isb	sy
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	f3af 8000 	nop.w

08004f20 <pxCurrentTCBConst>:
 8004f20:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004f24:	bf00      	nop
 8004f26:	bf00      	nop

08004f28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
	__asm volatile
 8004f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f32:	f383 8811 	msr	BASEPRI, r3
 8004f36:	f3bf 8f6f 	isb	sy
 8004f3a:	f3bf 8f4f 	dsb	sy
 8004f3e:	607b      	str	r3, [r7, #4]
}
 8004f40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004f42:	f7fe fee1 	bl	8003d08 <xTaskIncrementTick>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d003      	beq.n	8004f54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004f4c:	4b06      	ldr	r3, [pc, #24]	; (8004f68 <xPortSysTickHandler+0x40>)
 8004f4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f52:	601a      	str	r2, [r3, #0]
 8004f54:	2300      	movs	r3, #0
 8004f56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	f383 8811 	msr	BASEPRI, r3
}
 8004f5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004f60:	bf00      	nop
 8004f62:	3708      	adds	r7, #8
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	e000ed04 	.word	0xe000ed04

08004f6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004f70:	4b0b      	ldr	r3, [pc, #44]	; (8004fa0 <vPortSetupTimerInterrupt+0x34>)
 8004f72:	2200      	movs	r2, #0
 8004f74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004f76:	4b0b      	ldr	r3, [pc, #44]	; (8004fa4 <vPortSetupTimerInterrupt+0x38>)
 8004f78:	2200      	movs	r2, #0
 8004f7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004f7c:	4b0a      	ldr	r3, [pc, #40]	; (8004fa8 <vPortSetupTimerInterrupt+0x3c>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a0a      	ldr	r2, [pc, #40]	; (8004fac <vPortSetupTimerInterrupt+0x40>)
 8004f82:	fba2 2303 	umull	r2, r3, r2, r3
 8004f86:	099b      	lsrs	r3, r3, #6
 8004f88:	4a09      	ldr	r2, [pc, #36]	; (8004fb0 <vPortSetupTimerInterrupt+0x44>)
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004f8e:	4b04      	ldr	r3, [pc, #16]	; (8004fa0 <vPortSetupTimerInterrupt+0x34>)
 8004f90:	2207      	movs	r2, #7
 8004f92:	601a      	str	r2, [r3, #0]
}
 8004f94:	bf00      	nop
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	e000e010 	.word	0xe000e010
 8004fa4:	e000e018 	.word	0xe000e018
 8004fa8:	20000000 	.word	0x20000000
 8004fac:	10624dd3 	.word	0x10624dd3
 8004fb0:	e000e014 	.word	0xe000e014

08004fb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004fb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004fc4 <vPortEnableVFP+0x10>
 8004fb8:	6801      	ldr	r1, [r0, #0]
 8004fba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004fbe:	6001      	str	r1, [r0, #0]
 8004fc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004fc2:	bf00      	nop
 8004fc4:	e000ed88 	.word	0xe000ed88

08004fc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004fce:	f3ef 8305 	mrs	r3, IPSR
 8004fd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2b0f      	cmp	r3, #15
 8004fd8:	d914      	bls.n	8005004 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004fda:	4a17      	ldr	r2, [pc, #92]	; (8005038 <vPortValidateInterruptPriority+0x70>)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	4413      	add	r3, r2
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004fe4:	4b15      	ldr	r3, [pc, #84]	; (800503c <vPortValidateInterruptPriority+0x74>)
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	7afa      	ldrb	r2, [r7, #11]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d20a      	bcs.n	8005004 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff2:	f383 8811 	msr	BASEPRI, r3
 8004ff6:	f3bf 8f6f 	isb	sy
 8004ffa:	f3bf 8f4f 	dsb	sy
 8004ffe:	607b      	str	r3, [r7, #4]
}
 8005000:	bf00      	nop
 8005002:	e7fe      	b.n	8005002 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005004:	4b0e      	ldr	r3, [pc, #56]	; (8005040 <vPortValidateInterruptPriority+0x78>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800500c:	4b0d      	ldr	r3, [pc, #52]	; (8005044 <vPortValidateInterruptPriority+0x7c>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	429a      	cmp	r2, r3
 8005012:	d90a      	bls.n	800502a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005018:	f383 8811 	msr	BASEPRI, r3
 800501c:	f3bf 8f6f 	isb	sy
 8005020:	f3bf 8f4f 	dsb	sy
 8005024:	603b      	str	r3, [r7, #0]
}
 8005026:	bf00      	nop
 8005028:	e7fe      	b.n	8005028 <vPortValidateInterruptPriority+0x60>
	}
 800502a:	bf00      	nop
 800502c:	3714      	adds	r7, #20
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr
 8005036:	bf00      	nop
 8005038:	e000e3f0 	.word	0xe000e3f0
 800503c:	20000d7c 	.word	0x20000d7c
 8005040:	e000ed0c 	.word	0xe000ed0c
 8005044:	20000d80 	.word	0x20000d80

08005048 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b08a      	sub	sp, #40	; 0x28
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005050:	2300      	movs	r3, #0
 8005052:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005054:	f7fe fd9c 	bl	8003b90 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005058:	4b5b      	ldr	r3, [pc, #364]	; (80051c8 <pvPortMalloc+0x180>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d101      	bne.n	8005064 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005060:	f000 f920 	bl	80052a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005064:	4b59      	ldr	r3, [pc, #356]	; (80051cc <pvPortMalloc+0x184>)
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4013      	ands	r3, r2
 800506c:	2b00      	cmp	r3, #0
 800506e:	f040 8093 	bne.w	8005198 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d01d      	beq.n	80050b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005078:	2208      	movs	r2, #8
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4413      	add	r3, r2
 800507e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f003 0307 	and.w	r3, r3, #7
 8005086:	2b00      	cmp	r3, #0
 8005088:	d014      	beq.n	80050b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f023 0307 	bic.w	r3, r3, #7
 8005090:	3308      	adds	r3, #8
 8005092:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f003 0307 	and.w	r3, r3, #7
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00a      	beq.n	80050b4 <pvPortMalloc+0x6c>
	__asm volatile
 800509e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a2:	f383 8811 	msr	BASEPRI, r3
 80050a6:	f3bf 8f6f 	isb	sy
 80050aa:	f3bf 8f4f 	dsb	sy
 80050ae:	617b      	str	r3, [r7, #20]
}
 80050b0:	bf00      	nop
 80050b2:	e7fe      	b.n	80050b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d06e      	beq.n	8005198 <pvPortMalloc+0x150>
 80050ba:	4b45      	ldr	r3, [pc, #276]	; (80051d0 <pvPortMalloc+0x188>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d869      	bhi.n	8005198 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80050c4:	4b43      	ldr	r3, [pc, #268]	; (80051d4 <pvPortMalloc+0x18c>)
 80050c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80050c8:	4b42      	ldr	r3, [pc, #264]	; (80051d4 <pvPortMalloc+0x18c>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80050ce:	e004      	b.n	80050da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80050d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80050d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80050da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d903      	bls.n	80050ec <pvPortMalloc+0xa4>
 80050e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1f1      	bne.n	80050d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80050ec:	4b36      	ldr	r3, [pc, #216]	; (80051c8 <pvPortMalloc+0x180>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d050      	beq.n	8005198 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80050f6:	6a3b      	ldr	r3, [r7, #32]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2208      	movs	r2, #8
 80050fc:	4413      	add	r3, r2
 80050fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	6a3b      	ldr	r3, [r7, #32]
 8005106:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510a:	685a      	ldr	r2, [r3, #4]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	1ad2      	subs	r2, r2, r3
 8005110:	2308      	movs	r3, #8
 8005112:	005b      	lsls	r3, r3, #1
 8005114:	429a      	cmp	r2, r3
 8005116:	d91f      	bls.n	8005158 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4413      	add	r3, r2
 800511e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	f003 0307 	and.w	r3, r3, #7
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00a      	beq.n	8005140 <pvPortMalloc+0xf8>
	__asm volatile
 800512a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512e:	f383 8811 	msr	BASEPRI, r3
 8005132:	f3bf 8f6f 	isb	sy
 8005136:	f3bf 8f4f 	dsb	sy
 800513a:	613b      	str	r3, [r7, #16]
}
 800513c:	bf00      	nop
 800513e:	e7fe      	b.n	800513e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005142:	685a      	ldr	r2, [r3, #4]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	1ad2      	subs	r2, r2, r3
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800514c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005152:	69b8      	ldr	r0, [r7, #24]
 8005154:	f000 f908 	bl	8005368 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005158:	4b1d      	ldr	r3, [pc, #116]	; (80051d0 <pvPortMalloc+0x188>)
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	4a1b      	ldr	r2, [pc, #108]	; (80051d0 <pvPortMalloc+0x188>)
 8005164:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005166:	4b1a      	ldr	r3, [pc, #104]	; (80051d0 <pvPortMalloc+0x188>)
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	4b1b      	ldr	r3, [pc, #108]	; (80051d8 <pvPortMalloc+0x190>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	429a      	cmp	r2, r3
 8005170:	d203      	bcs.n	800517a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005172:	4b17      	ldr	r3, [pc, #92]	; (80051d0 <pvPortMalloc+0x188>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a18      	ldr	r2, [pc, #96]	; (80051d8 <pvPortMalloc+0x190>)
 8005178:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800517a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517c:	685a      	ldr	r2, [r3, #4]
 800517e:	4b13      	ldr	r3, [pc, #76]	; (80051cc <pvPortMalloc+0x184>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	431a      	orrs	r2, r3
 8005184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005186:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518a:	2200      	movs	r2, #0
 800518c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800518e:	4b13      	ldr	r3, [pc, #76]	; (80051dc <pvPortMalloc+0x194>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	3301      	adds	r3, #1
 8005194:	4a11      	ldr	r2, [pc, #68]	; (80051dc <pvPortMalloc+0x194>)
 8005196:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005198:	f7fe fd08 	bl	8003bac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	f003 0307 	and.w	r3, r3, #7
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00a      	beq.n	80051bc <pvPortMalloc+0x174>
	__asm volatile
 80051a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051aa:	f383 8811 	msr	BASEPRI, r3
 80051ae:	f3bf 8f6f 	isb	sy
 80051b2:	f3bf 8f4f 	dsb	sy
 80051b6:	60fb      	str	r3, [r7, #12]
}
 80051b8:	bf00      	nop
 80051ba:	e7fe      	b.n	80051ba <pvPortMalloc+0x172>
	return pvReturn;
 80051bc:	69fb      	ldr	r3, [r7, #28]
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3728      	adds	r7, #40	; 0x28
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	2000498c 	.word	0x2000498c
 80051cc:	200049a0 	.word	0x200049a0
 80051d0:	20004990 	.word	0x20004990
 80051d4:	20004984 	.word	0x20004984
 80051d8:	20004994 	.word	0x20004994
 80051dc:	20004998 	.word	0x20004998

080051e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b086      	sub	sp, #24
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d04d      	beq.n	800528e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80051f2:	2308      	movs	r3, #8
 80051f4:	425b      	negs	r3, r3
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	4413      	add	r3, r2
 80051fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	685a      	ldr	r2, [r3, #4]
 8005204:	4b24      	ldr	r3, [pc, #144]	; (8005298 <vPortFree+0xb8>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4013      	ands	r3, r2
 800520a:	2b00      	cmp	r3, #0
 800520c:	d10a      	bne.n	8005224 <vPortFree+0x44>
	__asm volatile
 800520e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005212:	f383 8811 	msr	BASEPRI, r3
 8005216:	f3bf 8f6f 	isb	sy
 800521a:	f3bf 8f4f 	dsb	sy
 800521e:	60fb      	str	r3, [r7, #12]
}
 8005220:	bf00      	nop
 8005222:	e7fe      	b.n	8005222 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00a      	beq.n	8005242 <vPortFree+0x62>
	__asm volatile
 800522c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005230:	f383 8811 	msr	BASEPRI, r3
 8005234:	f3bf 8f6f 	isb	sy
 8005238:	f3bf 8f4f 	dsb	sy
 800523c:	60bb      	str	r3, [r7, #8]
}
 800523e:	bf00      	nop
 8005240:	e7fe      	b.n	8005240 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	685a      	ldr	r2, [r3, #4]
 8005246:	4b14      	ldr	r3, [pc, #80]	; (8005298 <vPortFree+0xb8>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4013      	ands	r3, r2
 800524c:	2b00      	cmp	r3, #0
 800524e:	d01e      	beq.n	800528e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d11a      	bne.n	800528e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	685a      	ldr	r2, [r3, #4]
 800525c:	4b0e      	ldr	r3, [pc, #56]	; (8005298 <vPortFree+0xb8>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	43db      	mvns	r3, r3
 8005262:	401a      	ands	r2, r3
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005268:	f7fe fc92 	bl	8003b90 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	685a      	ldr	r2, [r3, #4]
 8005270:	4b0a      	ldr	r3, [pc, #40]	; (800529c <vPortFree+0xbc>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4413      	add	r3, r2
 8005276:	4a09      	ldr	r2, [pc, #36]	; (800529c <vPortFree+0xbc>)
 8005278:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800527a:	6938      	ldr	r0, [r7, #16]
 800527c:	f000 f874 	bl	8005368 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005280:	4b07      	ldr	r3, [pc, #28]	; (80052a0 <vPortFree+0xc0>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	3301      	adds	r3, #1
 8005286:	4a06      	ldr	r2, [pc, #24]	; (80052a0 <vPortFree+0xc0>)
 8005288:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800528a:	f7fe fc8f 	bl	8003bac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800528e:	bf00      	nop
 8005290:	3718      	adds	r7, #24
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	200049a0 	.word	0x200049a0
 800529c:	20004990 	.word	0x20004990
 80052a0:	2000499c 	.word	0x2000499c

080052a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80052aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80052ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80052b0:	4b27      	ldr	r3, [pc, #156]	; (8005350 <prvHeapInit+0xac>)
 80052b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f003 0307 	and.w	r3, r3, #7
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00c      	beq.n	80052d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	3307      	adds	r3, #7
 80052c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f023 0307 	bic.w	r3, r3, #7
 80052ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80052cc:	68ba      	ldr	r2, [r7, #8]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	4a1f      	ldr	r2, [pc, #124]	; (8005350 <prvHeapInit+0xac>)
 80052d4:	4413      	add	r3, r2
 80052d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80052dc:	4a1d      	ldr	r2, [pc, #116]	; (8005354 <prvHeapInit+0xb0>)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80052e2:	4b1c      	ldr	r3, [pc, #112]	; (8005354 <prvHeapInit+0xb0>)
 80052e4:	2200      	movs	r2, #0
 80052e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	68ba      	ldr	r2, [r7, #8]
 80052ec:	4413      	add	r3, r2
 80052ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80052f0:	2208      	movs	r2, #8
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	1a9b      	subs	r3, r3, r2
 80052f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f023 0307 	bic.w	r3, r3, #7
 80052fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	4a15      	ldr	r2, [pc, #84]	; (8005358 <prvHeapInit+0xb4>)
 8005304:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005306:	4b14      	ldr	r3, [pc, #80]	; (8005358 <prvHeapInit+0xb4>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2200      	movs	r2, #0
 800530c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800530e:	4b12      	ldr	r3, [pc, #72]	; (8005358 <prvHeapInit+0xb4>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2200      	movs	r2, #0
 8005314:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	1ad2      	subs	r2, r2, r3
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005324:	4b0c      	ldr	r3, [pc, #48]	; (8005358 <prvHeapInit+0xb4>)
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	4a0a      	ldr	r2, [pc, #40]	; (800535c <prvHeapInit+0xb8>)
 8005332:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	4a09      	ldr	r2, [pc, #36]	; (8005360 <prvHeapInit+0xbc>)
 800533a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800533c:	4b09      	ldr	r3, [pc, #36]	; (8005364 <prvHeapInit+0xc0>)
 800533e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005342:	601a      	str	r2, [r3, #0]
}
 8005344:	bf00      	nop
 8005346:	3714      	adds	r7, #20
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr
 8005350:	20000d84 	.word	0x20000d84
 8005354:	20004984 	.word	0x20004984
 8005358:	2000498c 	.word	0x2000498c
 800535c:	20004994 	.word	0x20004994
 8005360:	20004990 	.word	0x20004990
 8005364:	200049a0 	.word	0x200049a0

08005368 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005370:	4b28      	ldr	r3, [pc, #160]	; (8005414 <prvInsertBlockIntoFreeList+0xac>)
 8005372:	60fb      	str	r3, [r7, #12]
 8005374:	e002      	b.n	800537c <prvInsertBlockIntoFreeList+0x14>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	60fb      	str	r3, [r7, #12]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	429a      	cmp	r2, r3
 8005384:	d8f7      	bhi.n	8005376 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	68ba      	ldr	r2, [r7, #8]
 8005390:	4413      	add	r3, r2
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	429a      	cmp	r2, r3
 8005396:	d108      	bne.n	80053aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	685a      	ldr	r2, [r3, #4]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	441a      	add	r2, r3
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	68ba      	ldr	r2, [r7, #8]
 80053b4:	441a      	add	r2, r3
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d118      	bne.n	80053f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	4b15      	ldr	r3, [pc, #84]	; (8005418 <prvInsertBlockIntoFreeList+0xb0>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d00d      	beq.n	80053e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685a      	ldr	r2, [r3, #4]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	441a      	add	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	601a      	str	r2, [r3, #0]
 80053e4:	e008      	b.n	80053f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80053e6:	4b0c      	ldr	r3, [pc, #48]	; (8005418 <prvInsertBlockIntoFreeList+0xb0>)
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	601a      	str	r2, [r3, #0]
 80053ee:	e003      	b.n	80053f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d002      	beq.n	8005406 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005406:	bf00      	nop
 8005408:	3714      	adds	r7, #20
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	20004984 	.word	0x20004984
 8005418:	2000498c 	.word	0x2000498c

0800541c <__errno>:
 800541c:	4b01      	ldr	r3, [pc, #4]	; (8005424 <__errno+0x8>)
 800541e:	6818      	ldr	r0, [r3, #0]
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	20000010 	.word	0x20000010

08005428 <__libc_init_array>:
 8005428:	b570      	push	{r4, r5, r6, lr}
 800542a:	4d0d      	ldr	r5, [pc, #52]	; (8005460 <__libc_init_array+0x38>)
 800542c:	4c0d      	ldr	r4, [pc, #52]	; (8005464 <__libc_init_array+0x3c>)
 800542e:	1b64      	subs	r4, r4, r5
 8005430:	10a4      	asrs	r4, r4, #2
 8005432:	2600      	movs	r6, #0
 8005434:	42a6      	cmp	r6, r4
 8005436:	d109      	bne.n	800544c <__libc_init_array+0x24>
 8005438:	4d0b      	ldr	r5, [pc, #44]	; (8005468 <__libc_init_array+0x40>)
 800543a:	4c0c      	ldr	r4, [pc, #48]	; (800546c <__libc_init_array+0x44>)
 800543c:	f001 fe84 	bl	8007148 <_init>
 8005440:	1b64      	subs	r4, r4, r5
 8005442:	10a4      	asrs	r4, r4, #2
 8005444:	2600      	movs	r6, #0
 8005446:	42a6      	cmp	r6, r4
 8005448:	d105      	bne.n	8005456 <__libc_init_array+0x2e>
 800544a:	bd70      	pop	{r4, r5, r6, pc}
 800544c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005450:	4798      	blx	r3
 8005452:	3601      	adds	r6, #1
 8005454:	e7ee      	b.n	8005434 <__libc_init_array+0xc>
 8005456:	f855 3b04 	ldr.w	r3, [r5], #4
 800545a:	4798      	blx	r3
 800545c:	3601      	adds	r6, #1
 800545e:	e7f2      	b.n	8005446 <__libc_init_array+0x1e>
 8005460:	080073e8 	.word	0x080073e8
 8005464:	080073e8 	.word	0x080073e8
 8005468:	080073e8 	.word	0x080073e8
 800546c:	080073ec 	.word	0x080073ec

08005470 <memcpy>:
 8005470:	440a      	add	r2, r1
 8005472:	4291      	cmp	r1, r2
 8005474:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005478:	d100      	bne.n	800547c <memcpy+0xc>
 800547a:	4770      	bx	lr
 800547c:	b510      	push	{r4, lr}
 800547e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005482:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005486:	4291      	cmp	r1, r2
 8005488:	d1f9      	bne.n	800547e <memcpy+0xe>
 800548a:	bd10      	pop	{r4, pc}

0800548c <memset>:
 800548c:	4402      	add	r2, r0
 800548e:	4603      	mov	r3, r0
 8005490:	4293      	cmp	r3, r2
 8005492:	d100      	bne.n	8005496 <memset+0xa>
 8005494:	4770      	bx	lr
 8005496:	f803 1b01 	strb.w	r1, [r3], #1
 800549a:	e7f9      	b.n	8005490 <memset+0x4>

0800549c <iprintf>:
 800549c:	b40f      	push	{r0, r1, r2, r3}
 800549e:	4b0a      	ldr	r3, [pc, #40]	; (80054c8 <iprintf+0x2c>)
 80054a0:	b513      	push	{r0, r1, r4, lr}
 80054a2:	681c      	ldr	r4, [r3, #0]
 80054a4:	b124      	cbz	r4, 80054b0 <iprintf+0x14>
 80054a6:	69a3      	ldr	r3, [r4, #24]
 80054a8:	b913      	cbnz	r3, 80054b0 <iprintf+0x14>
 80054aa:	4620      	mov	r0, r4
 80054ac:	f000 fa18 	bl	80058e0 <__sinit>
 80054b0:	ab05      	add	r3, sp, #20
 80054b2:	9a04      	ldr	r2, [sp, #16]
 80054b4:	68a1      	ldr	r1, [r4, #8]
 80054b6:	9301      	str	r3, [sp, #4]
 80054b8:	4620      	mov	r0, r4
 80054ba:	f000 fc0f 	bl	8005cdc <_vfiprintf_r>
 80054be:	b002      	add	sp, #8
 80054c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054c4:	b004      	add	sp, #16
 80054c6:	4770      	bx	lr
 80054c8:	20000010 	.word	0x20000010

080054cc <iscanf>:
 80054cc:	b40f      	push	{r0, r1, r2, r3}
 80054ce:	4b0a      	ldr	r3, [pc, #40]	; (80054f8 <iscanf+0x2c>)
 80054d0:	b513      	push	{r0, r1, r4, lr}
 80054d2:	681c      	ldr	r4, [r3, #0]
 80054d4:	b124      	cbz	r4, 80054e0 <iscanf+0x14>
 80054d6:	69a3      	ldr	r3, [r4, #24]
 80054d8:	b913      	cbnz	r3, 80054e0 <iscanf+0x14>
 80054da:	4620      	mov	r0, r4
 80054dc:	f000 fa00 	bl	80058e0 <__sinit>
 80054e0:	ab05      	add	r3, sp, #20
 80054e2:	9a04      	ldr	r2, [sp, #16]
 80054e4:	6861      	ldr	r1, [r4, #4]
 80054e6:	9301      	str	r3, [sp, #4]
 80054e8:	4620      	mov	r0, r4
 80054ea:	f001 f85f 	bl	80065ac <_vfiscanf_r>
 80054ee:	b002      	add	sp, #8
 80054f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054f4:	b004      	add	sp, #16
 80054f6:	4770      	bx	lr
 80054f8:	20000010 	.word	0x20000010

080054fc <setvbuf>:
 80054fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005500:	461d      	mov	r5, r3
 8005502:	4b5d      	ldr	r3, [pc, #372]	; (8005678 <setvbuf+0x17c>)
 8005504:	681f      	ldr	r7, [r3, #0]
 8005506:	4604      	mov	r4, r0
 8005508:	460e      	mov	r6, r1
 800550a:	4690      	mov	r8, r2
 800550c:	b127      	cbz	r7, 8005518 <setvbuf+0x1c>
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	b913      	cbnz	r3, 8005518 <setvbuf+0x1c>
 8005512:	4638      	mov	r0, r7
 8005514:	f000 f9e4 	bl	80058e0 <__sinit>
 8005518:	4b58      	ldr	r3, [pc, #352]	; (800567c <setvbuf+0x180>)
 800551a:	429c      	cmp	r4, r3
 800551c:	d167      	bne.n	80055ee <setvbuf+0xf2>
 800551e:	687c      	ldr	r4, [r7, #4]
 8005520:	f1b8 0f02 	cmp.w	r8, #2
 8005524:	d006      	beq.n	8005534 <setvbuf+0x38>
 8005526:	f1b8 0f01 	cmp.w	r8, #1
 800552a:	f200 809f 	bhi.w	800566c <setvbuf+0x170>
 800552e:	2d00      	cmp	r5, #0
 8005530:	f2c0 809c 	blt.w	800566c <setvbuf+0x170>
 8005534:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005536:	07db      	lsls	r3, r3, #31
 8005538:	d405      	bmi.n	8005546 <setvbuf+0x4a>
 800553a:	89a3      	ldrh	r3, [r4, #12]
 800553c:	0598      	lsls	r0, r3, #22
 800553e:	d402      	bmi.n	8005546 <setvbuf+0x4a>
 8005540:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005542:	f000 fa88 	bl	8005a56 <__retarget_lock_acquire_recursive>
 8005546:	4621      	mov	r1, r4
 8005548:	4638      	mov	r0, r7
 800554a:	f000 f923 	bl	8005794 <_fflush_r>
 800554e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005550:	b141      	cbz	r1, 8005564 <setvbuf+0x68>
 8005552:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005556:	4299      	cmp	r1, r3
 8005558:	d002      	beq.n	8005560 <setvbuf+0x64>
 800555a:	4638      	mov	r0, r7
 800555c:	f000 faea 	bl	8005b34 <_free_r>
 8005560:	2300      	movs	r3, #0
 8005562:	6363      	str	r3, [r4, #52]	; 0x34
 8005564:	2300      	movs	r3, #0
 8005566:	61a3      	str	r3, [r4, #24]
 8005568:	6063      	str	r3, [r4, #4]
 800556a:	89a3      	ldrh	r3, [r4, #12]
 800556c:	0619      	lsls	r1, r3, #24
 800556e:	d503      	bpl.n	8005578 <setvbuf+0x7c>
 8005570:	6921      	ldr	r1, [r4, #16]
 8005572:	4638      	mov	r0, r7
 8005574:	f000 fade 	bl	8005b34 <_free_r>
 8005578:	89a3      	ldrh	r3, [r4, #12]
 800557a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800557e:	f023 0303 	bic.w	r3, r3, #3
 8005582:	f1b8 0f02 	cmp.w	r8, #2
 8005586:	81a3      	strh	r3, [r4, #12]
 8005588:	d06c      	beq.n	8005664 <setvbuf+0x168>
 800558a:	ab01      	add	r3, sp, #4
 800558c:	466a      	mov	r2, sp
 800558e:	4621      	mov	r1, r4
 8005590:	4638      	mov	r0, r7
 8005592:	f000 fa62 	bl	8005a5a <__swhatbuf_r>
 8005596:	89a3      	ldrh	r3, [r4, #12]
 8005598:	4318      	orrs	r0, r3
 800559a:	81a0      	strh	r0, [r4, #12]
 800559c:	2d00      	cmp	r5, #0
 800559e:	d130      	bne.n	8005602 <setvbuf+0x106>
 80055a0:	9d00      	ldr	r5, [sp, #0]
 80055a2:	4628      	mov	r0, r5
 80055a4:	f000 fabe 	bl	8005b24 <malloc>
 80055a8:	4606      	mov	r6, r0
 80055aa:	2800      	cmp	r0, #0
 80055ac:	d155      	bne.n	800565a <setvbuf+0x15e>
 80055ae:	f8dd 9000 	ldr.w	r9, [sp]
 80055b2:	45a9      	cmp	r9, r5
 80055b4:	d14a      	bne.n	800564c <setvbuf+0x150>
 80055b6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80055ba:	2200      	movs	r2, #0
 80055bc:	60a2      	str	r2, [r4, #8]
 80055be:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80055c2:	6022      	str	r2, [r4, #0]
 80055c4:	6122      	str	r2, [r4, #16]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055cc:	6162      	str	r2, [r4, #20]
 80055ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80055d0:	f043 0302 	orr.w	r3, r3, #2
 80055d4:	07d2      	lsls	r2, r2, #31
 80055d6:	81a3      	strh	r3, [r4, #12]
 80055d8:	d405      	bmi.n	80055e6 <setvbuf+0xea>
 80055da:	f413 7f00 	tst.w	r3, #512	; 0x200
 80055de:	d102      	bne.n	80055e6 <setvbuf+0xea>
 80055e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055e2:	f000 fa39 	bl	8005a58 <__retarget_lock_release_recursive>
 80055e6:	4628      	mov	r0, r5
 80055e8:	b003      	add	sp, #12
 80055ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80055ee:	4b24      	ldr	r3, [pc, #144]	; (8005680 <setvbuf+0x184>)
 80055f0:	429c      	cmp	r4, r3
 80055f2:	d101      	bne.n	80055f8 <setvbuf+0xfc>
 80055f4:	68bc      	ldr	r4, [r7, #8]
 80055f6:	e793      	b.n	8005520 <setvbuf+0x24>
 80055f8:	4b22      	ldr	r3, [pc, #136]	; (8005684 <setvbuf+0x188>)
 80055fa:	429c      	cmp	r4, r3
 80055fc:	bf08      	it	eq
 80055fe:	68fc      	ldreq	r4, [r7, #12]
 8005600:	e78e      	b.n	8005520 <setvbuf+0x24>
 8005602:	2e00      	cmp	r6, #0
 8005604:	d0cd      	beq.n	80055a2 <setvbuf+0xa6>
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	b913      	cbnz	r3, 8005610 <setvbuf+0x114>
 800560a:	4638      	mov	r0, r7
 800560c:	f000 f968 	bl	80058e0 <__sinit>
 8005610:	f1b8 0f01 	cmp.w	r8, #1
 8005614:	bf08      	it	eq
 8005616:	89a3      	ldrheq	r3, [r4, #12]
 8005618:	6026      	str	r6, [r4, #0]
 800561a:	bf04      	itt	eq
 800561c:	f043 0301 	orreq.w	r3, r3, #1
 8005620:	81a3      	strheq	r3, [r4, #12]
 8005622:	89a2      	ldrh	r2, [r4, #12]
 8005624:	f012 0308 	ands.w	r3, r2, #8
 8005628:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800562c:	d01c      	beq.n	8005668 <setvbuf+0x16c>
 800562e:	07d3      	lsls	r3, r2, #31
 8005630:	bf41      	itttt	mi
 8005632:	2300      	movmi	r3, #0
 8005634:	426d      	negmi	r5, r5
 8005636:	60a3      	strmi	r3, [r4, #8]
 8005638:	61a5      	strmi	r5, [r4, #24]
 800563a:	bf58      	it	pl
 800563c:	60a5      	strpl	r5, [r4, #8]
 800563e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8005640:	f015 0501 	ands.w	r5, r5, #1
 8005644:	d115      	bne.n	8005672 <setvbuf+0x176>
 8005646:	f412 7f00 	tst.w	r2, #512	; 0x200
 800564a:	e7c8      	b.n	80055de <setvbuf+0xe2>
 800564c:	4648      	mov	r0, r9
 800564e:	f000 fa69 	bl	8005b24 <malloc>
 8005652:	4606      	mov	r6, r0
 8005654:	2800      	cmp	r0, #0
 8005656:	d0ae      	beq.n	80055b6 <setvbuf+0xba>
 8005658:	464d      	mov	r5, r9
 800565a:	89a3      	ldrh	r3, [r4, #12]
 800565c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005660:	81a3      	strh	r3, [r4, #12]
 8005662:	e7d0      	b.n	8005606 <setvbuf+0x10a>
 8005664:	2500      	movs	r5, #0
 8005666:	e7a8      	b.n	80055ba <setvbuf+0xbe>
 8005668:	60a3      	str	r3, [r4, #8]
 800566a:	e7e8      	b.n	800563e <setvbuf+0x142>
 800566c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005670:	e7b9      	b.n	80055e6 <setvbuf+0xea>
 8005672:	2500      	movs	r5, #0
 8005674:	e7b7      	b.n	80055e6 <setvbuf+0xea>
 8005676:	bf00      	nop
 8005678:	20000010 	.word	0x20000010
 800567c:	08007250 	.word	0x08007250
 8005680:	08007270 	.word	0x08007270
 8005684:	08007230 	.word	0x08007230

08005688 <__sflush_r>:
 8005688:	898a      	ldrh	r2, [r1, #12]
 800568a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800568e:	4605      	mov	r5, r0
 8005690:	0710      	lsls	r0, r2, #28
 8005692:	460c      	mov	r4, r1
 8005694:	d458      	bmi.n	8005748 <__sflush_r+0xc0>
 8005696:	684b      	ldr	r3, [r1, #4]
 8005698:	2b00      	cmp	r3, #0
 800569a:	dc05      	bgt.n	80056a8 <__sflush_r+0x20>
 800569c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800569e:	2b00      	cmp	r3, #0
 80056a0:	dc02      	bgt.n	80056a8 <__sflush_r+0x20>
 80056a2:	2000      	movs	r0, #0
 80056a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80056aa:	2e00      	cmp	r6, #0
 80056ac:	d0f9      	beq.n	80056a2 <__sflush_r+0x1a>
 80056ae:	2300      	movs	r3, #0
 80056b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80056b4:	682f      	ldr	r7, [r5, #0]
 80056b6:	602b      	str	r3, [r5, #0]
 80056b8:	d032      	beq.n	8005720 <__sflush_r+0x98>
 80056ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80056bc:	89a3      	ldrh	r3, [r4, #12]
 80056be:	075a      	lsls	r2, r3, #29
 80056c0:	d505      	bpl.n	80056ce <__sflush_r+0x46>
 80056c2:	6863      	ldr	r3, [r4, #4]
 80056c4:	1ac0      	subs	r0, r0, r3
 80056c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80056c8:	b10b      	cbz	r3, 80056ce <__sflush_r+0x46>
 80056ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80056cc:	1ac0      	subs	r0, r0, r3
 80056ce:	2300      	movs	r3, #0
 80056d0:	4602      	mov	r2, r0
 80056d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80056d4:	6a21      	ldr	r1, [r4, #32]
 80056d6:	4628      	mov	r0, r5
 80056d8:	47b0      	blx	r6
 80056da:	1c43      	adds	r3, r0, #1
 80056dc:	89a3      	ldrh	r3, [r4, #12]
 80056de:	d106      	bne.n	80056ee <__sflush_r+0x66>
 80056e0:	6829      	ldr	r1, [r5, #0]
 80056e2:	291d      	cmp	r1, #29
 80056e4:	d82c      	bhi.n	8005740 <__sflush_r+0xb8>
 80056e6:	4a2a      	ldr	r2, [pc, #168]	; (8005790 <__sflush_r+0x108>)
 80056e8:	40ca      	lsrs	r2, r1
 80056ea:	07d6      	lsls	r6, r2, #31
 80056ec:	d528      	bpl.n	8005740 <__sflush_r+0xb8>
 80056ee:	2200      	movs	r2, #0
 80056f0:	6062      	str	r2, [r4, #4]
 80056f2:	04d9      	lsls	r1, r3, #19
 80056f4:	6922      	ldr	r2, [r4, #16]
 80056f6:	6022      	str	r2, [r4, #0]
 80056f8:	d504      	bpl.n	8005704 <__sflush_r+0x7c>
 80056fa:	1c42      	adds	r2, r0, #1
 80056fc:	d101      	bne.n	8005702 <__sflush_r+0x7a>
 80056fe:	682b      	ldr	r3, [r5, #0]
 8005700:	b903      	cbnz	r3, 8005704 <__sflush_r+0x7c>
 8005702:	6560      	str	r0, [r4, #84]	; 0x54
 8005704:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005706:	602f      	str	r7, [r5, #0]
 8005708:	2900      	cmp	r1, #0
 800570a:	d0ca      	beq.n	80056a2 <__sflush_r+0x1a>
 800570c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005710:	4299      	cmp	r1, r3
 8005712:	d002      	beq.n	800571a <__sflush_r+0x92>
 8005714:	4628      	mov	r0, r5
 8005716:	f000 fa0d 	bl	8005b34 <_free_r>
 800571a:	2000      	movs	r0, #0
 800571c:	6360      	str	r0, [r4, #52]	; 0x34
 800571e:	e7c1      	b.n	80056a4 <__sflush_r+0x1c>
 8005720:	6a21      	ldr	r1, [r4, #32]
 8005722:	2301      	movs	r3, #1
 8005724:	4628      	mov	r0, r5
 8005726:	47b0      	blx	r6
 8005728:	1c41      	adds	r1, r0, #1
 800572a:	d1c7      	bne.n	80056bc <__sflush_r+0x34>
 800572c:	682b      	ldr	r3, [r5, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d0c4      	beq.n	80056bc <__sflush_r+0x34>
 8005732:	2b1d      	cmp	r3, #29
 8005734:	d001      	beq.n	800573a <__sflush_r+0xb2>
 8005736:	2b16      	cmp	r3, #22
 8005738:	d101      	bne.n	800573e <__sflush_r+0xb6>
 800573a:	602f      	str	r7, [r5, #0]
 800573c:	e7b1      	b.n	80056a2 <__sflush_r+0x1a>
 800573e:	89a3      	ldrh	r3, [r4, #12]
 8005740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005744:	81a3      	strh	r3, [r4, #12]
 8005746:	e7ad      	b.n	80056a4 <__sflush_r+0x1c>
 8005748:	690f      	ldr	r7, [r1, #16]
 800574a:	2f00      	cmp	r7, #0
 800574c:	d0a9      	beq.n	80056a2 <__sflush_r+0x1a>
 800574e:	0793      	lsls	r3, r2, #30
 8005750:	680e      	ldr	r6, [r1, #0]
 8005752:	bf08      	it	eq
 8005754:	694b      	ldreq	r3, [r1, #20]
 8005756:	600f      	str	r7, [r1, #0]
 8005758:	bf18      	it	ne
 800575a:	2300      	movne	r3, #0
 800575c:	eba6 0807 	sub.w	r8, r6, r7
 8005760:	608b      	str	r3, [r1, #8]
 8005762:	f1b8 0f00 	cmp.w	r8, #0
 8005766:	dd9c      	ble.n	80056a2 <__sflush_r+0x1a>
 8005768:	6a21      	ldr	r1, [r4, #32]
 800576a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800576c:	4643      	mov	r3, r8
 800576e:	463a      	mov	r2, r7
 8005770:	4628      	mov	r0, r5
 8005772:	47b0      	blx	r6
 8005774:	2800      	cmp	r0, #0
 8005776:	dc06      	bgt.n	8005786 <__sflush_r+0xfe>
 8005778:	89a3      	ldrh	r3, [r4, #12]
 800577a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800577e:	81a3      	strh	r3, [r4, #12]
 8005780:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005784:	e78e      	b.n	80056a4 <__sflush_r+0x1c>
 8005786:	4407      	add	r7, r0
 8005788:	eba8 0800 	sub.w	r8, r8, r0
 800578c:	e7e9      	b.n	8005762 <__sflush_r+0xda>
 800578e:	bf00      	nop
 8005790:	20400001 	.word	0x20400001

08005794 <_fflush_r>:
 8005794:	b538      	push	{r3, r4, r5, lr}
 8005796:	690b      	ldr	r3, [r1, #16]
 8005798:	4605      	mov	r5, r0
 800579a:	460c      	mov	r4, r1
 800579c:	b913      	cbnz	r3, 80057a4 <_fflush_r+0x10>
 800579e:	2500      	movs	r5, #0
 80057a0:	4628      	mov	r0, r5
 80057a2:	bd38      	pop	{r3, r4, r5, pc}
 80057a4:	b118      	cbz	r0, 80057ae <_fflush_r+0x1a>
 80057a6:	6983      	ldr	r3, [r0, #24]
 80057a8:	b90b      	cbnz	r3, 80057ae <_fflush_r+0x1a>
 80057aa:	f000 f899 	bl	80058e0 <__sinit>
 80057ae:	4b14      	ldr	r3, [pc, #80]	; (8005800 <_fflush_r+0x6c>)
 80057b0:	429c      	cmp	r4, r3
 80057b2:	d11b      	bne.n	80057ec <_fflush_r+0x58>
 80057b4:	686c      	ldr	r4, [r5, #4]
 80057b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d0ef      	beq.n	800579e <_fflush_r+0xa>
 80057be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80057c0:	07d0      	lsls	r0, r2, #31
 80057c2:	d404      	bmi.n	80057ce <_fflush_r+0x3a>
 80057c4:	0599      	lsls	r1, r3, #22
 80057c6:	d402      	bmi.n	80057ce <_fflush_r+0x3a>
 80057c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80057ca:	f000 f944 	bl	8005a56 <__retarget_lock_acquire_recursive>
 80057ce:	4628      	mov	r0, r5
 80057d0:	4621      	mov	r1, r4
 80057d2:	f7ff ff59 	bl	8005688 <__sflush_r>
 80057d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80057d8:	07da      	lsls	r2, r3, #31
 80057da:	4605      	mov	r5, r0
 80057dc:	d4e0      	bmi.n	80057a0 <_fflush_r+0xc>
 80057de:	89a3      	ldrh	r3, [r4, #12]
 80057e0:	059b      	lsls	r3, r3, #22
 80057e2:	d4dd      	bmi.n	80057a0 <_fflush_r+0xc>
 80057e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80057e6:	f000 f937 	bl	8005a58 <__retarget_lock_release_recursive>
 80057ea:	e7d9      	b.n	80057a0 <_fflush_r+0xc>
 80057ec:	4b05      	ldr	r3, [pc, #20]	; (8005804 <_fflush_r+0x70>)
 80057ee:	429c      	cmp	r4, r3
 80057f0:	d101      	bne.n	80057f6 <_fflush_r+0x62>
 80057f2:	68ac      	ldr	r4, [r5, #8]
 80057f4:	e7df      	b.n	80057b6 <_fflush_r+0x22>
 80057f6:	4b04      	ldr	r3, [pc, #16]	; (8005808 <_fflush_r+0x74>)
 80057f8:	429c      	cmp	r4, r3
 80057fa:	bf08      	it	eq
 80057fc:	68ec      	ldreq	r4, [r5, #12]
 80057fe:	e7da      	b.n	80057b6 <_fflush_r+0x22>
 8005800:	08007250 	.word	0x08007250
 8005804:	08007270 	.word	0x08007270
 8005808:	08007230 	.word	0x08007230

0800580c <fflush>:
 800580c:	4601      	mov	r1, r0
 800580e:	b920      	cbnz	r0, 800581a <fflush+0xe>
 8005810:	4b04      	ldr	r3, [pc, #16]	; (8005824 <fflush+0x18>)
 8005812:	4905      	ldr	r1, [pc, #20]	; (8005828 <fflush+0x1c>)
 8005814:	6818      	ldr	r0, [r3, #0]
 8005816:	f000 b8fe 	b.w	8005a16 <_fwalk_reent>
 800581a:	4b04      	ldr	r3, [pc, #16]	; (800582c <fflush+0x20>)
 800581c:	6818      	ldr	r0, [r3, #0]
 800581e:	f7ff bfb9 	b.w	8005794 <_fflush_r>
 8005822:	bf00      	nop
 8005824:	0800722c 	.word	0x0800722c
 8005828:	08005795 	.word	0x08005795
 800582c:	20000010 	.word	0x20000010

08005830 <std>:
 8005830:	2300      	movs	r3, #0
 8005832:	b510      	push	{r4, lr}
 8005834:	4604      	mov	r4, r0
 8005836:	e9c0 3300 	strd	r3, r3, [r0]
 800583a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800583e:	6083      	str	r3, [r0, #8]
 8005840:	8181      	strh	r1, [r0, #12]
 8005842:	6643      	str	r3, [r0, #100]	; 0x64
 8005844:	81c2      	strh	r2, [r0, #14]
 8005846:	6183      	str	r3, [r0, #24]
 8005848:	4619      	mov	r1, r3
 800584a:	2208      	movs	r2, #8
 800584c:	305c      	adds	r0, #92	; 0x5c
 800584e:	f7ff fe1d 	bl	800548c <memset>
 8005852:	4b05      	ldr	r3, [pc, #20]	; (8005868 <std+0x38>)
 8005854:	6263      	str	r3, [r4, #36]	; 0x24
 8005856:	4b05      	ldr	r3, [pc, #20]	; (800586c <std+0x3c>)
 8005858:	62a3      	str	r3, [r4, #40]	; 0x28
 800585a:	4b05      	ldr	r3, [pc, #20]	; (8005870 <std+0x40>)
 800585c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800585e:	4b05      	ldr	r3, [pc, #20]	; (8005874 <std+0x44>)
 8005860:	6224      	str	r4, [r4, #32]
 8005862:	6323      	str	r3, [r4, #48]	; 0x30
 8005864:	bd10      	pop	{r4, pc}
 8005866:	bf00      	nop
 8005868:	08006a51 	.word	0x08006a51
 800586c:	08006a73 	.word	0x08006a73
 8005870:	08006aab 	.word	0x08006aab
 8005874:	08006acf 	.word	0x08006acf

08005878 <_cleanup_r>:
 8005878:	4901      	ldr	r1, [pc, #4]	; (8005880 <_cleanup_r+0x8>)
 800587a:	f000 b8cc 	b.w	8005a16 <_fwalk_reent>
 800587e:	bf00      	nop
 8005880:	08005795 	.word	0x08005795

08005884 <__sfmoreglue>:
 8005884:	b570      	push	{r4, r5, r6, lr}
 8005886:	1e4a      	subs	r2, r1, #1
 8005888:	2568      	movs	r5, #104	; 0x68
 800588a:	4355      	muls	r5, r2
 800588c:	460e      	mov	r6, r1
 800588e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005892:	f000 f99f 	bl	8005bd4 <_malloc_r>
 8005896:	4604      	mov	r4, r0
 8005898:	b140      	cbz	r0, 80058ac <__sfmoreglue+0x28>
 800589a:	2100      	movs	r1, #0
 800589c:	e9c0 1600 	strd	r1, r6, [r0]
 80058a0:	300c      	adds	r0, #12
 80058a2:	60a0      	str	r0, [r4, #8]
 80058a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80058a8:	f7ff fdf0 	bl	800548c <memset>
 80058ac:	4620      	mov	r0, r4
 80058ae:	bd70      	pop	{r4, r5, r6, pc}

080058b0 <__sfp_lock_acquire>:
 80058b0:	4801      	ldr	r0, [pc, #4]	; (80058b8 <__sfp_lock_acquire+0x8>)
 80058b2:	f000 b8d0 	b.w	8005a56 <__retarget_lock_acquire_recursive>
 80058b6:	bf00      	nop
 80058b8:	20004a90 	.word	0x20004a90

080058bc <__sfp_lock_release>:
 80058bc:	4801      	ldr	r0, [pc, #4]	; (80058c4 <__sfp_lock_release+0x8>)
 80058be:	f000 b8cb 	b.w	8005a58 <__retarget_lock_release_recursive>
 80058c2:	bf00      	nop
 80058c4:	20004a90 	.word	0x20004a90

080058c8 <__sinit_lock_acquire>:
 80058c8:	4801      	ldr	r0, [pc, #4]	; (80058d0 <__sinit_lock_acquire+0x8>)
 80058ca:	f000 b8c4 	b.w	8005a56 <__retarget_lock_acquire_recursive>
 80058ce:	bf00      	nop
 80058d0:	20004a8b 	.word	0x20004a8b

080058d4 <__sinit_lock_release>:
 80058d4:	4801      	ldr	r0, [pc, #4]	; (80058dc <__sinit_lock_release+0x8>)
 80058d6:	f000 b8bf 	b.w	8005a58 <__retarget_lock_release_recursive>
 80058da:	bf00      	nop
 80058dc:	20004a8b 	.word	0x20004a8b

080058e0 <__sinit>:
 80058e0:	b510      	push	{r4, lr}
 80058e2:	4604      	mov	r4, r0
 80058e4:	f7ff fff0 	bl	80058c8 <__sinit_lock_acquire>
 80058e8:	69a3      	ldr	r3, [r4, #24]
 80058ea:	b11b      	cbz	r3, 80058f4 <__sinit+0x14>
 80058ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058f0:	f7ff bff0 	b.w	80058d4 <__sinit_lock_release>
 80058f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80058f8:	6523      	str	r3, [r4, #80]	; 0x50
 80058fa:	4b13      	ldr	r3, [pc, #76]	; (8005948 <__sinit+0x68>)
 80058fc:	4a13      	ldr	r2, [pc, #76]	; (800594c <__sinit+0x6c>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	62a2      	str	r2, [r4, #40]	; 0x28
 8005902:	42a3      	cmp	r3, r4
 8005904:	bf04      	itt	eq
 8005906:	2301      	moveq	r3, #1
 8005908:	61a3      	streq	r3, [r4, #24]
 800590a:	4620      	mov	r0, r4
 800590c:	f000 f820 	bl	8005950 <__sfp>
 8005910:	6060      	str	r0, [r4, #4]
 8005912:	4620      	mov	r0, r4
 8005914:	f000 f81c 	bl	8005950 <__sfp>
 8005918:	60a0      	str	r0, [r4, #8]
 800591a:	4620      	mov	r0, r4
 800591c:	f000 f818 	bl	8005950 <__sfp>
 8005920:	2200      	movs	r2, #0
 8005922:	60e0      	str	r0, [r4, #12]
 8005924:	2104      	movs	r1, #4
 8005926:	6860      	ldr	r0, [r4, #4]
 8005928:	f7ff ff82 	bl	8005830 <std>
 800592c:	68a0      	ldr	r0, [r4, #8]
 800592e:	2201      	movs	r2, #1
 8005930:	2109      	movs	r1, #9
 8005932:	f7ff ff7d 	bl	8005830 <std>
 8005936:	68e0      	ldr	r0, [r4, #12]
 8005938:	2202      	movs	r2, #2
 800593a:	2112      	movs	r1, #18
 800593c:	f7ff ff78 	bl	8005830 <std>
 8005940:	2301      	movs	r3, #1
 8005942:	61a3      	str	r3, [r4, #24]
 8005944:	e7d2      	b.n	80058ec <__sinit+0xc>
 8005946:	bf00      	nop
 8005948:	0800722c 	.word	0x0800722c
 800594c:	08005879 	.word	0x08005879

08005950 <__sfp>:
 8005950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005952:	4607      	mov	r7, r0
 8005954:	f7ff ffac 	bl	80058b0 <__sfp_lock_acquire>
 8005958:	4b1e      	ldr	r3, [pc, #120]	; (80059d4 <__sfp+0x84>)
 800595a:	681e      	ldr	r6, [r3, #0]
 800595c:	69b3      	ldr	r3, [r6, #24]
 800595e:	b913      	cbnz	r3, 8005966 <__sfp+0x16>
 8005960:	4630      	mov	r0, r6
 8005962:	f7ff ffbd 	bl	80058e0 <__sinit>
 8005966:	3648      	adds	r6, #72	; 0x48
 8005968:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800596c:	3b01      	subs	r3, #1
 800596e:	d503      	bpl.n	8005978 <__sfp+0x28>
 8005970:	6833      	ldr	r3, [r6, #0]
 8005972:	b30b      	cbz	r3, 80059b8 <__sfp+0x68>
 8005974:	6836      	ldr	r6, [r6, #0]
 8005976:	e7f7      	b.n	8005968 <__sfp+0x18>
 8005978:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800597c:	b9d5      	cbnz	r5, 80059b4 <__sfp+0x64>
 800597e:	4b16      	ldr	r3, [pc, #88]	; (80059d8 <__sfp+0x88>)
 8005980:	60e3      	str	r3, [r4, #12]
 8005982:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005986:	6665      	str	r5, [r4, #100]	; 0x64
 8005988:	f000 f864 	bl	8005a54 <__retarget_lock_init_recursive>
 800598c:	f7ff ff96 	bl	80058bc <__sfp_lock_release>
 8005990:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005994:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005998:	6025      	str	r5, [r4, #0]
 800599a:	61a5      	str	r5, [r4, #24]
 800599c:	2208      	movs	r2, #8
 800599e:	4629      	mov	r1, r5
 80059a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80059a4:	f7ff fd72 	bl	800548c <memset>
 80059a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80059ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80059b0:	4620      	mov	r0, r4
 80059b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059b4:	3468      	adds	r4, #104	; 0x68
 80059b6:	e7d9      	b.n	800596c <__sfp+0x1c>
 80059b8:	2104      	movs	r1, #4
 80059ba:	4638      	mov	r0, r7
 80059bc:	f7ff ff62 	bl	8005884 <__sfmoreglue>
 80059c0:	4604      	mov	r4, r0
 80059c2:	6030      	str	r0, [r6, #0]
 80059c4:	2800      	cmp	r0, #0
 80059c6:	d1d5      	bne.n	8005974 <__sfp+0x24>
 80059c8:	f7ff ff78 	bl	80058bc <__sfp_lock_release>
 80059cc:	230c      	movs	r3, #12
 80059ce:	603b      	str	r3, [r7, #0]
 80059d0:	e7ee      	b.n	80059b0 <__sfp+0x60>
 80059d2:	bf00      	nop
 80059d4:	0800722c 	.word	0x0800722c
 80059d8:	ffff0001 	.word	0xffff0001

080059dc <_fwalk>:
 80059dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059e0:	460f      	mov	r7, r1
 80059e2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80059e6:	2600      	movs	r6, #0
 80059e8:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 80059ec:	f1b8 0801 	subs.w	r8, r8, #1
 80059f0:	d505      	bpl.n	80059fe <_fwalk+0x22>
 80059f2:	6824      	ldr	r4, [r4, #0]
 80059f4:	2c00      	cmp	r4, #0
 80059f6:	d1f7      	bne.n	80059e8 <_fwalk+0xc>
 80059f8:	4630      	mov	r0, r6
 80059fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059fe:	89ab      	ldrh	r3, [r5, #12]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d906      	bls.n	8005a12 <_fwalk+0x36>
 8005a04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a08:	3301      	adds	r3, #1
 8005a0a:	d002      	beq.n	8005a12 <_fwalk+0x36>
 8005a0c:	4628      	mov	r0, r5
 8005a0e:	47b8      	blx	r7
 8005a10:	4306      	orrs	r6, r0
 8005a12:	3568      	adds	r5, #104	; 0x68
 8005a14:	e7ea      	b.n	80059ec <_fwalk+0x10>

08005a16 <_fwalk_reent>:
 8005a16:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a1a:	4606      	mov	r6, r0
 8005a1c:	4688      	mov	r8, r1
 8005a1e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005a22:	2700      	movs	r7, #0
 8005a24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a28:	f1b9 0901 	subs.w	r9, r9, #1
 8005a2c:	d505      	bpl.n	8005a3a <_fwalk_reent+0x24>
 8005a2e:	6824      	ldr	r4, [r4, #0]
 8005a30:	2c00      	cmp	r4, #0
 8005a32:	d1f7      	bne.n	8005a24 <_fwalk_reent+0xe>
 8005a34:	4638      	mov	r0, r7
 8005a36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a3a:	89ab      	ldrh	r3, [r5, #12]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d907      	bls.n	8005a50 <_fwalk_reent+0x3a>
 8005a40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a44:	3301      	adds	r3, #1
 8005a46:	d003      	beq.n	8005a50 <_fwalk_reent+0x3a>
 8005a48:	4629      	mov	r1, r5
 8005a4a:	4630      	mov	r0, r6
 8005a4c:	47c0      	blx	r8
 8005a4e:	4307      	orrs	r7, r0
 8005a50:	3568      	adds	r5, #104	; 0x68
 8005a52:	e7e9      	b.n	8005a28 <_fwalk_reent+0x12>

08005a54 <__retarget_lock_init_recursive>:
 8005a54:	4770      	bx	lr

08005a56 <__retarget_lock_acquire_recursive>:
 8005a56:	4770      	bx	lr

08005a58 <__retarget_lock_release_recursive>:
 8005a58:	4770      	bx	lr

08005a5a <__swhatbuf_r>:
 8005a5a:	b570      	push	{r4, r5, r6, lr}
 8005a5c:	460e      	mov	r6, r1
 8005a5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a62:	2900      	cmp	r1, #0
 8005a64:	b096      	sub	sp, #88	; 0x58
 8005a66:	4614      	mov	r4, r2
 8005a68:	461d      	mov	r5, r3
 8005a6a:	da07      	bge.n	8005a7c <__swhatbuf_r+0x22>
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	602b      	str	r3, [r5, #0]
 8005a70:	89b3      	ldrh	r3, [r6, #12]
 8005a72:	061a      	lsls	r2, r3, #24
 8005a74:	d410      	bmi.n	8005a98 <__swhatbuf_r+0x3e>
 8005a76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a7a:	e00e      	b.n	8005a9a <__swhatbuf_r+0x40>
 8005a7c:	466a      	mov	r2, sp
 8005a7e:	f001 fae3 	bl	8007048 <_fstat_r>
 8005a82:	2800      	cmp	r0, #0
 8005a84:	dbf2      	blt.n	8005a6c <__swhatbuf_r+0x12>
 8005a86:	9a01      	ldr	r2, [sp, #4]
 8005a88:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005a8c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005a90:	425a      	negs	r2, r3
 8005a92:	415a      	adcs	r2, r3
 8005a94:	602a      	str	r2, [r5, #0]
 8005a96:	e7ee      	b.n	8005a76 <__swhatbuf_r+0x1c>
 8005a98:	2340      	movs	r3, #64	; 0x40
 8005a9a:	2000      	movs	r0, #0
 8005a9c:	6023      	str	r3, [r4, #0]
 8005a9e:	b016      	add	sp, #88	; 0x58
 8005aa0:	bd70      	pop	{r4, r5, r6, pc}
	...

08005aa4 <__smakebuf_r>:
 8005aa4:	898b      	ldrh	r3, [r1, #12]
 8005aa6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005aa8:	079d      	lsls	r5, r3, #30
 8005aaa:	4606      	mov	r6, r0
 8005aac:	460c      	mov	r4, r1
 8005aae:	d507      	bpl.n	8005ac0 <__smakebuf_r+0x1c>
 8005ab0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005ab4:	6023      	str	r3, [r4, #0]
 8005ab6:	6123      	str	r3, [r4, #16]
 8005ab8:	2301      	movs	r3, #1
 8005aba:	6163      	str	r3, [r4, #20]
 8005abc:	b002      	add	sp, #8
 8005abe:	bd70      	pop	{r4, r5, r6, pc}
 8005ac0:	ab01      	add	r3, sp, #4
 8005ac2:	466a      	mov	r2, sp
 8005ac4:	f7ff ffc9 	bl	8005a5a <__swhatbuf_r>
 8005ac8:	9900      	ldr	r1, [sp, #0]
 8005aca:	4605      	mov	r5, r0
 8005acc:	4630      	mov	r0, r6
 8005ace:	f000 f881 	bl	8005bd4 <_malloc_r>
 8005ad2:	b948      	cbnz	r0, 8005ae8 <__smakebuf_r+0x44>
 8005ad4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ad8:	059a      	lsls	r2, r3, #22
 8005ada:	d4ef      	bmi.n	8005abc <__smakebuf_r+0x18>
 8005adc:	f023 0303 	bic.w	r3, r3, #3
 8005ae0:	f043 0302 	orr.w	r3, r3, #2
 8005ae4:	81a3      	strh	r3, [r4, #12]
 8005ae6:	e7e3      	b.n	8005ab0 <__smakebuf_r+0xc>
 8005ae8:	4b0d      	ldr	r3, [pc, #52]	; (8005b20 <__smakebuf_r+0x7c>)
 8005aea:	62b3      	str	r3, [r6, #40]	; 0x28
 8005aec:	89a3      	ldrh	r3, [r4, #12]
 8005aee:	6020      	str	r0, [r4, #0]
 8005af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005af4:	81a3      	strh	r3, [r4, #12]
 8005af6:	9b00      	ldr	r3, [sp, #0]
 8005af8:	6163      	str	r3, [r4, #20]
 8005afa:	9b01      	ldr	r3, [sp, #4]
 8005afc:	6120      	str	r0, [r4, #16]
 8005afe:	b15b      	cbz	r3, 8005b18 <__smakebuf_r+0x74>
 8005b00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b04:	4630      	mov	r0, r6
 8005b06:	f001 fab1 	bl	800706c <_isatty_r>
 8005b0a:	b128      	cbz	r0, 8005b18 <__smakebuf_r+0x74>
 8005b0c:	89a3      	ldrh	r3, [r4, #12]
 8005b0e:	f023 0303 	bic.w	r3, r3, #3
 8005b12:	f043 0301 	orr.w	r3, r3, #1
 8005b16:	81a3      	strh	r3, [r4, #12]
 8005b18:	89a0      	ldrh	r0, [r4, #12]
 8005b1a:	4305      	orrs	r5, r0
 8005b1c:	81a5      	strh	r5, [r4, #12]
 8005b1e:	e7cd      	b.n	8005abc <__smakebuf_r+0x18>
 8005b20:	08005879 	.word	0x08005879

08005b24 <malloc>:
 8005b24:	4b02      	ldr	r3, [pc, #8]	; (8005b30 <malloc+0xc>)
 8005b26:	4601      	mov	r1, r0
 8005b28:	6818      	ldr	r0, [r3, #0]
 8005b2a:	f000 b853 	b.w	8005bd4 <_malloc_r>
 8005b2e:	bf00      	nop
 8005b30:	20000010 	.word	0x20000010

08005b34 <_free_r>:
 8005b34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b36:	2900      	cmp	r1, #0
 8005b38:	d048      	beq.n	8005bcc <_free_r+0x98>
 8005b3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b3e:	9001      	str	r0, [sp, #4]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f1a1 0404 	sub.w	r4, r1, #4
 8005b46:	bfb8      	it	lt
 8005b48:	18e4      	addlt	r4, r4, r3
 8005b4a:	f001 fab1 	bl	80070b0 <__malloc_lock>
 8005b4e:	4a20      	ldr	r2, [pc, #128]	; (8005bd0 <_free_r+0x9c>)
 8005b50:	9801      	ldr	r0, [sp, #4]
 8005b52:	6813      	ldr	r3, [r2, #0]
 8005b54:	4615      	mov	r5, r2
 8005b56:	b933      	cbnz	r3, 8005b66 <_free_r+0x32>
 8005b58:	6063      	str	r3, [r4, #4]
 8005b5a:	6014      	str	r4, [r2, #0]
 8005b5c:	b003      	add	sp, #12
 8005b5e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b62:	f001 baab 	b.w	80070bc <__malloc_unlock>
 8005b66:	42a3      	cmp	r3, r4
 8005b68:	d90b      	bls.n	8005b82 <_free_r+0x4e>
 8005b6a:	6821      	ldr	r1, [r4, #0]
 8005b6c:	1862      	adds	r2, r4, r1
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	bf04      	itt	eq
 8005b72:	681a      	ldreq	r2, [r3, #0]
 8005b74:	685b      	ldreq	r3, [r3, #4]
 8005b76:	6063      	str	r3, [r4, #4]
 8005b78:	bf04      	itt	eq
 8005b7a:	1852      	addeq	r2, r2, r1
 8005b7c:	6022      	streq	r2, [r4, #0]
 8005b7e:	602c      	str	r4, [r5, #0]
 8005b80:	e7ec      	b.n	8005b5c <_free_r+0x28>
 8005b82:	461a      	mov	r2, r3
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	b10b      	cbz	r3, 8005b8c <_free_r+0x58>
 8005b88:	42a3      	cmp	r3, r4
 8005b8a:	d9fa      	bls.n	8005b82 <_free_r+0x4e>
 8005b8c:	6811      	ldr	r1, [r2, #0]
 8005b8e:	1855      	adds	r5, r2, r1
 8005b90:	42a5      	cmp	r5, r4
 8005b92:	d10b      	bne.n	8005bac <_free_r+0x78>
 8005b94:	6824      	ldr	r4, [r4, #0]
 8005b96:	4421      	add	r1, r4
 8005b98:	1854      	adds	r4, r2, r1
 8005b9a:	42a3      	cmp	r3, r4
 8005b9c:	6011      	str	r1, [r2, #0]
 8005b9e:	d1dd      	bne.n	8005b5c <_free_r+0x28>
 8005ba0:	681c      	ldr	r4, [r3, #0]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	6053      	str	r3, [r2, #4]
 8005ba6:	4421      	add	r1, r4
 8005ba8:	6011      	str	r1, [r2, #0]
 8005baa:	e7d7      	b.n	8005b5c <_free_r+0x28>
 8005bac:	d902      	bls.n	8005bb4 <_free_r+0x80>
 8005bae:	230c      	movs	r3, #12
 8005bb0:	6003      	str	r3, [r0, #0]
 8005bb2:	e7d3      	b.n	8005b5c <_free_r+0x28>
 8005bb4:	6825      	ldr	r5, [r4, #0]
 8005bb6:	1961      	adds	r1, r4, r5
 8005bb8:	428b      	cmp	r3, r1
 8005bba:	bf04      	itt	eq
 8005bbc:	6819      	ldreq	r1, [r3, #0]
 8005bbe:	685b      	ldreq	r3, [r3, #4]
 8005bc0:	6063      	str	r3, [r4, #4]
 8005bc2:	bf04      	itt	eq
 8005bc4:	1949      	addeq	r1, r1, r5
 8005bc6:	6021      	streq	r1, [r4, #0]
 8005bc8:	6054      	str	r4, [r2, #4]
 8005bca:	e7c7      	b.n	8005b5c <_free_r+0x28>
 8005bcc:	b003      	add	sp, #12
 8005bce:	bd30      	pop	{r4, r5, pc}
 8005bd0:	200049a4 	.word	0x200049a4

08005bd4 <_malloc_r>:
 8005bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bd6:	1ccd      	adds	r5, r1, #3
 8005bd8:	f025 0503 	bic.w	r5, r5, #3
 8005bdc:	3508      	adds	r5, #8
 8005bde:	2d0c      	cmp	r5, #12
 8005be0:	bf38      	it	cc
 8005be2:	250c      	movcc	r5, #12
 8005be4:	2d00      	cmp	r5, #0
 8005be6:	4606      	mov	r6, r0
 8005be8:	db01      	blt.n	8005bee <_malloc_r+0x1a>
 8005bea:	42a9      	cmp	r1, r5
 8005bec:	d903      	bls.n	8005bf6 <_malloc_r+0x22>
 8005bee:	230c      	movs	r3, #12
 8005bf0:	6033      	str	r3, [r6, #0]
 8005bf2:	2000      	movs	r0, #0
 8005bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bf6:	f001 fa5b 	bl	80070b0 <__malloc_lock>
 8005bfa:	4921      	ldr	r1, [pc, #132]	; (8005c80 <_malloc_r+0xac>)
 8005bfc:	680a      	ldr	r2, [r1, #0]
 8005bfe:	4614      	mov	r4, r2
 8005c00:	b99c      	cbnz	r4, 8005c2a <_malloc_r+0x56>
 8005c02:	4f20      	ldr	r7, [pc, #128]	; (8005c84 <_malloc_r+0xb0>)
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	b923      	cbnz	r3, 8005c12 <_malloc_r+0x3e>
 8005c08:	4621      	mov	r1, r4
 8005c0a:	4630      	mov	r0, r6
 8005c0c:	f000 fed6 	bl	80069bc <_sbrk_r>
 8005c10:	6038      	str	r0, [r7, #0]
 8005c12:	4629      	mov	r1, r5
 8005c14:	4630      	mov	r0, r6
 8005c16:	f000 fed1 	bl	80069bc <_sbrk_r>
 8005c1a:	1c43      	adds	r3, r0, #1
 8005c1c:	d123      	bne.n	8005c66 <_malloc_r+0x92>
 8005c1e:	230c      	movs	r3, #12
 8005c20:	6033      	str	r3, [r6, #0]
 8005c22:	4630      	mov	r0, r6
 8005c24:	f001 fa4a 	bl	80070bc <__malloc_unlock>
 8005c28:	e7e3      	b.n	8005bf2 <_malloc_r+0x1e>
 8005c2a:	6823      	ldr	r3, [r4, #0]
 8005c2c:	1b5b      	subs	r3, r3, r5
 8005c2e:	d417      	bmi.n	8005c60 <_malloc_r+0x8c>
 8005c30:	2b0b      	cmp	r3, #11
 8005c32:	d903      	bls.n	8005c3c <_malloc_r+0x68>
 8005c34:	6023      	str	r3, [r4, #0]
 8005c36:	441c      	add	r4, r3
 8005c38:	6025      	str	r5, [r4, #0]
 8005c3a:	e004      	b.n	8005c46 <_malloc_r+0x72>
 8005c3c:	6863      	ldr	r3, [r4, #4]
 8005c3e:	42a2      	cmp	r2, r4
 8005c40:	bf0c      	ite	eq
 8005c42:	600b      	streq	r3, [r1, #0]
 8005c44:	6053      	strne	r3, [r2, #4]
 8005c46:	4630      	mov	r0, r6
 8005c48:	f001 fa38 	bl	80070bc <__malloc_unlock>
 8005c4c:	f104 000b 	add.w	r0, r4, #11
 8005c50:	1d23      	adds	r3, r4, #4
 8005c52:	f020 0007 	bic.w	r0, r0, #7
 8005c56:	1ac2      	subs	r2, r0, r3
 8005c58:	d0cc      	beq.n	8005bf4 <_malloc_r+0x20>
 8005c5a:	1a1b      	subs	r3, r3, r0
 8005c5c:	50a3      	str	r3, [r4, r2]
 8005c5e:	e7c9      	b.n	8005bf4 <_malloc_r+0x20>
 8005c60:	4622      	mov	r2, r4
 8005c62:	6864      	ldr	r4, [r4, #4]
 8005c64:	e7cc      	b.n	8005c00 <_malloc_r+0x2c>
 8005c66:	1cc4      	adds	r4, r0, #3
 8005c68:	f024 0403 	bic.w	r4, r4, #3
 8005c6c:	42a0      	cmp	r0, r4
 8005c6e:	d0e3      	beq.n	8005c38 <_malloc_r+0x64>
 8005c70:	1a21      	subs	r1, r4, r0
 8005c72:	4630      	mov	r0, r6
 8005c74:	f000 fea2 	bl	80069bc <_sbrk_r>
 8005c78:	3001      	adds	r0, #1
 8005c7a:	d1dd      	bne.n	8005c38 <_malloc_r+0x64>
 8005c7c:	e7cf      	b.n	8005c1e <_malloc_r+0x4a>
 8005c7e:	bf00      	nop
 8005c80:	200049a4 	.word	0x200049a4
 8005c84:	200049a8 	.word	0x200049a8

08005c88 <__sfputc_r>:
 8005c88:	6893      	ldr	r3, [r2, #8]
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	b410      	push	{r4}
 8005c90:	6093      	str	r3, [r2, #8]
 8005c92:	da08      	bge.n	8005ca6 <__sfputc_r+0x1e>
 8005c94:	6994      	ldr	r4, [r2, #24]
 8005c96:	42a3      	cmp	r3, r4
 8005c98:	db01      	blt.n	8005c9e <__sfputc_r+0x16>
 8005c9a:	290a      	cmp	r1, #10
 8005c9c:	d103      	bne.n	8005ca6 <__sfputc_r+0x1e>
 8005c9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ca2:	f001 b8ef 	b.w	8006e84 <__swbuf_r>
 8005ca6:	6813      	ldr	r3, [r2, #0]
 8005ca8:	1c58      	adds	r0, r3, #1
 8005caa:	6010      	str	r0, [r2, #0]
 8005cac:	7019      	strb	r1, [r3, #0]
 8005cae:	4608      	mov	r0, r1
 8005cb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005cb4:	4770      	bx	lr

08005cb6 <__sfputs_r>:
 8005cb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cb8:	4606      	mov	r6, r0
 8005cba:	460f      	mov	r7, r1
 8005cbc:	4614      	mov	r4, r2
 8005cbe:	18d5      	adds	r5, r2, r3
 8005cc0:	42ac      	cmp	r4, r5
 8005cc2:	d101      	bne.n	8005cc8 <__sfputs_r+0x12>
 8005cc4:	2000      	movs	r0, #0
 8005cc6:	e007      	b.n	8005cd8 <__sfputs_r+0x22>
 8005cc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ccc:	463a      	mov	r2, r7
 8005cce:	4630      	mov	r0, r6
 8005cd0:	f7ff ffda 	bl	8005c88 <__sfputc_r>
 8005cd4:	1c43      	adds	r3, r0, #1
 8005cd6:	d1f3      	bne.n	8005cc0 <__sfputs_r+0xa>
 8005cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005cdc <_vfiprintf_r>:
 8005cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ce0:	460d      	mov	r5, r1
 8005ce2:	b09d      	sub	sp, #116	; 0x74
 8005ce4:	4614      	mov	r4, r2
 8005ce6:	4698      	mov	r8, r3
 8005ce8:	4606      	mov	r6, r0
 8005cea:	b118      	cbz	r0, 8005cf4 <_vfiprintf_r+0x18>
 8005cec:	6983      	ldr	r3, [r0, #24]
 8005cee:	b90b      	cbnz	r3, 8005cf4 <_vfiprintf_r+0x18>
 8005cf0:	f7ff fdf6 	bl	80058e0 <__sinit>
 8005cf4:	4b89      	ldr	r3, [pc, #548]	; (8005f1c <_vfiprintf_r+0x240>)
 8005cf6:	429d      	cmp	r5, r3
 8005cf8:	d11b      	bne.n	8005d32 <_vfiprintf_r+0x56>
 8005cfa:	6875      	ldr	r5, [r6, #4]
 8005cfc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005cfe:	07d9      	lsls	r1, r3, #31
 8005d00:	d405      	bmi.n	8005d0e <_vfiprintf_r+0x32>
 8005d02:	89ab      	ldrh	r3, [r5, #12]
 8005d04:	059a      	lsls	r2, r3, #22
 8005d06:	d402      	bmi.n	8005d0e <_vfiprintf_r+0x32>
 8005d08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d0a:	f7ff fea4 	bl	8005a56 <__retarget_lock_acquire_recursive>
 8005d0e:	89ab      	ldrh	r3, [r5, #12]
 8005d10:	071b      	lsls	r3, r3, #28
 8005d12:	d501      	bpl.n	8005d18 <_vfiprintf_r+0x3c>
 8005d14:	692b      	ldr	r3, [r5, #16]
 8005d16:	b9eb      	cbnz	r3, 8005d54 <_vfiprintf_r+0x78>
 8005d18:	4629      	mov	r1, r5
 8005d1a:	4630      	mov	r0, r6
 8005d1c:	f001 f916 	bl	8006f4c <__swsetup_r>
 8005d20:	b1c0      	cbz	r0, 8005d54 <_vfiprintf_r+0x78>
 8005d22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d24:	07dc      	lsls	r4, r3, #31
 8005d26:	d50e      	bpl.n	8005d46 <_vfiprintf_r+0x6a>
 8005d28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d2c:	b01d      	add	sp, #116	; 0x74
 8005d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d32:	4b7b      	ldr	r3, [pc, #492]	; (8005f20 <_vfiprintf_r+0x244>)
 8005d34:	429d      	cmp	r5, r3
 8005d36:	d101      	bne.n	8005d3c <_vfiprintf_r+0x60>
 8005d38:	68b5      	ldr	r5, [r6, #8]
 8005d3a:	e7df      	b.n	8005cfc <_vfiprintf_r+0x20>
 8005d3c:	4b79      	ldr	r3, [pc, #484]	; (8005f24 <_vfiprintf_r+0x248>)
 8005d3e:	429d      	cmp	r5, r3
 8005d40:	bf08      	it	eq
 8005d42:	68f5      	ldreq	r5, [r6, #12]
 8005d44:	e7da      	b.n	8005cfc <_vfiprintf_r+0x20>
 8005d46:	89ab      	ldrh	r3, [r5, #12]
 8005d48:	0598      	lsls	r0, r3, #22
 8005d4a:	d4ed      	bmi.n	8005d28 <_vfiprintf_r+0x4c>
 8005d4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d4e:	f7ff fe83 	bl	8005a58 <__retarget_lock_release_recursive>
 8005d52:	e7e9      	b.n	8005d28 <_vfiprintf_r+0x4c>
 8005d54:	2300      	movs	r3, #0
 8005d56:	9309      	str	r3, [sp, #36]	; 0x24
 8005d58:	2320      	movs	r3, #32
 8005d5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d62:	2330      	movs	r3, #48	; 0x30
 8005d64:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005f28 <_vfiprintf_r+0x24c>
 8005d68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d6c:	f04f 0901 	mov.w	r9, #1
 8005d70:	4623      	mov	r3, r4
 8005d72:	469a      	mov	sl, r3
 8005d74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d78:	b10a      	cbz	r2, 8005d7e <_vfiprintf_r+0xa2>
 8005d7a:	2a25      	cmp	r2, #37	; 0x25
 8005d7c:	d1f9      	bne.n	8005d72 <_vfiprintf_r+0x96>
 8005d7e:	ebba 0b04 	subs.w	fp, sl, r4
 8005d82:	d00b      	beq.n	8005d9c <_vfiprintf_r+0xc0>
 8005d84:	465b      	mov	r3, fp
 8005d86:	4622      	mov	r2, r4
 8005d88:	4629      	mov	r1, r5
 8005d8a:	4630      	mov	r0, r6
 8005d8c:	f7ff ff93 	bl	8005cb6 <__sfputs_r>
 8005d90:	3001      	adds	r0, #1
 8005d92:	f000 80aa 	beq.w	8005eea <_vfiprintf_r+0x20e>
 8005d96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d98:	445a      	add	r2, fp
 8005d9a:	9209      	str	r2, [sp, #36]	; 0x24
 8005d9c:	f89a 3000 	ldrb.w	r3, [sl]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f000 80a2 	beq.w	8005eea <_vfiprintf_r+0x20e>
 8005da6:	2300      	movs	r3, #0
 8005da8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005dac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005db0:	f10a 0a01 	add.w	sl, sl, #1
 8005db4:	9304      	str	r3, [sp, #16]
 8005db6:	9307      	str	r3, [sp, #28]
 8005db8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005dbc:	931a      	str	r3, [sp, #104]	; 0x68
 8005dbe:	4654      	mov	r4, sl
 8005dc0:	2205      	movs	r2, #5
 8005dc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dc6:	4858      	ldr	r0, [pc, #352]	; (8005f28 <_vfiprintf_r+0x24c>)
 8005dc8:	f7fa fa0a 	bl	80001e0 <memchr>
 8005dcc:	9a04      	ldr	r2, [sp, #16]
 8005dce:	b9d8      	cbnz	r0, 8005e08 <_vfiprintf_r+0x12c>
 8005dd0:	06d1      	lsls	r1, r2, #27
 8005dd2:	bf44      	itt	mi
 8005dd4:	2320      	movmi	r3, #32
 8005dd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005dda:	0713      	lsls	r3, r2, #28
 8005ddc:	bf44      	itt	mi
 8005dde:	232b      	movmi	r3, #43	; 0x2b
 8005de0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005de4:	f89a 3000 	ldrb.w	r3, [sl]
 8005de8:	2b2a      	cmp	r3, #42	; 0x2a
 8005dea:	d015      	beq.n	8005e18 <_vfiprintf_r+0x13c>
 8005dec:	9a07      	ldr	r2, [sp, #28]
 8005dee:	4654      	mov	r4, sl
 8005df0:	2000      	movs	r0, #0
 8005df2:	f04f 0c0a 	mov.w	ip, #10
 8005df6:	4621      	mov	r1, r4
 8005df8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005dfc:	3b30      	subs	r3, #48	; 0x30
 8005dfe:	2b09      	cmp	r3, #9
 8005e00:	d94e      	bls.n	8005ea0 <_vfiprintf_r+0x1c4>
 8005e02:	b1b0      	cbz	r0, 8005e32 <_vfiprintf_r+0x156>
 8005e04:	9207      	str	r2, [sp, #28]
 8005e06:	e014      	b.n	8005e32 <_vfiprintf_r+0x156>
 8005e08:	eba0 0308 	sub.w	r3, r0, r8
 8005e0c:	fa09 f303 	lsl.w	r3, r9, r3
 8005e10:	4313      	orrs	r3, r2
 8005e12:	9304      	str	r3, [sp, #16]
 8005e14:	46a2      	mov	sl, r4
 8005e16:	e7d2      	b.n	8005dbe <_vfiprintf_r+0xe2>
 8005e18:	9b03      	ldr	r3, [sp, #12]
 8005e1a:	1d19      	adds	r1, r3, #4
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	9103      	str	r1, [sp, #12]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	bfbb      	ittet	lt
 8005e24:	425b      	neglt	r3, r3
 8005e26:	f042 0202 	orrlt.w	r2, r2, #2
 8005e2a:	9307      	strge	r3, [sp, #28]
 8005e2c:	9307      	strlt	r3, [sp, #28]
 8005e2e:	bfb8      	it	lt
 8005e30:	9204      	strlt	r2, [sp, #16]
 8005e32:	7823      	ldrb	r3, [r4, #0]
 8005e34:	2b2e      	cmp	r3, #46	; 0x2e
 8005e36:	d10c      	bne.n	8005e52 <_vfiprintf_r+0x176>
 8005e38:	7863      	ldrb	r3, [r4, #1]
 8005e3a:	2b2a      	cmp	r3, #42	; 0x2a
 8005e3c:	d135      	bne.n	8005eaa <_vfiprintf_r+0x1ce>
 8005e3e:	9b03      	ldr	r3, [sp, #12]
 8005e40:	1d1a      	adds	r2, r3, #4
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	9203      	str	r2, [sp, #12]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	bfb8      	it	lt
 8005e4a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005e4e:	3402      	adds	r4, #2
 8005e50:	9305      	str	r3, [sp, #20]
 8005e52:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005f38 <_vfiprintf_r+0x25c>
 8005e56:	7821      	ldrb	r1, [r4, #0]
 8005e58:	2203      	movs	r2, #3
 8005e5a:	4650      	mov	r0, sl
 8005e5c:	f7fa f9c0 	bl	80001e0 <memchr>
 8005e60:	b140      	cbz	r0, 8005e74 <_vfiprintf_r+0x198>
 8005e62:	2340      	movs	r3, #64	; 0x40
 8005e64:	eba0 000a 	sub.w	r0, r0, sl
 8005e68:	fa03 f000 	lsl.w	r0, r3, r0
 8005e6c:	9b04      	ldr	r3, [sp, #16]
 8005e6e:	4303      	orrs	r3, r0
 8005e70:	3401      	adds	r4, #1
 8005e72:	9304      	str	r3, [sp, #16]
 8005e74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e78:	482c      	ldr	r0, [pc, #176]	; (8005f2c <_vfiprintf_r+0x250>)
 8005e7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e7e:	2206      	movs	r2, #6
 8005e80:	f7fa f9ae 	bl	80001e0 <memchr>
 8005e84:	2800      	cmp	r0, #0
 8005e86:	d03f      	beq.n	8005f08 <_vfiprintf_r+0x22c>
 8005e88:	4b29      	ldr	r3, [pc, #164]	; (8005f30 <_vfiprintf_r+0x254>)
 8005e8a:	bb1b      	cbnz	r3, 8005ed4 <_vfiprintf_r+0x1f8>
 8005e8c:	9b03      	ldr	r3, [sp, #12]
 8005e8e:	3307      	adds	r3, #7
 8005e90:	f023 0307 	bic.w	r3, r3, #7
 8005e94:	3308      	adds	r3, #8
 8005e96:	9303      	str	r3, [sp, #12]
 8005e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e9a:	443b      	add	r3, r7
 8005e9c:	9309      	str	r3, [sp, #36]	; 0x24
 8005e9e:	e767      	b.n	8005d70 <_vfiprintf_r+0x94>
 8005ea0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ea4:	460c      	mov	r4, r1
 8005ea6:	2001      	movs	r0, #1
 8005ea8:	e7a5      	b.n	8005df6 <_vfiprintf_r+0x11a>
 8005eaa:	2300      	movs	r3, #0
 8005eac:	3401      	adds	r4, #1
 8005eae:	9305      	str	r3, [sp, #20]
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	f04f 0c0a 	mov.w	ip, #10
 8005eb6:	4620      	mov	r0, r4
 8005eb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ebc:	3a30      	subs	r2, #48	; 0x30
 8005ebe:	2a09      	cmp	r2, #9
 8005ec0:	d903      	bls.n	8005eca <_vfiprintf_r+0x1ee>
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d0c5      	beq.n	8005e52 <_vfiprintf_r+0x176>
 8005ec6:	9105      	str	r1, [sp, #20]
 8005ec8:	e7c3      	b.n	8005e52 <_vfiprintf_r+0x176>
 8005eca:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ece:	4604      	mov	r4, r0
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e7f0      	b.n	8005eb6 <_vfiprintf_r+0x1da>
 8005ed4:	ab03      	add	r3, sp, #12
 8005ed6:	9300      	str	r3, [sp, #0]
 8005ed8:	462a      	mov	r2, r5
 8005eda:	4b16      	ldr	r3, [pc, #88]	; (8005f34 <_vfiprintf_r+0x258>)
 8005edc:	a904      	add	r1, sp, #16
 8005ede:	4630      	mov	r0, r6
 8005ee0:	f3af 8000 	nop.w
 8005ee4:	4607      	mov	r7, r0
 8005ee6:	1c78      	adds	r0, r7, #1
 8005ee8:	d1d6      	bne.n	8005e98 <_vfiprintf_r+0x1bc>
 8005eea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005eec:	07d9      	lsls	r1, r3, #31
 8005eee:	d405      	bmi.n	8005efc <_vfiprintf_r+0x220>
 8005ef0:	89ab      	ldrh	r3, [r5, #12]
 8005ef2:	059a      	lsls	r2, r3, #22
 8005ef4:	d402      	bmi.n	8005efc <_vfiprintf_r+0x220>
 8005ef6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ef8:	f7ff fdae 	bl	8005a58 <__retarget_lock_release_recursive>
 8005efc:	89ab      	ldrh	r3, [r5, #12]
 8005efe:	065b      	lsls	r3, r3, #25
 8005f00:	f53f af12 	bmi.w	8005d28 <_vfiprintf_r+0x4c>
 8005f04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f06:	e711      	b.n	8005d2c <_vfiprintf_r+0x50>
 8005f08:	ab03      	add	r3, sp, #12
 8005f0a:	9300      	str	r3, [sp, #0]
 8005f0c:	462a      	mov	r2, r5
 8005f0e:	4b09      	ldr	r3, [pc, #36]	; (8005f34 <_vfiprintf_r+0x258>)
 8005f10:	a904      	add	r1, sp, #16
 8005f12:	4630      	mov	r0, r6
 8005f14:	f000 f880 	bl	8006018 <_printf_i>
 8005f18:	e7e4      	b.n	8005ee4 <_vfiprintf_r+0x208>
 8005f1a:	bf00      	nop
 8005f1c:	08007250 	.word	0x08007250
 8005f20:	08007270 	.word	0x08007270
 8005f24:	08007230 	.word	0x08007230
 8005f28:	08007290 	.word	0x08007290
 8005f2c:	0800729a 	.word	0x0800729a
 8005f30:	00000000 	.word	0x00000000
 8005f34:	08005cb7 	.word	0x08005cb7
 8005f38:	08007296 	.word	0x08007296

08005f3c <_printf_common>:
 8005f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f40:	4616      	mov	r6, r2
 8005f42:	4699      	mov	r9, r3
 8005f44:	688a      	ldr	r2, [r1, #8]
 8005f46:	690b      	ldr	r3, [r1, #16]
 8005f48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	bfb8      	it	lt
 8005f50:	4613      	movlt	r3, r2
 8005f52:	6033      	str	r3, [r6, #0]
 8005f54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f58:	4607      	mov	r7, r0
 8005f5a:	460c      	mov	r4, r1
 8005f5c:	b10a      	cbz	r2, 8005f62 <_printf_common+0x26>
 8005f5e:	3301      	adds	r3, #1
 8005f60:	6033      	str	r3, [r6, #0]
 8005f62:	6823      	ldr	r3, [r4, #0]
 8005f64:	0699      	lsls	r1, r3, #26
 8005f66:	bf42      	ittt	mi
 8005f68:	6833      	ldrmi	r3, [r6, #0]
 8005f6a:	3302      	addmi	r3, #2
 8005f6c:	6033      	strmi	r3, [r6, #0]
 8005f6e:	6825      	ldr	r5, [r4, #0]
 8005f70:	f015 0506 	ands.w	r5, r5, #6
 8005f74:	d106      	bne.n	8005f84 <_printf_common+0x48>
 8005f76:	f104 0a19 	add.w	sl, r4, #25
 8005f7a:	68e3      	ldr	r3, [r4, #12]
 8005f7c:	6832      	ldr	r2, [r6, #0]
 8005f7e:	1a9b      	subs	r3, r3, r2
 8005f80:	42ab      	cmp	r3, r5
 8005f82:	dc26      	bgt.n	8005fd2 <_printf_common+0x96>
 8005f84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f88:	1e13      	subs	r3, r2, #0
 8005f8a:	6822      	ldr	r2, [r4, #0]
 8005f8c:	bf18      	it	ne
 8005f8e:	2301      	movne	r3, #1
 8005f90:	0692      	lsls	r2, r2, #26
 8005f92:	d42b      	bmi.n	8005fec <_printf_common+0xb0>
 8005f94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f98:	4649      	mov	r1, r9
 8005f9a:	4638      	mov	r0, r7
 8005f9c:	47c0      	blx	r8
 8005f9e:	3001      	adds	r0, #1
 8005fa0:	d01e      	beq.n	8005fe0 <_printf_common+0xa4>
 8005fa2:	6823      	ldr	r3, [r4, #0]
 8005fa4:	68e5      	ldr	r5, [r4, #12]
 8005fa6:	6832      	ldr	r2, [r6, #0]
 8005fa8:	f003 0306 	and.w	r3, r3, #6
 8005fac:	2b04      	cmp	r3, #4
 8005fae:	bf08      	it	eq
 8005fb0:	1aad      	subeq	r5, r5, r2
 8005fb2:	68a3      	ldr	r3, [r4, #8]
 8005fb4:	6922      	ldr	r2, [r4, #16]
 8005fb6:	bf0c      	ite	eq
 8005fb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fbc:	2500      	movne	r5, #0
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	bfc4      	itt	gt
 8005fc2:	1a9b      	subgt	r3, r3, r2
 8005fc4:	18ed      	addgt	r5, r5, r3
 8005fc6:	2600      	movs	r6, #0
 8005fc8:	341a      	adds	r4, #26
 8005fca:	42b5      	cmp	r5, r6
 8005fcc:	d11a      	bne.n	8006004 <_printf_common+0xc8>
 8005fce:	2000      	movs	r0, #0
 8005fd0:	e008      	b.n	8005fe4 <_printf_common+0xa8>
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	4652      	mov	r2, sl
 8005fd6:	4649      	mov	r1, r9
 8005fd8:	4638      	mov	r0, r7
 8005fda:	47c0      	blx	r8
 8005fdc:	3001      	adds	r0, #1
 8005fde:	d103      	bne.n	8005fe8 <_printf_common+0xac>
 8005fe0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fe8:	3501      	adds	r5, #1
 8005fea:	e7c6      	b.n	8005f7a <_printf_common+0x3e>
 8005fec:	18e1      	adds	r1, r4, r3
 8005fee:	1c5a      	adds	r2, r3, #1
 8005ff0:	2030      	movs	r0, #48	; 0x30
 8005ff2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ff6:	4422      	add	r2, r4
 8005ff8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ffc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006000:	3302      	adds	r3, #2
 8006002:	e7c7      	b.n	8005f94 <_printf_common+0x58>
 8006004:	2301      	movs	r3, #1
 8006006:	4622      	mov	r2, r4
 8006008:	4649      	mov	r1, r9
 800600a:	4638      	mov	r0, r7
 800600c:	47c0      	blx	r8
 800600e:	3001      	adds	r0, #1
 8006010:	d0e6      	beq.n	8005fe0 <_printf_common+0xa4>
 8006012:	3601      	adds	r6, #1
 8006014:	e7d9      	b.n	8005fca <_printf_common+0x8e>
	...

08006018 <_printf_i>:
 8006018:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800601c:	460c      	mov	r4, r1
 800601e:	4691      	mov	r9, r2
 8006020:	7e27      	ldrb	r7, [r4, #24]
 8006022:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006024:	2f78      	cmp	r7, #120	; 0x78
 8006026:	4680      	mov	r8, r0
 8006028:	469a      	mov	sl, r3
 800602a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800602e:	d807      	bhi.n	8006040 <_printf_i+0x28>
 8006030:	2f62      	cmp	r7, #98	; 0x62
 8006032:	d80a      	bhi.n	800604a <_printf_i+0x32>
 8006034:	2f00      	cmp	r7, #0
 8006036:	f000 80d8 	beq.w	80061ea <_printf_i+0x1d2>
 800603a:	2f58      	cmp	r7, #88	; 0x58
 800603c:	f000 80a3 	beq.w	8006186 <_printf_i+0x16e>
 8006040:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006044:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006048:	e03a      	b.n	80060c0 <_printf_i+0xa8>
 800604a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800604e:	2b15      	cmp	r3, #21
 8006050:	d8f6      	bhi.n	8006040 <_printf_i+0x28>
 8006052:	a001      	add	r0, pc, #4	; (adr r0, 8006058 <_printf_i+0x40>)
 8006054:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006058:	080060b1 	.word	0x080060b1
 800605c:	080060c5 	.word	0x080060c5
 8006060:	08006041 	.word	0x08006041
 8006064:	08006041 	.word	0x08006041
 8006068:	08006041 	.word	0x08006041
 800606c:	08006041 	.word	0x08006041
 8006070:	080060c5 	.word	0x080060c5
 8006074:	08006041 	.word	0x08006041
 8006078:	08006041 	.word	0x08006041
 800607c:	08006041 	.word	0x08006041
 8006080:	08006041 	.word	0x08006041
 8006084:	080061d1 	.word	0x080061d1
 8006088:	080060f5 	.word	0x080060f5
 800608c:	080061b3 	.word	0x080061b3
 8006090:	08006041 	.word	0x08006041
 8006094:	08006041 	.word	0x08006041
 8006098:	080061f3 	.word	0x080061f3
 800609c:	08006041 	.word	0x08006041
 80060a0:	080060f5 	.word	0x080060f5
 80060a4:	08006041 	.word	0x08006041
 80060a8:	08006041 	.word	0x08006041
 80060ac:	080061bb 	.word	0x080061bb
 80060b0:	680b      	ldr	r3, [r1, #0]
 80060b2:	1d1a      	adds	r2, r3, #4
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	600a      	str	r2, [r1, #0]
 80060b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80060bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80060c0:	2301      	movs	r3, #1
 80060c2:	e0a3      	b.n	800620c <_printf_i+0x1f4>
 80060c4:	6825      	ldr	r5, [r4, #0]
 80060c6:	6808      	ldr	r0, [r1, #0]
 80060c8:	062e      	lsls	r6, r5, #24
 80060ca:	f100 0304 	add.w	r3, r0, #4
 80060ce:	d50a      	bpl.n	80060e6 <_printf_i+0xce>
 80060d0:	6805      	ldr	r5, [r0, #0]
 80060d2:	600b      	str	r3, [r1, #0]
 80060d4:	2d00      	cmp	r5, #0
 80060d6:	da03      	bge.n	80060e0 <_printf_i+0xc8>
 80060d8:	232d      	movs	r3, #45	; 0x2d
 80060da:	426d      	negs	r5, r5
 80060dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060e0:	485e      	ldr	r0, [pc, #376]	; (800625c <_printf_i+0x244>)
 80060e2:	230a      	movs	r3, #10
 80060e4:	e019      	b.n	800611a <_printf_i+0x102>
 80060e6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80060ea:	6805      	ldr	r5, [r0, #0]
 80060ec:	600b      	str	r3, [r1, #0]
 80060ee:	bf18      	it	ne
 80060f0:	b22d      	sxthne	r5, r5
 80060f2:	e7ef      	b.n	80060d4 <_printf_i+0xbc>
 80060f4:	680b      	ldr	r3, [r1, #0]
 80060f6:	6825      	ldr	r5, [r4, #0]
 80060f8:	1d18      	adds	r0, r3, #4
 80060fa:	6008      	str	r0, [r1, #0]
 80060fc:	0628      	lsls	r0, r5, #24
 80060fe:	d501      	bpl.n	8006104 <_printf_i+0xec>
 8006100:	681d      	ldr	r5, [r3, #0]
 8006102:	e002      	b.n	800610a <_printf_i+0xf2>
 8006104:	0669      	lsls	r1, r5, #25
 8006106:	d5fb      	bpl.n	8006100 <_printf_i+0xe8>
 8006108:	881d      	ldrh	r5, [r3, #0]
 800610a:	4854      	ldr	r0, [pc, #336]	; (800625c <_printf_i+0x244>)
 800610c:	2f6f      	cmp	r7, #111	; 0x6f
 800610e:	bf0c      	ite	eq
 8006110:	2308      	moveq	r3, #8
 8006112:	230a      	movne	r3, #10
 8006114:	2100      	movs	r1, #0
 8006116:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800611a:	6866      	ldr	r6, [r4, #4]
 800611c:	60a6      	str	r6, [r4, #8]
 800611e:	2e00      	cmp	r6, #0
 8006120:	bfa2      	ittt	ge
 8006122:	6821      	ldrge	r1, [r4, #0]
 8006124:	f021 0104 	bicge.w	r1, r1, #4
 8006128:	6021      	strge	r1, [r4, #0]
 800612a:	b90d      	cbnz	r5, 8006130 <_printf_i+0x118>
 800612c:	2e00      	cmp	r6, #0
 800612e:	d04d      	beq.n	80061cc <_printf_i+0x1b4>
 8006130:	4616      	mov	r6, r2
 8006132:	fbb5 f1f3 	udiv	r1, r5, r3
 8006136:	fb03 5711 	mls	r7, r3, r1, r5
 800613a:	5dc7      	ldrb	r7, [r0, r7]
 800613c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006140:	462f      	mov	r7, r5
 8006142:	42bb      	cmp	r3, r7
 8006144:	460d      	mov	r5, r1
 8006146:	d9f4      	bls.n	8006132 <_printf_i+0x11a>
 8006148:	2b08      	cmp	r3, #8
 800614a:	d10b      	bne.n	8006164 <_printf_i+0x14c>
 800614c:	6823      	ldr	r3, [r4, #0]
 800614e:	07df      	lsls	r7, r3, #31
 8006150:	d508      	bpl.n	8006164 <_printf_i+0x14c>
 8006152:	6923      	ldr	r3, [r4, #16]
 8006154:	6861      	ldr	r1, [r4, #4]
 8006156:	4299      	cmp	r1, r3
 8006158:	bfde      	ittt	le
 800615a:	2330      	movle	r3, #48	; 0x30
 800615c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006160:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006164:	1b92      	subs	r2, r2, r6
 8006166:	6122      	str	r2, [r4, #16]
 8006168:	f8cd a000 	str.w	sl, [sp]
 800616c:	464b      	mov	r3, r9
 800616e:	aa03      	add	r2, sp, #12
 8006170:	4621      	mov	r1, r4
 8006172:	4640      	mov	r0, r8
 8006174:	f7ff fee2 	bl	8005f3c <_printf_common>
 8006178:	3001      	adds	r0, #1
 800617a:	d14c      	bne.n	8006216 <_printf_i+0x1fe>
 800617c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006180:	b004      	add	sp, #16
 8006182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006186:	4835      	ldr	r0, [pc, #212]	; (800625c <_printf_i+0x244>)
 8006188:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800618c:	6823      	ldr	r3, [r4, #0]
 800618e:	680e      	ldr	r6, [r1, #0]
 8006190:	061f      	lsls	r7, r3, #24
 8006192:	f856 5b04 	ldr.w	r5, [r6], #4
 8006196:	600e      	str	r6, [r1, #0]
 8006198:	d514      	bpl.n	80061c4 <_printf_i+0x1ac>
 800619a:	07d9      	lsls	r1, r3, #31
 800619c:	bf44      	itt	mi
 800619e:	f043 0320 	orrmi.w	r3, r3, #32
 80061a2:	6023      	strmi	r3, [r4, #0]
 80061a4:	b91d      	cbnz	r5, 80061ae <_printf_i+0x196>
 80061a6:	6823      	ldr	r3, [r4, #0]
 80061a8:	f023 0320 	bic.w	r3, r3, #32
 80061ac:	6023      	str	r3, [r4, #0]
 80061ae:	2310      	movs	r3, #16
 80061b0:	e7b0      	b.n	8006114 <_printf_i+0xfc>
 80061b2:	6823      	ldr	r3, [r4, #0]
 80061b4:	f043 0320 	orr.w	r3, r3, #32
 80061b8:	6023      	str	r3, [r4, #0]
 80061ba:	2378      	movs	r3, #120	; 0x78
 80061bc:	4828      	ldr	r0, [pc, #160]	; (8006260 <_printf_i+0x248>)
 80061be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80061c2:	e7e3      	b.n	800618c <_printf_i+0x174>
 80061c4:	065e      	lsls	r6, r3, #25
 80061c6:	bf48      	it	mi
 80061c8:	b2ad      	uxthmi	r5, r5
 80061ca:	e7e6      	b.n	800619a <_printf_i+0x182>
 80061cc:	4616      	mov	r6, r2
 80061ce:	e7bb      	b.n	8006148 <_printf_i+0x130>
 80061d0:	680b      	ldr	r3, [r1, #0]
 80061d2:	6826      	ldr	r6, [r4, #0]
 80061d4:	6960      	ldr	r0, [r4, #20]
 80061d6:	1d1d      	adds	r5, r3, #4
 80061d8:	600d      	str	r5, [r1, #0]
 80061da:	0635      	lsls	r5, r6, #24
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	d501      	bpl.n	80061e4 <_printf_i+0x1cc>
 80061e0:	6018      	str	r0, [r3, #0]
 80061e2:	e002      	b.n	80061ea <_printf_i+0x1d2>
 80061e4:	0671      	lsls	r1, r6, #25
 80061e6:	d5fb      	bpl.n	80061e0 <_printf_i+0x1c8>
 80061e8:	8018      	strh	r0, [r3, #0]
 80061ea:	2300      	movs	r3, #0
 80061ec:	6123      	str	r3, [r4, #16]
 80061ee:	4616      	mov	r6, r2
 80061f0:	e7ba      	b.n	8006168 <_printf_i+0x150>
 80061f2:	680b      	ldr	r3, [r1, #0]
 80061f4:	1d1a      	adds	r2, r3, #4
 80061f6:	600a      	str	r2, [r1, #0]
 80061f8:	681e      	ldr	r6, [r3, #0]
 80061fa:	6862      	ldr	r2, [r4, #4]
 80061fc:	2100      	movs	r1, #0
 80061fe:	4630      	mov	r0, r6
 8006200:	f7f9 ffee 	bl	80001e0 <memchr>
 8006204:	b108      	cbz	r0, 800620a <_printf_i+0x1f2>
 8006206:	1b80      	subs	r0, r0, r6
 8006208:	6060      	str	r0, [r4, #4]
 800620a:	6863      	ldr	r3, [r4, #4]
 800620c:	6123      	str	r3, [r4, #16]
 800620e:	2300      	movs	r3, #0
 8006210:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006214:	e7a8      	b.n	8006168 <_printf_i+0x150>
 8006216:	6923      	ldr	r3, [r4, #16]
 8006218:	4632      	mov	r2, r6
 800621a:	4649      	mov	r1, r9
 800621c:	4640      	mov	r0, r8
 800621e:	47d0      	blx	sl
 8006220:	3001      	adds	r0, #1
 8006222:	d0ab      	beq.n	800617c <_printf_i+0x164>
 8006224:	6823      	ldr	r3, [r4, #0]
 8006226:	079b      	lsls	r3, r3, #30
 8006228:	d413      	bmi.n	8006252 <_printf_i+0x23a>
 800622a:	68e0      	ldr	r0, [r4, #12]
 800622c:	9b03      	ldr	r3, [sp, #12]
 800622e:	4298      	cmp	r0, r3
 8006230:	bfb8      	it	lt
 8006232:	4618      	movlt	r0, r3
 8006234:	e7a4      	b.n	8006180 <_printf_i+0x168>
 8006236:	2301      	movs	r3, #1
 8006238:	4632      	mov	r2, r6
 800623a:	4649      	mov	r1, r9
 800623c:	4640      	mov	r0, r8
 800623e:	47d0      	blx	sl
 8006240:	3001      	adds	r0, #1
 8006242:	d09b      	beq.n	800617c <_printf_i+0x164>
 8006244:	3501      	adds	r5, #1
 8006246:	68e3      	ldr	r3, [r4, #12]
 8006248:	9903      	ldr	r1, [sp, #12]
 800624a:	1a5b      	subs	r3, r3, r1
 800624c:	42ab      	cmp	r3, r5
 800624e:	dcf2      	bgt.n	8006236 <_printf_i+0x21e>
 8006250:	e7eb      	b.n	800622a <_printf_i+0x212>
 8006252:	2500      	movs	r5, #0
 8006254:	f104 0619 	add.w	r6, r4, #25
 8006258:	e7f5      	b.n	8006246 <_printf_i+0x22e>
 800625a:	bf00      	nop
 800625c:	080072a1 	.word	0x080072a1
 8006260:	080072b2 	.word	0x080072b2

08006264 <__svfiscanf_r>:
 8006264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006268:	461d      	mov	r5, r3
 800626a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800626c:	07df      	lsls	r7, r3, #31
 800626e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8006272:	4606      	mov	r6, r0
 8006274:	460c      	mov	r4, r1
 8006276:	4692      	mov	sl, r2
 8006278:	d405      	bmi.n	8006286 <__svfiscanf_r+0x22>
 800627a:	898b      	ldrh	r3, [r1, #12]
 800627c:	0598      	lsls	r0, r3, #22
 800627e:	d402      	bmi.n	8006286 <__svfiscanf_r+0x22>
 8006280:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8006282:	f7ff fbe8 	bl	8005a56 <__retarget_lock_acquire_recursive>
 8006286:	2300      	movs	r3, #0
 8006288:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 800628c:	4bae      	ldr	r3, [pc, #696]	; (8006548 <__svfiscanf_r+0x2e4>)
 800628e:	93a0      	str	r3, [sp, #640]	; 0x280
 8006290:	f10d 0804 	add.w	r8, sp, #4
 8006294:	4bad      	ldr	r3, [pc, #692]	; (800654c <__svfiscanf_r+0x2e8>)
 8006296:	4fae      	ldr	r7, [pc, #696]	; (8006550 <__svfiscanf_r+0x2ec>)
 8006298:	f8df 92b8 	ldr.w	r9, [pc, #696]	; 8006554 <__svfiscanf_r+0x2f0>
 800629c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80062a0:	93a1      	str	r3, [sp, #644]	; 0x284
 80062a2:	9500      	str	r5, [sp, #0]
 80062a4:	f89a b000 	ldrb.w	fp, [sl]
 80062a8:	f1bb 0f00 	cmp.w	fp, #0
 80062ac:	f000 8170 	beq.w	8006590 <__svfiscanf_r+0x32c>
 80062b0:	f81b 3007 	ldrb.w	r3, [fp, r7]
 80062b4:	f013 0308 	ands.w	r3, r3, #8
 80062b8:	f10a 0501 	add.w	r5, sl, #1
 80062bc:	d019      	beq.n	80062f2 <__svfiscanf_r+0x8e>
 80062be:	6863      	ldr	r3, [r4, #4]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	dd0f      	ble.n	80062e4 <__svfiscanf_r+0x80>
 80062c4:	6823      	ldr	r3, [r4, #0]
 80062c6:	781a      	ldrb	r2, [r3, #0]
 80062c8:	5cba      	ldrb	r2, [r7, r2]
 80062ca:	0711      	lsls	r1, r2, #28
 80062cc:	d401      	bmi.n	80062d2 <__svfiscanf_r+0x6e>
 80062ce:	46aa      	mov	sl, r5
 80062d0:	e7e8      	b.n	80062a4 <__svfiscanf_r+0x40>
 80062d2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80062d4:	3201      	adds	r2, #1
 80062d6:	9245      	str	r2, [sp, #276]	; 0x114
 80062d8:	6862      	ldr	r2, [r4, #4]
 80062da:	3301      	adds	r3, #1
 80062dc:	3a01      	subs	r2, #1
 80062de:	6062      	str	r2, [r4, #4]
 80062e0:	6023      	str	r3, [r4, #0]
 80062e2:	e7ec      	b.n	80062be <__svfiscanf_r+0x5a>
 80062e4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80062e6:	4621      	mov	r1, r4
 80062e8:	4630      	mov	r0, r6
 80062ea:	4798      	blx	r3
 80062ec:	2800      	cmp	r0, #0
 80062ee:	d0e9      	beq.n	80062c4 <__svfiscanf_r+0x60>
 80062f0:	e7ed      	b.n	80062ce <__svfiscanf_r+0x6a>
 80062f2:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80062f6:	f040 8086 	bne.w	8006406 <__svfiscanf_r+0x1a2>
 80062fa:	9341      	str	r3, [sp, #260]	; 0x104
 80062fc:	9343      	str	r3, [sp, #268]	; 0x10c
 80062fe:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8006302:	2b2a      	cmp	r3, #42	; 0x2a
 8006304:	bf02      	ittt	eq
 8006306:	2310      	moveq	r3, #16
 8006308:	9341      	streq	r3, [sp, #260]	; 0x104
 800630a:	f10a 0502 	addeq.w	r5, sl, #2
 800630e:	220a      	movs	r2, #10
 8006310:	46aa      	mov	sl, r5
 8006312:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8006316:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800631a:	2b09      	cmp	r3, #9
 800631c:	d91e      	bls.n	800635c <__svfiscanf_r+0xf8>
 800631e:	488d      	ldr	r0, [pc, #564]	; (8006554 <__svfiscanf_r+0x2f0>)
 8006320:	2203      	movs	r2, #3
 8006322:	f7f9 ff5d 	bl	80001e0 <memchr>
 8006326:	b140      	cbz	r0, 800633a <__svfiscanf_r+0xd6>
 8006328:	2301      	movs	r3, #1
 800632a:	eba0 0009 	sub.w	r0, r0, r9
 800632e:	fa03 f000 	lsl.w	r0, r3, r0
 8006332:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006334:	4318      	orrs	r0, r3
 8006336:	9041      	str	r0, [sp, #260]	; 0x104
 8006338:	4655      	mov	r5, sl
 800633a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800633e:	2b78      	cmp	r3, #120	; 0x78
 8006340:	d807      	bhi.n	8006352 <__svfiscanf_r+0xee>
 8006342:	2b57      	cmp	r3, #87	; 0x57
 8006344:	d811      	bhi.n	800636a <__svfiscanf_r+0x106>
 8006346:	2b25      	cmp	r3, #37	; 0x25
 8006348:	d05d      	beq.n	8006406 <__svfiscanf_r+0x1a2>
 800634a:	d857      	bhi.n	80063fc <__svfiscanf_r+0x198>
 800634c:	2b00      	cmp	r3, #0
 800634e:	f000 80d6 	beq.w	80064fe <__svfiscanf_r+0x29a>
 8006352:	2303      	movs	r3, #3
 8006354:	9347      	str	r3, [sp, #284]	; 0x11c
 8006356:	230a      	movs	r3, #10
 8006358:	9342      	str	r3, [sp, #264]	; 0x108
 800635a:	e08b      	b.n	8006474 <__svfiscanf_r+0x210>
 800635c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800635e:	fb02 1303 	mla	r3, r2, r3, r1
 8006362:	3b30      	subs	r3, #48	; 0x30
 8006364:	9343      	str	r3, [sp, #268]	; 0x10c
 8006366:	4655      	mov	r5, sl
 8006368:	e7d2      	b.n	8006310 <__svfiscanf_r+0xac>
 800636a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800636e:	2a20      	cmp	r2, #32
 8006370:	d8ef      	bhi.n	8006352 <__svfiscanf_r+0xee>
 8006372:	a101      	add	r1, pc, #4	; (adr r1, 8006378 <__svfiscanf_r+0x114>)
 8006374:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006378:	0800645f 	.word	0x0800645f
 800637c:	08006353 	.word	0x08006353
 8006380:	08006353 	.word	0x08006353
 8006384:	080064bd 	.word	0x080064bd
 8006388:	08006353 	.word	0x08006353
 800638c:	08006353 	.word	0x08006353
 8006390:	08006353 	.word	0x08006353
 8006394:	08006353 	.word	0x08006353
 8006398:	08006353 	.word	0x08006353
 800639c:	08006353 	.word	0x08006353
 80063a0:	08006353 	.word	0x08006353
 80063a4:	080064d3 	.word	0x080064d3
 80063a8:	080064a9 	.word	0x080064a9
 80063ac:	08006403 	.word	0x08006403
 80063b0:	08006403 	.word	0x08006403
 80063b4:	08006403 	.word	0x08006403
 80063b8:	08006353 	.word	0x08006353
 80063bc:	080064ad 	.word	0x080064ad
 80063c0:	08006353 	.word	0x08006353
 80063c4:	08006353 	.word	0x08006353
 80063c8:	08006353 	.word	0x08006353
 80063cc:	08006353 	.word	0x08006353
 80063d0:	080064e3 	.word	0x080064e3
 80063d4:	080064b5 	.word	0x080064b5
 80063d8:	08006457 	.word	0x08006457
 80063dc:	08006353 	.word	0x08006353
 80063e0:	08006353 	.word	0x08006353
 80063e4:	080064df 	.word	0x080064df
 80063e8:	08006353 	.word	0x08006353
 80063ec:	080064a9 	.word	0x080064a9
 80063f0:	08006353 	.word	0x08006353
 80063f4:	08006353 	.word	0x08006353
 80063f8:	0800645f 	.word	0x0800645f
 80063fc:	3b45      	subs	r3, #69	; 0x45
 80063fe:	2b02      	cmp	r3, #2
 8006400:	d8a7      	bhi.n	8006352 <__svfiscanf_r+0xee>
 8006402:	2305      	movs	r3, #5
 8006404:	e035      	b.n	8006472 <__svfiscanf_r+0x20e>
 8006406:	6863      	ldr	r3, [r4, #4]
 8006408:	2b00      	cmp	r3, #0
 800640a:	dd0d      	ble.n	8006428 <__svfiscanf_r+0x1c4>
 800640c:	6823      	ldr	r3, [r4, #0]
 800640e:	781a      	ldrb	r2, [r3, #0]
 8006410:	455a      	cmp	r2, fp
 8006412:	f040 80bd 	bne.w	8006590 <__svfiscanf_r+0x32c>
 8006416:	3301      	adds	r3, #1
 8006418:	6862      	ldr	r2, [r4, #4]
 800641a:	6023      	str	r3, [r4, #0]
 800641c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800641e:	3a01      	subs	r2, #1
 8006420:	3301      	adds	r3, #1
 8006422:	6062      	str	r2, [r4, #4]
 8006424:	9345      	str	r3, [sp, #276]	; 0x114
 8006426:	e752      	b.n	80062ce <__svfiscanf_r+0x6a>
 8006428:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800642a:	4621      	mov	r1, r4
 800642c:	4630      	mov	r0, r6
 800642e:	4798      	blx	r3
 8006430:	2800      	cmp	r0, #0
 8006432:	d0eb      	beq.n	800640c <__svfiscanf_r+0x1a8>
 8006434:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006436:	07da      	lsls	r2, r3, #31
 8006438:	f140 80a2 	bpl.w	8006580 <__svfiscanf_r+0x31c>
 800643c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800643e:	2800      	cmp	r0, #0
 8006440:	d066      	beq.n	8006510 <__svfiscanf_r+0x2ac>
 8006442:	89a3      	ldrh	r3, [r4, #12]
 8006444:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006448:	bf18      	it	ne
 800644a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800644e:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8006452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006456:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006458:	f042 0220 	orr.w	r2, r2, #32
 800645c:	9241      	str	r2, [sp, #260]	; 0x104
 800645e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006460:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006464:	9241      	str	r2, [sp, #260]	; 0x104
 8006466:	2210      	movs	r2, #16
 8006468:	2b6f      	cmp	r3, #111	; 0x6f
 800646a:	9242      	str	r2, [sp, #264]	; 0x108
 800646c:	bf34      	ite	cc
 800646e:	2303      	movcc	r3, #3
 8006470:	2304      	movcs	r3, #4
 8006472:	9347      	str	r3, [sp, #284]	; 0x11c
 8006474:	6863      	ldr	r3, [r4, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	dd4d      	ble.n	8006516 <__svfiscanf_r+0x2b2>
 800647a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800647c:	065b      	lsls	r3, r3, #25
 800647e:	d404      	bmi.n	800648a <__svfiscanf_r+0x226>
 8006480:	6823      	ldr	r3, [r4, #0]
 8006482:	781a      	ldrb	r2, [r3, #0]
 8006484:	5cba      	ldrb	r2, [r7, r2]
 8006486:	0710      	lsls	r0, r2, #28
 8006488:	d44c      	bmi.n	8006524 <__svfiscanf_r+0x2c0>
 800648a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800648c:	2b02      	cmp	r3, #2
 800648e:	dc63      	bgt.n	8006558 <__svfiscanf_r+0x2f4>
 8006490:	466b      	mov	r3, sp
 8006492:	4622      	mov	r2, r4
 8006494:	a941      	add	r1, sp, #260	; 0x104
 8006496:	4630      	mov	r0, r6
 8006498:	f000 f8b0 	bl	80065fc <_scanf_chars>
 800649c:	2801      	cmp	r0, #1
 800649e:	d077      	beq.n	8006590 <__svfiscanf_r+0x32c>
 80064a0:	2802      	cmp	r0, #2
 80064a2:	f47f af14 	bne.w	80062ce <__svfiscanf_r+0x6a>
 80064a6:	e7c5      	b.n	8006434 <__svfiscanf_r+0x1d0>
 80064a8:	220a      	movs	r2, #10
 80064aa:	e7dd      	b.n	8006468 <__svfiscanf_r+0x204>
 80064ac:	2300      	movs	r3, #0
 80064ae:	9342      	str	r3, [sp, #264]	; 0x108
 80064b0:	2303      	movs	r3, #3
 80064b2:	e7de      	b.n	8006472 <__svfiscanf_r+0x20e>
 80064b4:	2308      	movs	r3, #8
 80064b6:	9342      	str	r3, [sp, #264]	; 0x108
 80064b8:	2304      	movs	r3, #4
 80064ba:	e7da      	b.n	8006472 <__svfiscanf_r+0x20e>
 80064bc:	4629      	mov	r1, r5
 80064be:	4640      	mov	r0, r8
 80064c0:	f000 fa8c 	bl	80069dc <__sccl>
 80064c4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80064c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064ca:	9341      	str	r3, [sp, #260]	; 0x104
 80064cc:	4605      	mov	r5, r0
 80064ce:	2301      	movs	r3, #1
 80064d0:	e7cf      	b.n	8006472 <__svfiscanf_r+0x20e>
 80064d2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80064d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064d8:	9341      	str	r3, [sp, #260]	; 0x104
 80064da:	2300      	movs	r3, #0
 80064dc:	e7c9      	b.n	8006472 <__svfiscanf_r+0x20e>
 80064de:	2302      	movs	r3, #2
 80064e0:	e7c7      	b.n	8006472 <__svfiscanf_r+0x20e>
 80064e2:	9841      	ldr	r0, [sp, #260]	; 0x104
 80064e4:	06c3      	lsls	r3, r0, #27
 80064e6:	f53f aef2 	bmi.w	80062ce <__svfiscanf_r+0x6a>
 80064ea:	9b00      	ldr	r3, [sp, #0]
 80064ec:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80064ee:	1d19      	adds	r1, r3, #4
 80064f0:	9100      	str	r1, [sp, #0]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	07c0      	lsls	r0, r0, #31
 80064f6:	bf4c      	ite	mi
 80064f8:	801a      	strhmi	r2, [r3, #0]
 80064fa:	601a      	strpl	r2, [r3, #0]
 80064fc:	e6e7      	b.n	80062ce <__svfiscanf_r+0x6a>
 80064fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006500:	07d8      	lsls	r0, r3, #31
 8006502:	d405      	bmi.n	8006510 <__svfiscanf_r+0x2ac>
 8006504:	89a3      	ldrh	r3, [r4, #12]
 8006506:	0599      	lsls	r1, r3, #22
 8006508:	d402      	bmi.n	8006510 <__svfiscanf_r+0x2ac>
 800650a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800650c:	f7ff faa4 	bl	8005a58 <__retarget_lock_release_recursive>
 8006510:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006514:	e79b      	b.n	800644e <__svfiscanf_r+0x1ea>
 8006516:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006518:	4621      	mov	r1, r4
 800651a:	4630      	mov	r0, r6
 800651c:	4798      	blx	r3
 800651e:	2800      	cmp	r0, #0
 8006520:	d0ab      	beq.n	800647a <__svfiscanf_r+0x216>
 8006522:	e787      	b.n	8006434 <__svfiscanf_r+0x1d0>
 8006524:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006526:	3201      	adds	r2, #1
 8006528:	9245      	str	r2, [sp, #276]	; 0x114
 800652a:	6862      	ldr	r2, [r4, #4]
 800652c:	3a01      	subs	r2, #1
 800652e:	2a00      	cmp	r2, #0
 8006530:	6062      	str	r2, [r4, #4]
 8006532:	dd02      	ble.n	800653a <__svfiscanf_r+0x2d6>
 8006534:	3301      	adds	r3, #1
 8006536:	6023      	str	r3, [r4, #0]
 8006538:	e7a2      	b.n	8006480 <__svfiscanf_r+0x21c>
 800653a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800653c:	4621      	mov	r1, r4
 800653e:	4630      	mov	r0, r6
 8006540:	4798      	blx	r3
 8006542:	2800      	cmp	r0, #0
 8006544:	d09c      	beq.n	8006480 <__svfiscanf_r+0x21c>
 8006546:	e775      	b.n	8006434 <__svfiscanf_r+0x1d0>
 8006548:	08006d55 	.word	0x08006d55
 800654c:	080068a9 	.word	0x080068a9
 8006550:	080072df 	.word	0x080072df
 8006554:	08007296 	.word	0x08007296
 8006558:	2b04      	cmp	r3, #4
 800655a:	dc06      	bgt.n	800656a <__svfiscanf_r+0x306>
 800655c:	466b      	mov	r3, sp
 800655e:	4622      	mov	r2, r4
 8006560:	a941      	add	r1, sp, #260	; 0x104
 8006562:	4630      	mov	r0, r6
 8006564:	f000 f8a2 	bl	80066ac <_scanf_i>
 8006568:	e798      	b.n	800649c <__svfiscanf_r+0x238>
 800656a:	4b0f      	ldr	r3, [pc, #60]	; (80065a8 <__svfiscanf_r+0x344>)
 800656c:	2b00      	cmp	r3, #0
 800656e:	f43f aeae 	beq.w	80062ce <__svfiscanf_r+0x6a>
 8006572:	466b      	mov	r3, sp
 8006574:	4622      	mov	r2, r4
 8006576:	a941      	add	r1, sp, #260	; 0x104
 8006578:	4630      	mov	r0, r6
 800657a:	f3af 8000 	nop.w
 800657e:	e78d      	b.n	800649c <__svfiscanf_r+0x238>
 8006580:	89a3      	ldrh	r3, [r4, #12]
 8006582:	0599      	lsls	r1, r3, #22
 8006584:	f53f af5a 	bmi.w	800643c <__svfiscanf_r+0x1d8>
 8006588:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800658a:	f7ff fa65 	bl	8005a58 <__retarget_lock_release_recursive>
 800658e:	e755      	b.n	800643c <__svfiscanf_r+0x1d8>
 8006590:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006592:	07da      	lsls	r2, r3, #31
 8006594:	d405      	bmi.n	80065a2 <__svfiscanf_r+0x33e>
 8006596:	89a3      	ldrh	r3, [r4, #12]
 8006598:	059b      	lsls	r3, r3, #22
 800659a:	d402      	bmi.n	80065a2 <__svfiscanf_r+0x33e>
 800659c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800659e:	f7ff fa5b 	bl	8005a58 <__retarget_lock_release_recursive>
 80065a2:	9844      	ldr	r0, [sp, #272]	; 0x110
 80065a4:	e753      	b.n	800644e <__svfiscanf_r+0x1ea>
 80065a6:	bf00      	nop
 80065a8:	00000000 	.word	0x00000000

080065ac <_vfiscanf_r>:
 80065ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80065ae:	460c      	mov	r4, r1
 80065b0:	4605      	mov	r5, r0
 80065b2:	b138      	cbz	r0, 80065c4 <_vfiscanf_r+0x18>
 80065b4:	6981      	ldr	r1, [r0, #24]
 80065b6:	b929      	cbnz	r1, 80065c4 <_vfiscanf_r+0x18>
 80065b8:	e9cd 2300 	strd	r2, r3, [sp]
 80065bc:	f7ff f990 	bl	80058e0 <__sinit>
 80065c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065c4:	490a      	ldr	r1, [pc, #40]	; (80065f0 <_vfiscanf_r+0x44>)
 80065c6:	428c      	cmp	r4, r1
 80065c8:	d107      	bne.n	80065da <_vfiscanf_r+0x2e>
 80065ca:	686c      	ldr	r4, [r5, #4]
 80065cc:	4621      	mov	r1, r4
 80065ce:	4628      	mov	r0, r5
 80065d0:	b003      	add	sp, #12
 80065d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80065d6:	f7ff be45 	b.w	8006264 <__svfiscanf_r>
 80065da:	4906      	ldr	r1, [pc, #24]	; (80065f4 <_vfiscanf_r+0x48>)
 80065dc:	428c      	cmp	r4, r1
 80065de:	d101      	bne.n	80065e4 <_vfiscanf_r+0x38>
 80065e0:	68ac      	ldr	r4, [r5, #8]
 80065e2:	e7f3      	b.n	80065cc <_vfiscanf_r+0x20>
 80065e4:	4904      	ldr	r1, [pc, #16]	; (80065f8 <_vfiscanf_r+0x4c>)
 80065e6:	428c      	cmp	r4, r1
 80065e8:	bf08      	it	eq
 80065ea:	68ec      	ldreq	r4, [r5, #12]
 80065ec:	e7ee      	b.n	80065cc <_vfiscanf_r+0x20>
 80065ee:	bf00      	nop
 80065f0:	08007250 	.word	0x08007250
 80065f4:	08007270 	.word	0x08007270
 80065f8:	08007230 	.word	0x08007230

080065fc <_scanf_chars>:
 80065fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006600:	4615      	mov	r5, r2
 8006602:	688a      	ldr	r2, [r1, #8]
 8006604:	4680      	mov	r8, r0
 8006606:	460c      	mov	r4, r1
 8006608:	b932      	cbnz	r2, 8006618 <_scanf_chars+0x1c>
 800660a:	698a      	ldr	r2, [r1, #24]
 800660c:	2a00      	cmp	r2, #0
 800660e:	bf0c      	ite	eq
 8006610:	2201      	moveq	r2, #1
 8006612:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8006616:	608a      	str	r2, [r1, #8]
 8006618:	6822      	ldr	r2, [r4, #0]
 800661a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80066a8 <_scanf_chars+0xac>
 800661e:	06d1      	lsls	r1, r2, #27
 8006620:	bf5f      	itttt	pl
 8006622:	681a      	ldrpl	r2, [r3, #0]
 8006624:	1d11      	addpl	r1, r2, #4
 8006626:	6019      	strpl	r1, [r3, #0]
 8006628:	6816      	ldrpl	r6, [r2, #0]
 800662a:	2700      	movs	r7, #0
 800662c:	69a0      	ldr	r0, [r4, #24]
 800662e:	b188      	cbz	r0, 8006654 <_scanf_chars+0x58>
 8006630:	2801      	cmp	r0, #1
 8006632:	d107      	bne.n	8006644 <_scanf_chars+0x48>
 8006634:	682b      	ldr	r3, [r5, #0]
 8006636:	781a      	ldrb	r2, [r3, #0]
 8006638:	6963      	ldr	r3, [r4, #20]
 800663a:	5c9b      	ldrb	r3, [r3, r2]
 800663c:	b953      	cbnz	r3, 8006654 <_scanf_chars+0x58>
 800663e:	bb27      	cbnz	r7, 800668a <_scanf_chars+0x8e>
 8006640:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006644:	2802      	cmp	r0, #2
 8006646:	d120      	bne.n	800668a <_scanf_chars+0x8e>
 8006648:	682b      	ldr	r3, [r5, #0]
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8006650:	071b      	lsls	r3, r3, #28
 8006652:	d41a      	bmi.n	800668a <_scanf_chars+0x8e>
 8006654:	6823      	ldr	r3, [r4, #0]
 8006656:	06da      	lsls	r2, r3, #27
 8006658:	bf5e      	ittt	pl
 800665a:	682b      	ldrpl	r3, [r5, #0]
 800665c:	781b      	ldrbpl	r3, [r3, #0]
 800665e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8006662:	682a      	ldr	r2, [r5, #0]
 8006664:	686b      	ldr	r3, [r5, #4]
 8006666:	3201      	adds	r2, #1
 8006668:	602a      	str	r2, [r5, #0]
 800666a:	68a2      	ldr	r2, [r4, #8]
 800666c:	3b01      	subs	r3, #1
 800666e:	3a01      	subs	r2, #1
 8006670:	606b      	str	r3, [r5, #4]
 8006672:	3701      	adds	r7, #1
 8006674:	60a2      	str	r2, [r4, #8]
 8006676:	b142      	cbz	r2, 800668a <_scanf_chars+0x8e>
 8006678:	2b00      	cmp	r3, #0
 800667a:	dcd7      	bgt.n	800662c <_scanf_chars+0x30>
 800667c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006680:	4629      	mov	r1, r5
 8006682:	4640      	mov	r0, r8
 8006684:	4798      	blx	r3
 8006686:	2800      	cmp	r0, #0
 8006688:	d0d0      	beq.n	800662c <_scanf_chars+0x30>
 800668a:	6823      	ldr	r3, [r4, #0]
 800668c:	f013 0310 	ands.w	r3, r3, #16
 8006690:	d105      	bne.n	800669e <_scanf_chars+0xa2>
 8006692:	68e2      	ldr	r2, [r4, #12]
 8006694:	3201      	adds	r2, #1
 8006696:	60e2      	str	r2, [r4, #12]
 8006698:	69a2      	ldr	r2, [r4, #24]
 800669a:	b102      	cbz	r2, 800669e <_scanf_chars+0xa2>
 800669c:	7033      	strb	r3, [r6, #0]
 800669e:	6923      	ldr	r3, [r4, #16]
 80066a0:	441f      	add	r7, r3
 80066a2:	6127      	str	r7, [r4, #16]
 80066a4:	2000      	movs	r0, #0
 80066a6:	e7cb      	b.n	8006640 <_scanf_chars+0x44>
 80066a8:	080072df 	.word	0x080072df

080066ac <_scanf_i>:
 80066ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066b0:	4698      	mov	r8, r3
 80066b2:	4b74      	ldr	r3, [pc, #464]	; (8006884 <_scanf_i+0x1d8>)
 80066b4:	460c      	mov	r4, r1
 80066b6:	4682      	mov	sl, r0
 80066b8:	4616      	mov	r6, r2
 80066ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80066be:	b087      	sub	sp, #28
 80066c0:	ab03      	add	r3, sp, #12
 80066c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80066c6:	4b70      	ldr	r3, [pc, #448]	; (8006888 <_scanf_i+0x1dc>)
 80066c8:	69a1      	ldr	r1, [r4, #24]
 80066ca:	4a70      	ldr	r2, [pc, #448]	; (800688c <_scanf_i+0x1e0>)
 80066cc:	2903      	cmp	r1, #3
 80066ce:	bf18      	it	ne
 80066d0:	461a      	movne	r2, r3
 80066d2:	68a3      	ldr	r3, [r4, #8]
 80066d4:	9201      	str	r2, [sp, #4]
 80066d6:	1e5a      	subs	r2, r3, #1
 80066d8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80066dc:	bf88      	it	hi
 80066de:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80066e2:	4627      	mov	r7, r4
 80066e4:	bf82      	ittt	hi
 80066e6:	eb03 0905 	addhi.w	r9, r3, r5
 80066ea:	f240 135d 	movwhi	r3, #349	; 0x15d
 80066ee:	60a3      	strhi	r3, [r4, #8]
 80066f0:	f857 3b1c 	ldr.w	r3, [r7], #28
 80066f4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80066f8:	bf98      	it	ls
 80066fa:	f04f 0900 	movls.w	r9, #0
 80066fe:	6023      	str	r3, [r4, #0]
 8006700:	463d      	mov	r5, r7
 8006702:	f04f 0b00 	mov.w	fp, #0
 8006706:	6831      	ldr	r1, [r6, #0]
 8006708:	ab03      	add	r3, sp, #12
 800670a:	7809      	ldrb	r1, [r1, #0]
 800670c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8006710:	2202      	movs	r2, #2
 8006712:	f7f9 fd65 	bl	80001e0 <memchr>
 8006716:	b328      	cbz	r0, 8006764 <_scanf_i+0xb8>
 8006718:	f1bb 0f01 	cmp.w	fp, #1
 800671c:	d159      	bne.n	80067d2 <_scanf_i+0x126>
 800671e:	6862      	ldr	r2, [r4, #4]
 8006720:	b92a      	cbnz	r2, 800672e <_scanf_i+0x82>
 8006722:	6822      	ldr	r2, [r4, #0]
 8006724:	2308      	movs	r3, #8
 8006726:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800672a:	6063      	str	r3, [r4, #4]
 800672c:	6022      	str	r2, [r4, #0]
 800672e:	6822      	ldr	r2, [r4, #0]
 8006730:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8006734:	6022      	str	r2, [r4, #0]
 8006736:	68a2      	ldr	r2, [r4, #8]
 8006738:	1e51      	subs	r1, r2, #1
 800673a:	60a1      	str	r1, [r4, #8]
 800673c:	b192      	cbz	r2, 8006764 <_scanf_i+0xb8>
 800673e:	6832      	ldr	r2, [r6, #0]
 8006740:	1c51      	adds	r1, r2, #1
 8006742:	6031      	str	r1, [r6, #0]
 8006744:	7812      	ldrb	r2, [r2, #0]
 8006746:	f805 2b01 	strb.w	r2, [r5], #1
 800674a:	6872      	ldr	r2, [r6, #4]
 800674c:	3a01      	subs	r2, #1
 800674e:	2a00      	cmp	r2, #0
 8006750:	6072      	str	r2, [r6, #4]
 8006752:	dc07      	bgt.n	8006764 <_scanf_i+0xb8>
 8006754:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8006758:	4631      	mov	r1, r6
 800675a:	4650      	mov	r0, sl
 800675c:	4790      	blx	r2
 800675e:	2800      	cmp	r0, #0
 8006760:	f040 8085 	bne.w	800686e <_scanf_i+0x1c2>
 8006764:	f10b 0b01 	add.w	fp, fp, #1
 8006768:	f1bb 0f03 	cmp.w	fp, #3
 800676c:	d1cb      	bne.n	8006706 <_scanf_i+0x5a>
 800676e:	6863      	ldr	r3, [r4, #4]
 8006770:	b90b      	cbnz	r3, 8006776 <_scanf_i+0xca>
 8006772:	230a      	movs	r3, #10
 8006774:	6063      	str	r3, [r4, #4]
 8006776:	6863      	ldr	r3, [r4, #4]
 8006778:	4945      	ldr	r1, [pc, #276]	; (8006890 <_scanf_i+0x1e4>)
 800677a:	6960      	ldr	r0, [r4, #20]
 800677c:	1ac9      	subs	r1, r1, r3
 800677e:	f000 f92d 	bl	80069dc <__sccl>
 8006782:	f04f 0b00 	mov.w	fp, #0
 8006786:	68a3      	ldr	r3, [r4, #8]
 8006788:	6822      	ldr	r2, [r4, #0]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d03d      	beq.n	800680a <_scanf_i+0x15e>
 800678e:	6831      	ldr	r1, [r6, #0]
 8006790:	6960      	ldr	r0, [r4, #20]
 8006792:	f891 c000 	ldrb.w	ip, [r1]
 8006796:	f810 000c 	ldrb.w	r0, [r0, ip]
 800679a:	2800      	cmp	r0, #0
 800679c:	d035      	beq.n	800680a <_scanf_i+0x15e>
 800679e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80067a2:	d124      	bne.n	80067ee <_scanf_i+0x142>
 80067a4:	0510      	lsls	r0, r2, #20
 80067a6:	d522      	bpl.n	80067ee <_scanf_i+0x142>
 80067a8:	f10b 0b01 	add.w	fp, fp, #1
 80067ac:	f1b9 0f00 	cmp.w	r9, #0
 80067b0:	d003      	beq.n	80067ba <_scanf_i+0x10e>
 80067b2:	3301      	adds	r3, #1
 80067b4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80067b8:	60a3      	str	r3, [r4, #8]
 80067ba:	6873      	ldr	r3, [r6, #4]
 80067bc:	3b01      	subs	r3, #1
 80067be:	2b00      	cmp	r3, #0
 80067c0:	6073      	str	r3, [r6, #4]
 80067c2:	dd1b      	ble.n	80067fc <_scanf_i+0x150>
 80067c4:	6833      	ldr	r3, [r6, #0]
 80067c6:	3301      	adds	r3, #1
 80067c8:	6033      	str	r3, [r6, #0]
 80067ca:	68a3      	ldr	r3, [r4, #8]
 80067cc:	3b01      	subs	r3, #1
 80067ce:	60a3      	str	r3, [r4, #8]
 80067d0:	e7d9      	b.n	8006786 <_scanf_i+0xda>
 80067d2:	f1bb 0f02 	cmp.w	fp, #2
 80067d6:	d1ae      	bne.n	8006736 <_scanf_i+0x8a>
 80067d8:	6822      	ldr	r2, [r4, #0]
 80067da:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80067de:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80067e2:	d1bf      	bne.n	8006764 <_scanf_i+0xb8>
 80067e4:	2310      	movs	r3, #16
 80067e6:	6063      	str	r3, [r4, #4]
 80067e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067ec:	e7a2      	b.n	8006734 <_scanf_i+0x88>
 80067ee:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80067f2:	6022      	str	r2, [r4, #0]
 80067f4:	780b      	ldrb	r3, [r1, #0]
 80067f6:	f805 3b01 	strb.w	r3, [r5], #1
 80067fa:	e7de      	b.n	80067ba <_scanf_i+0x10e>
 80067fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006800:	4631      	mov	r1, r6
 8006802:	4650      	mov	r0, sl
 8006804:	4798      	blx	r3
 8006806:	2800      	cmp	r0, #0
 8006808:	d0df      	beq.n	80067ca <_scanf_i+0x11e>
 800680a:	6823      	ldr	r3, [r4, #0]
 800680c:	05d9      	lsls	r1, r3, #23
 800680e:	d50d      	bpl.n	800682c <_scanf_i+0x180>
 8006810:	42bd      	cmp	r5, r7
 8006812:	d909      	bls.n	8006828 <_scanf_i+0x17c>
 8006814:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006818:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800681c:	4632      	mov	r2, r6
 800681e:	4650      	mov	r0, sl
 8006820:	4798      	blx	r3
 8006822:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8006826:	464d      	mov	r5, r9
 8006828:	42bd      	cmp	r5, r7
 800682a:	d028      	beq.n	800687e <_scanf_i+0x1d2>
 800682c:	6822      	ldr	r2, [r4, #0]
 800682e:	f012 0210 	ands.w	r2, r2, #16
 8006832:	d113      	bne.n	800685c <_scanf_i+0x1b0>
 8006834:	702a      	strb	r2, [r5, #0]
 8006836:	6863      	ldr	r3, [r4, #4]
 8006838:	9e01      	ldr	r6, [sp, #4]
 800683a:	4639      	mov	r1, r7
 800683c:	4650      	mov	r0, sl
 800683e:	47b0      	blx	r6
 8006840:	f8d8 3000 	ldr.w	r3, [r8]
 8006844:	6821      	ldr	r1, [r4, #0]
 8006846:	1d1a      	adds	r2, r3, #4
 8006848:	f8c8 2000 	str.w	r2, [r8]
 800684c:	f011 0f20 	tst.w	r1, #32
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	d00f      	beq.n	8006874 <_scanf_i+0x1c8>
 8006854:	6018      	str	r0, [r3, #0]
 8006856:	68e3      	ldr	r3, [r4, #12]
 8006858:	3301      	adds	r3, #1
 800685a:	60e3      	str	r3, [r4, #12]
 800685c:	1bed      	subs	r5, r5, r7
 800685e:	44ab      	add	fp, r5
 8006860:	6925      	ldr	r5, [r4, #16]
 8006862:	445d      	add	r5, fp
 8006864:	6125      	str	r5, [r4, #16]
 8006866:	2000      	movs	r0, #0
 8006868:	b007      	add	sp, #28
 800686a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800686e:	f04f 0b00 	mov.w	fp, #0
 8006872:	e7ca      	b.n	800680a <_scanf_i+0x15e>
 8006874:	07ca      	lsls	r2, r1, #31
 8006876:	bf4c      	ite	mi
 8006878:	8018      	strhmi	r0, [r3, #0]
 800687a:	6018      	strpl	r0, [r3, #0]
 800687c:	e7eb      	b.n	8006856 <_scanf_i+0x1aa>
 800687e:	2001      	movs	r0, #1
 8006880:	e7f2      	b.n	8006868 <_scanf_i+0x1bc>
 8006882:	bf00      	nop
 8006884:	080071c0 	.word	0x080071c0
 8006888:	08006cdd 	.word	0x08006cdd
 800688c:	08006be1 	.word	0x08006be1
 8006890:	080072dc 	.word	0x080072dc

08006894 <lflush>:
 8006894:	8983      	ldrh	r3, [r0, #12]
 8006896:	f003 0309 	and.w	r3, r3, #9
 800689a:	2b09      	cmp	r3, #9
 800689c:	d101      	bne.n	80068a2 <lflush+0xe>
 800689e:	f7fe bfb5 	b.w	800580c <fflush>
 80068a2:	2000      	movs	r0, #0
 80068a4:	4770      	bx	lr
	...

080068a8 <__srefill_r>:
 80068a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068aa:	460c      	mov	r4, r1
 80068ac:	4605      	mov	r5, r0
 80068ae:	b118      	cbz	r0, 80068b8 <__srefill_r+0x10>
 80068b0:	6983      	ldr	r3, [r0, #24]
 80068b2:	b90b      	cbnz	r3, 80068b8 <__srefill_r+0x10>
 80068b4:	f7ff f814 	bl	80058e0 <__sinit>
 80068b8:	4b3b      	ldr	r3, [pc, #236]	; (80069a8 <__srefill_r+0x100>)
 80068ba:	429c      	cmp	r4, r3
 80068bc:	d10a      	bne.n	80068d4 <__srefill_r+0x2c>
 80068be:	686c      	ldr	r4, [r5, #4]
 80068c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068c4:	2300      	movs	r3, #0
 80068c6:	6063      	str	r3, [r4, #4]
 80068c8:	89a3      	ldrh	r3, [r4, #12]
 80068ca:	069e      	lsls	r6, r3, #26
 80068cc:	d50c      	bpl.n	80068e8 <__srefill_r+0x40>
 80068ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068d2:	e066      	b.n	80069a2 <__srefill_r+0xfa>
 80068d4:	4b35      	ldr	r3, [pc, #212]	; (80069ac <__srefill_r+0x104>)
 80068d6:	429c      	cmp	r4, r3
 80068d8:	d101      	bne.n	80068de <__srefill_r+0x36>
 80068da:	68ac      	ldr	r4, [r5, #8]
 80068dc:	e7f0      	b.n	80068c0 <__srefill_r+0x18>
 80068de:	4b34      	ldr	r3, [pc, #208]	; (80069b0 <__srefill_r+0x108>)
 80068e0:	429c      	cmp	r4, r3
 80068e2:	bf08      	it	eq
 80068e4:	68ec      	ldreq	r4, [r5, #12]
 80068e6:	e7eb      	b.n	80068c0 <__srefill_r+0x18>
 80068e8:	0758      	lsls	r0, r3, #29
 80068ea:	d448      	bmi.n	800697e <__srefill_r+0xd6>
 80068ec:	06d9      	lsls	r1, r3, #27
 80068ee:	d405      	bmi.n	80068fc <__srefill_r+0x54>
 80068f0:	2309      	movs	r3, #9
 80068f2:	602b      	str	r3, [r5, #0]
 80068f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80068f8:	81a3      	strh	r3, [r4, #12]
 80068fa:	e7e8      	b.n	80068ce <__srefill_r+0x26>
 80068fc:	071a      	lsls	r2, r3, #28
 80068fe:	d50b      	bpl.n	8006918 <__srefill_r+0x70>
 8006900:	4621      	mov	r1, r4
 8006902:	4628      	mov	r0, r5
 8006904:	f7fe ff46 	bl	8005794 <_fflush_r>
 8006908:	2800      	cmp	r0, #0
 800690a:	d1e0      	bne.n	80068ce <__srefill_r+0x26>
 800690c:	89a3      	ldrh	r3, [r4, #12]
 800690e:	60a0      	str	r0, [r4, #8]
 8006910:	f023 0308 	bic.w	r3, r3, #8
 8006914:	81a3      	strh	r3, [r4, #12]
 8006916:	61a0      	str	r0, [r4, #24]
 8006918:	89a3      	ldrh	r3, [r4, #12]
 800691a:	f043 0304 	orr.w	r3, r3, #4
 800691e:	81a3      	strh	r3, [r4, #12]
 8006920:	6923      	ldr	r3, [r4, #16]
 8006922:	b91b      	cbnz	r3, 800692c <__srefill_r+0x84>
 8006924:	4621      	mov	r1, r4
 8006926:	4628      	mov	r0, r5
 8006928:	f7ff f8bc 	bl	8005aa4 <__smakebuf_r>
 800692c:	89a6      	ldrh	r6, [r4, #12]
 800692e:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8006932:	07b3      	lsls	r3, r6, #30
 8006934:	d00f      	beq.n	8006956 <__srefill_r+0xae>
 8006936:	2301      	movs	r3, #1
 8006938:	81a3      	strh	r3, [r4, #12]
 800693a:	4b1e      	ldr	r3, [pc, #120]	; (80069b4 <__srefill_r+0x10c>)
 800693c:	491e      	ldr	r1, [pc, #120]	; (80069b8 <__srefill_r+0x110>)
 800693e:	6818      	ldr	r0, [r3, #0]
 8006940:	f006 0609 	and.w	r6, r6, #9
 8006944:	f7ff f84a 	bl	80059dc <_fwalk>
 8006948:	2e09      	cmp	r6, #9
 800694a:	81a7      	strh	r7, [r4, #12]
 800694c:	d103      	bne.n	8006956 <__srefill_r+0xae>
 800694e:	4621      	mov	r1, r4
 8006950:	4628      	mov	r0, r5
 8006952:	f7fe fe99 	bl	8005688 <__sflush_r>
 8006956:	6922      	ldr	r2, [r4, #16]
 8006958:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800695a:	6963      	ldr	r3, [r4, #20]
 800695c:	6a21      	ldr	r1, [r4, #32]
 800695e:	6022      	str	r2, [r4, #0]
 8006960:	4628      	mov	r0, r5
 8006962:	47b0      	blx	r6
 8006964:	2800      	cmp	r0, #0
 8006966:	6060      	str	r0, [r4, #4]
 8006968:	dc1c      	bgt.n	80069a4 <__srefill_r+0xfc>
 800696a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800696e:	bf17      	itett	ne
 8006970:	2200      	movne	r2, #0
 8006972:	f043 0320 	orreq.w	r3, r3, #32
 8006976:	6062      	strne	r2, [r4, #4]
 8006978:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800697c:	e7bc      	b.n	80068f8 <__srefill_r+0x50>
 800697e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006980:	2900      	cmp	r1, #0
 8006982:	d0cd      	beq.n	8006920 <__srefill_r+0x78>
 8006984:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006988:	4299      	cmp	r1, r3
 800698a:	d002      	beq.n	8006992 <__srefill_r+0xea>
 800698c:	4628      	mov	r0, r5
 800698e:	f7ff f8d1 	bl	8005b34 <_free_r>
 8006992:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006994:	6063      	str	r3, [r4, #4]
 8006996:	2000      	movs	r0, #0
 8006998:	6360      	str	r0, [r4, #52]	; 0x34
 800699a:	2b00      	cmp	r3, #0
 800699c:	d0c0      	beq.n	8006920 <__srefill_r+0x78>
 800699e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80069a0:	6023      	str	r3, [r4, #0]
 80069a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069a4:	2000      	movs	r0, #0
 80069a6:	e7fc      	b.n	80069a2 <__srefill_r+0xfa>
 80069a8:	08007250 	.word	0x08007250
 80069ac:	08007270 	.word	0x08007270
 80069b0:	08007230 	.word	0x08007230
 80069b4:	0800722c 	.word	0x0800722c
 80069b8:	08006895 	.word	0x08006895

080069bc <_sbrk_r>:
 80069bc:	b538      	push	{r3, r4, r5, lr}
 80069be:	4d06      	ldr	r5, [pc, #24]	; (80069d8 <_sbrk_r+0x1c>)
 80069c0:	2300      	movs	r3, #0
 80069c2:	4604      	mov	r4, r0
 80069c4:	4608      	mov	r0, r1
 80069c6:	602b      	str	r3, [r5, #0]
 80069c8:	f7fa f924 	bl	8000c14 <_sbrk>
 80069cc:	1c43      	adds	r3, r0, #1
 80069ce:	d102      	bne.n	80069d6 <_sbrk_r+0x1a>
 80069d0:	682b      	ldr	r3, [r5, #0]
 80069d2:	b103      	cbz	r3, 80069d6 <_sbrk_r+0x1a>
 80069d4:	6023      	str	r3, [r4, #0]
 80069d6:	bd38      	pop	{r3, r4, r5, pc}
 80069d8:	20004a94 	.word	0x20004a94

080069dc <__sccl>:
 80069dc:	b570      	push	{r4, r5, r6, lr}
 80069de:	780b      	ldrb	r3, [r1, #0]
 80069e0:	4604      	mov	r4, r0
 80069e2:	2b5e      	cmp	r3, #94	; 0x5e
 80069e4:	bf0b      	itete	eq
 80069e6:	784b      	ldrbeq	r3, [r1, #1]
 80069e8:	1c48      	addne	r0, r1, #1
 80069ea:	1c88      	addeq	r0, r1, #2
 80069ec:	2200      	movne	r2, #0
 80069ee:	bf08      	it	eq
 80069f0:	2201      	moveq	r2, #1
 80069f2:	1e61      	subs	r1, r4, #1
 80069f4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80069f8:	f801 2f01 	strb.w	r2, [r1, #1]!
 80069fc:	42a9      	cmp	r1, r5
 80069fe:	d1fb      	bne.n	80069f8 <__sccl+0x1c>
 8006a00:	b90b      	cbnz	r3, 8006a06 <__sccl+0x2a>
 8006a02:	3801      	subs	r0, #1
 8006a04:	bd70      	pop	{r4, r5, r6, pc}
 8006a06:	f082 0101 	eor.w	r1, r2, #1
 8006a0a:	54e1      	strb	r1, [r4, r3]
 8006a0c:	1c42      	adds	r2, r0, #1
 8006a0e:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8006a12:	2d2d      	cmp	r5, #45	; 0x2d
 8006a14:	f102 36ff 	add.w	r6, r2, #4294967295	; 0xffffffff
 8006a18:	4610      	mov	r0, r2
 8006a1a:	d006      	beq.n	8006a2a <__sccl+0x4e>
 8006a1c:	2d5d      	cmp	r5, #93	; 0x5d
 8006a1e:	d0f1      	beq.n	8006a04 <__sccl+0x28>
 8006a20:	b90d      	cbnz	r5, 8006a26 <__sccl+0x4a>
 8006a22:	4630      	mov	r0, r6
 8006a24:	e7ee      	b.n	8006a04 <__sccl+0x28>
 8006a26:	462b      	mov	r3, r5
 8006a28:	e7ef      	b.n	8006a0a <__sccl+0x2e>
 8006a2a:	7816      	ldrb	r6, [r2, #0]
 8006a2c:	2e5d      	cmp	r6, #93	; 0x5d
 8006a2e:	d0fa      	beq.n	8006a26 <__sccl+0x4a>
 8006a30:	42b3      	cmp	r3, r6
 8006a32:	dcf8      	bgt.n	8006a26 <__sccl+0x4a>
 8006a34:	4618      	mov	r0, r3
 8006a36:	3001      	adds	r0, #1
 8006a38:	4286      	cmp	r6, r0
 8006a3a:	5421      	strb	r1, [r4, r0]
 8006a3c:	dcfb      	bgt.n	8006a36 <__sccl+0x5a>
 8006a3e:	43d8      	mvns	r0, r3
 8006a40:	4430      	add	r0, r6
 8006a42:	1c5d      	adds	r5, r3, #1
 8006a44:	42b3      	cmp	r3, r6
 8006a46:	bfa8      	it	ge
 8006a48:	2000      	movge	r0, #0
 8006a4a:	182b      	adds	r3, r5, r0
 8006a4c:	3202      	adds	r2, #2
 8006a4e:	e7de      	b.n	8006a0e <__sccl+0x32>

08006a50 <__sread>:
 8006a50:	b510      	push	{r4, lr}
 8006a52:	460c      	mov	r4, r1
 8006a54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a58:	f000 fb5c 	bl	8007114 <_read_r>
 8006a5c:	2800      	cmp	r0, #0
 8006a5e:	bfab      	itete	ge
 8006a60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006a62:	89a3      	ldrhlt	r3, [r4, #12]
 8006a64:	181b      	addge	r3, r3, r0
 8006a66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006a6a:	bfac      	ite	ge
 8006a6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006a6e:	81a3      	strhlt	r3, [r4, #12]
 8006a70:	bd10      	pop	{r4, pc}

08006a72 <__swrite>:
 8006a72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a76:	461f      	mov	r7, r3
 8006a78:	898b      	ldrh	r3, [r1, #12]
 8006a7a:	05db      	lsls	r3, r3, #23
 8006a7c:	4605      	mov	r5, r0
 8006a7e:	460c      	mov	r4, r1
 8006a80:	4616      	mov	r6, r2
 8006a82:	d505      	bpl.n	8006a90 <__swrite+0x1e>
 8006a84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a88:	2302      	movs	r3, #2
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f000 fafe 	bl	800708c <_lseek_r>
 8006a90:	89a3      	ldrh	r3, [r4, #12]
 8006a92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a9a:	81a3      	strh	r3, [r4, #12]
 8006a9c:	4632      	mov	r2, r6
 8006a9e:	463b      	mov	r3, r7
 8006aa0:	4628      	mov	r0, r5
 8006aa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006aa6:	f000 ba3f 	b.w	8006f28 <_write_r>

08006aaa <__sseek>:
 8006aaa:	b510      	push	{r4, lr}
 8006aac:	460c      	mov	r4, r1
 8006aae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ab2:	f000 faeb 	bl	800708c <_lseek_r>
 8006ab6:	1c43      	adds	r3, r0, #1
 8006ab8:	89a3      	ldrh	r3, [r4, #12]
 8006aba:	bf15      	itete	ne
 8006abc:	6560      	strne	r0, [r4, #84]	; 0x54
 8006abe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006ac2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006ac6:	81a3      	strheq	r3, [r4, #12]
 8006ac8:	bf18      	it	ne
 8006aca:	81a3      	strhne	r3, [r4, #12]
 8006acc:	bd10      	pop	{r4, pc}

08006ace <__sclose>:
 8006ace:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ad2:	f000 baa9 	b.w	8007028 <_close_r>
	...

08006ad8 <_strtol_l.isra.0>:
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ade:	d001      	beq.n	8006ae4 <_strtol_l.isra.0+0xc>
 8006ae0:	2b24      	cmp	r3, #36	; 0x24
 8006ae2:	d906      	bls.n	8006af2 <_strtol_l.isra.0+0x1a>
 8006ae4:	f7fe fc9a 	bl	800541c <__errno>
 8006ae8:	2316      	movs	r3, #22
 8006aea:	6003      	str	r3, [r0, #0]
 8006aec:	2000      	movs	r0, #0
 8006aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006af2:	4f3a      	ldr	r7, [pc, #232]	; (8006bdc <_strtol_l.isra.0+0x104>)
 8006af4:	468e      	mov	lr, r1
 8006af6:	4676      	mov	r6, lr
 8006af8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006afc:	5de5      	ldrb	r5, [r4, r7]
 8006afe:	f015 0508 	ands.w	r5, r5, #8
 8006b02:	d1f8      	bne.n	8006af6 <_strtol_l.isra.0+0x1e>
 8006b04:	2c2d      	cmp	r4, #45	; 0x2d
 8006b06:	d134      	bne.n	8006b72 <_strtol_l.isra.0+0x9a>
 8006b08:	f89e 4000 	ldrb.w	r4, [lr]
 8006b0c:	f04f 0801 	mov.w	r8, #1
 8006b10:	f106 0e02 	add.w	lr, r6, #2
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d05c      	beq.n	8006bd2 <_strtol_l.isra.0+0xfa>
 8006b18:	2b10      	cmp	r3, #16
 8006b1a:	d10c      	bne.n	8006b36 <_strtol_l.isra.0+0x5e>
 8006b1c:	2c30      	cmp	r4, #48	; 0x30
 8006b1e:	d10a      	bne.n	8006b36 <_strtol_l.isra.0+0x5e>
 8006b20:	f89e 4000 	ldrb.w	r4, [lr]
 8006b24:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006b28:	2c58      	cmp	r4, #88	; 0x58
 8006b2a:	d14d      	bne.n	8006bc8 <_strtol_l.isra.0+0xf0>
 8006b2c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8006b30:	2310      	movs	r3, #16
 8006b32:	f10e 0e02 	add.w	lr, lr, #2
 8006b36:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8006b3a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8006b3e:	2600      	movs	r6, #0
 8006b40:	fbbc f9f3 	udiv	r9, ip, r3
 8006b44:	4635      	mov	r5, r6
 8006b46:	fb03 ca19 	mls	sl, r3, r9, ip
 8006b4a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8006b4e:	2f09      	cmp	r7, #9
 8006b50:	d818      	bhi.n	8006b84 <_strtol_l.isra.0+0xac>
 8006b52:	463c      	mov	r4, r7
 8006b54:	42a3      	cmp	r3, r4
 8006b56:	dd24      	ble.n	8006ba2 <_strtol_l.isra.0+0xca>
 8006b58:	2e00      	cmp	r6, #0
 8006b5a:	db1f      	blt.n	8006b9c <_strtol_l.isra.0+0xc4>
 8006b5c:	45a9      	cmp	r9, r5
 8006b5e:	d31d      	bcc.n	8006b9c <_strtol_l.isra.0+0xc4>
 8006b60:	d101      	bne.n	8006b66 <_strtol_l.isra.0+0x8e>
 8006b62:	45a2      	cmp	sl, r4
 8006b64:	db1a      	blt.n	8006b9c <_strtol_l.isra.0+0xc4>
 8006b66:	fb05 4503 	mla	r5, r5, r3, r4
 8006b6a:	2601      	movs	r6, #1
 8006b6c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006b70:	e7eb      	b.n	8006b4a <_strtol_l.isra.0+0x72>
 8006b72:	2c2b      	cmp	r4, #43	; 0x2b
 8006b74:	bf08      	it	eq
 8006b76:	f89e 4000 	ldrbeq.w	r4, [lr]
 8006b7a:	46a8      	mov	r8, r5
 8006b7c:	bf08      	it	eq
 8006b7e:	f106 0e02 	addeq.w	lr, r6, #2
 8006b82:	e7c7      	b.n	8006b14 <_strtol_l.isra.0+0x3c>
 8006b84:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006b88:	2f19      	cmp	r7, #25
 8006b8a:	d801      	bhi.n	8006b90 <_strtol_l.isra.0+0xb8>
 8006b8c:	3c37      	subs	r4, #55	; 0x37
 8006b8e:	e7e1      	b.n	8006b54 <_strtol_l.isra.0+0x7c>
 8006b90:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8006b94:	2f19      	cmp	r7, #25
 8006b96:	d804      	bhi.n	8006ba2 <_strtol_l.isra.0+0xca>
 8006b98:	3c57      	subs	r4, #87	; 0x57
 8006b9a:	e7db      	b.n	8006b54 <_strtol_l.isra.0+0x7c>
 8006b9c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8006ba0:	e7e4      	b.n	8006b6c <_strtol_l.isra.0+0x94>
 8006ba2:	2e00      	cmp	r6, #0
 8006ba4:	da05      	bge.n	8006bb2 <_strtol_l.isra.0+0xda>
 8006ba6:	2322      	movs	r3, #34	; 0x22
 8006ba8:	6003      	str	r3, [r0, #0]
 8006baa:	4665      	mov	r5, ip
 8006bac:	b942      	cbnz	r2, 8006bc0 <_strtol_l.isra.0+0xe8>
 8006bae:	4628      	mov	r0, r5
 8006bb0:	e79d      	b.n	8006aee <_strtol_l.isra.0+0x16>
 8006bb2:	f1b8 0f00 	cmp.w	r8, #0
 8006bb6:	d000      	beq.n	8006bba <_strtol_l.isra.0+0xe2>
 8006bb8:	426d      	negs	r5, r5
 8006bba:	2a00      	cmp	r2, #0
 8006bbc:	d0f7      	beq.n	8006bae <_strtol_l.isra.0+0xd6>
 8006bbe:	b10e      	cbz	r6, 8006bc4 <_strtol_l.isra.0+0xec>
 8006bc0:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8006bc4:	6011      	str	r1, [r2, #0]
 8006bc6:	e7f2      	b.n	8006bae <_strtol_l.isra.0+0xd6>
 8006bc8:	2430      	movs	r4, #48	; 0x30
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d1b3      	bne.n	8006b36 <_strtol_l.isra.0+0x5e>
 8006bce:	2308      	movs	r3, #8
 8006bd0:	e7b1      	b.n	8006b36 <_strtol_l.isra.0+0x5e>
 8006bd2:	2c30      	cmp	r4, #48	; 0x30
 8006bd4:	d0a4      	beq.n	8006b20 <_strtol_l.isra.0+0x48>
 8006bd6:	230a      	movs	r3, #10
 8006bd8:	e7ad      	b.n	8006b36 <_strtol_l.isra.0+0x5e>
 8006bda:	bf00      	nop
 8006bdc:	080072df 	.word	0x080072df

08006be0 <_strtol_r>:
 8006be0:	f7ff bf7a 	b.w	8006ad8 <_strtol_l.isra.0>

08006be4 <_strtoul_l.isra.0>:
 8006be4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006be8:	4e3b      	ldr	r6, [pc, #236]	; (8006cd8 <_strtoul_l.isra.0+0xf4>)
 8006bea:	4686      	mov	lr, r0
 8006bec:	468c      	mov	ip, r1
 8006bee:	4660      	mov	r0, ip
 8006bf0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8006bf4:	5da5      	ldrb	r5, [r4, r6]
 8006bf6:	f015 0508 	ands.w	r5, r5, #8
 8006bfa:	d1f8      	bne.n	8006bee <_strtoul_l.isra.0+0xa>
 8006bfc:	2c2d      	cmp	r4, #45	; 0x2d
 8006bfe:	d134      	bne.n	8006c6a <_strtoul_l.isra.0+0x86>
 8006c00:	f89c 4000 	ldrb.w	r4, [ip]
 8006c04:	f04f 0801 	mov.w	r8, #1
 8006c08:	f100 0c02 	add.w	ip, r0, #2
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d05e      	beq.n	8006cce <_strtoul_l.isra.0+0xea>
 8006c10:	2b10      	cmp	r3, #16
 8006c12:	d10c      	bne.n	8006c2e <_strtoul_l.isra.0+0x4a>
 8006c14:	2c30      	cmp	r4, #48	; 0x30
 8006c16:	d10a      	bne.n	8006c2e <_strtoul_l.isra.0+0x4a>
 8006c18:	f89c 0000 	ldrb.w	r0, [ip]
 8006c1c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006c20:	2858      	cmp	r0, #88	; 0x58
 8006c22:	d14f      	bne.n	8006cc4 <_strtoul_l.isra.0+0xe0>
 8006c24:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8006c28:	2310      	movs	r3, #16
 8006c2a:	f10c 0c02 	add.w	ip, ip, #2
 8006c2e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006c32:	2500      	movs	r5, #0
 8006c34:	fbb7 f7f3 	udiv	r7, r7, r3
 8006c38:	fb03 f907 	mul.w	r9, r3, r7
 8006c3c:	ea6f 0909 	mvn.w	r9, r9
 8006c40:	4628      	mov	r0, r5
 8006c42:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8006c46:	2e09      	cmp	r6, #9
 8006c48:	d818      	bhi.n	8006c7c <_strtoul_l.isra.0+0x98>
 8006c4a:	4634      	mov	r4, r6
 8006c4c:	42a3      	cmp	r3, r4
 8006c4e:	dd24      	ble.n	8006c9a <_strtoul_l.isra.0+0xb6>
 8006c50:	2d00      	cmp	r5, #0
 8006c52:	db1f      	blt.n	8006c94 <_strtoul_l.isra.0+0xb0>
 8006c54:	4287      	cmp	r7, r0
 8006c56:	d31d      	bcc.n	8006c94 <_strtoul_l.isra.0+0xb0>
 8006c58:	d101      	bne.n	8006c5e <_strtoul_l.isra.0+0x7a>
 8006c5a:	45a1      	cmp	r9, r4
 8006c5c:	db1a      	blt.n	8006c94 <_strtoul_l.isra.0+0xb0>
 8006c5e:	fb00 4003 	mla	r0, r0, r3, r4
 8006c62:	2501      	movs	r5, #1
 8006c64:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8006c68:	e7eb      	b.n	8006c42 <_strtoul_l.isra.0+0x5e>
 8006c6a:	2c2b      	cmp	r4, #43	; 0x2b
 8006c6c:	bf08      	it	eq
 8006c6e:	f89c 4000 	ldrbeq.w	r4, [ip]
 8006c72:	46a8      	mov	r8, r5
 8006c74:	bf08      	it	eq
 8006c76:	f100 0c02 	addeq.w	ip, r0, #2
 8006c7a:	e7c7      	b.n	8006c0c <_strtoul_l.isra.0+0x28>
 8006c7c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8006c80:	2e19      	cmp	r6, #25
 8006c82:	d801      	bhi.n	8006c88 <_strtoul_l.isra.0+0xa4>
 8006c84:	3c37      	subs	r4, #55	; 0x37
 8006c86:	e7e1      	b.n	8006c4c <_strtoul_l.isra.0+0x68>
 8006c88:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8006c8c:	2e19      	cmp	r6, #25
 8006c8e:	d804      	bhi.n	8006c9a <_strtoul_l.isra.0+0xb6>
 8006c90:	3c57      	subs	r4, #87	; 0x57
 8006c92:	e7db      	b.n	8006c4c <_strtoul_l.isra.0+0x68>
 8006c94:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006c98:	e7e4      	b.n	8006c64 <_strtoul_l.isra.0+0x80>
 8006c9a:	2d00      	cmp	r5, #0
 8006c9c:	da07      	bge.n	8006cae <_strtoul_l.isra.0+0xca>
 8006c9e:	2322      	movs	r3, #34	; 0x22
 8006ca0:	f8ce 3000 	str.w	r3, [lr]
 8006ca4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ca8:	b942      	cbnz	r2, 8006cbc <_strtoul_l.isra.0+0xd8>
 8006caa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006cae:	f1b8 0f00 	cmp.w	r8, #0
 8006cb2:	d000      	beq.n	8006cb6 <_strtoul_l.isra.0+0xd2>
 8006cb4:	4240      	negs	r0, r0
 8006cb6:	2a00      	cmp	r2, #0
 8006cb8:	d0f7      	beq.n	8006caa <_strtoul_l.isra.0+0xc6>
 8006cba:	b10d      	cbz	r5, 8006cc0 <_strtoul_l.isra.0+0xdc>
 8006cbc:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8006cc0:	6011      	str	r1, [r2, #0]
 8006cc2:	e7f2      	b.n	8006caa <_strtoul_l.isra.0+0xc6>
 8006cc4:	2430      	movs	r4, #48	; 0x30
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d1b1      	bne.n	8006c2e <_strtoul_l.isra.0+0x4a>
 8006cca:	2308      	movs	r3, #8
 8006ccc:	e7af      	b.n	8006c2e <_strtoul_l.isra.0+0x4a>
 8006cce:	2c30      	cmp	r4, #48	; 0x30
 8006cd0:	d0a2      	beq.n	8006c18 <_strtoul_l.isra.0+0x34>
 8006cd2:	230a      	movs	r3, #10
 8006cd4:	e7ab      	b.n	8006c2e <_strtoul_l.isra.0+0x4a>
 8006cd6:	bf00      	nop
 8006cd8:	080072df 	.word	0x080072df

08006cdc <_strtoul_r>:
 8006cdc:	f7ff bf82 	b.w	8006be4 <_strtoul_l.isra.0>

08006ce0 <__submore>:
 8006ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ce4:	460c      	mov	r4, r1
 8006ce6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006ce8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006cec:	4299      	cmp	r1, r3
 8006cee:	d11d      	bne.n	8006d2c <__submore+0x4c>
 8006cf0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006cf4:	f7fe ff6e 	bl	8005bd4 <_malloc_r>
 8006cf8:	b918      	cbnz	r0, 8006d02 <__submore+0x22>
 8006cfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d06:	63a3      	str	r3, [r4, #56]	; 0x38
 8006d08:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006d0c:	6360      	str	r0, [r4, #52]	; 0x34
 8006d0e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8006d12:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006d16:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8006d1a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006d1e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8006d22:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8006d26:	6020      	str	r0, [r4, #0]
 8006d28:	2000      	movs	r0, #0
 8006d2a:	e7e8      	b.n	8006cfe <__submore+0x1e>
 8006d2c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006d2e:	0077      	lsls	r7, r6, #1
 8006d30:	463a      	mov	r2, r7
 8006d32:	f000 f9c9 	bl	80070c8 <_realloc_r>
 8006d36:	4605      	mov	r5, r0
 8006d38:	2800      	cmp	r0, #0
 8006d3a:	d0de      	beq.n	8006cfa <__submore+0x1a>
 8006d3c:	eb00 0806 	add.w	r8, r0, r6
 8006d40:	4601      	mov	r1, r0
 8006d42:	4632      	mov	r2, r6
 8006d44:	4640      	mov	r0, r8
 8006d46:	f7fe fb93 	bl	8005470 <memcpy>
 8006d4a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8006d4e:	f8c4 8000 	str.w	r8, [r4]
 8006d52:	e7e9      	b.n	8006d28 <__submore+0x48>

08006d54 <_ungetc_r>:
 8006d54:	b570      	push	{r4, r5, r6, lr}
 8006d56:	4614      	mov	r4, r2
 8006d58:	1c4a      	adds	r2, r1, #1
 8006d5a:	4606      	mov	r6, r0
 8006d5c:	460d      	mov	r5, r1
 8006d5e:	d103      	bne.n	8006d68 <_ungetc_r+0x14>
 8006d60:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006d64:	4628      	mov	r0, r5
 8006d66:	bd70      	pop	{r4, r5, r6, pc}
 8006d68:	b118      	cbz	r0, 8006d72 <_ungetc_r+0x1e>
 8006d6a:	6983      	ldr	r3, [r0, #24]
 8006d6c:	b90b      	cbnz	r3, 8006d72 <_ungetc_r+0x1e>
 8006d6e:	f7fe fdb7 	bl	80058e0 <__sinit>
 8006d72:	4b41      	ldr	r3, [pc, #260]	; (8006e78 <_ungetc_r+0x124>)
 8006d74:	429c      	cmp	r4, r3
 8006d76:	d11d      	bne.n	8006db4 <_ungetc_r+0x60>
 8006d78:	6874      	ldr	r4, [r6, #4]
 8006d7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d7c:	07db      	lsls	r3, r3, #31
 8006d7e:	d405      	bmi.n	8006d8c <_ungetc_r+0x38>
 8006d80:	89a3      	ldrh	r3, [r4, #12]
 8006d82:	0598      	lsls	r0, r3, #22
 8006d84:	d402      	bmi.n	8006d8c <_ungetc_r+0x38>
 8006d86:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d88:	f7fe fe65 	bl	8005a56 <__retarget_lock_acquire_recursive>
 8006d8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d90:	f023 0320 	bic.w	r3, r3, #32
 8006d94:	0759      	lsls	r1, r3, #29
 8006d96:	81a3      	strh	r3, [r4, #12]
 8006d98:	b29a      	uxth	r2, r3
 8006d9a:	d42d      	bmi.n	8006df8 <_ungetc_r+0xa4>
 8006d9c:	06d3      	lsls	r3, r2, #27
 8006d9e:	d413      	bmi.n	8006dc8 <_ungetc_r+0x74>
 8006da0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006da2:	07dd      	lsls	r5, r3, #31
 8006da4:	d4dc      	bmi.n	8006d60 <_ungetc_r+0xc>
 8006da6:	f412 7f00 	tst.w	r2, #512	; 0x200
 8006daa:	d1d9      	bne.n	8006d60 <_ungetc_r+0xc>
 8006dac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dae:	f7fe fe53 	bl	8005a58 <__retarget_lock_release_recursive>
 8006db2:	e7d5      	b.n	8006d60 <_ungetc_r+0xc>
 8006db4:	4b31      	ldr	r3, [pc, #196]	; (8006e7c <_ungetc_r+0x128>)
 8006db6:	429c      	cmp	r4, r3
 8006db8:	d101      	bne.n	8006dbe <_ungetc_r+0x6a>
 8006dba:	68b4      	ldr	r4, [r6, #8]
 8006dbc:	e7dd      	b.n	8006d7a <_ungetc_r+0x26>
 8006dbe:	4b30      	ldr	r3, [pc, #192]	; (8006e80 <_ungetc_r+0x12c>)
 8006dc0:	429c      	cmp	r4, r3
 8006dc2:	bf08      	it	eq
 8006dc4:	68f4      	ldreq	r4, [r6, #12]
 8006dc6:	e7d8      	b.n	8006d7a <_ungetc_r+0x26>
 8006dc8:	0710      	lsls	r0, r2, #28
 8006dca:	d511      	bpl.n	8006df0 <_ungetc_r+0x9c>
 8006dcc:	4621      	mov	r1, r4
 8006dce:	4630      	mov	r0, r6
 8006dd0:	f7fe fce0 	bl	8005794 <_fflush_r>
 8006dd4:	b130      	cbz	r0, 8006de4 <_ungetc_r+0x90>
 8006dd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006dd8:	07d9      	lsls	r1, r3, #31
 8006dda:	d4c1      	bmi.n	8006d60 <_ungetc_r+0xc>
 8006ddc:	89a3      	ldrh	r3, [r4, #12]
 8006dde:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006de2:	e7e2      	b.n	8006daa <_ungetc_r+0x56>
 8006de4:	89a3      	ldrh	r3, [r4, #12]
 8006de6:	60a0      	str	r0, [r4, #8]
 8006de8:	f023 0308 	bic.w	r3, r3, #8
 8006dec:	81a3      	strh	r3, [r4, #12]
 8006dee:	61a0      	str	r0, [r4, #24]
 8006df0:	89a3      	ldrh	r3, [r4, #12]
 8006df2:	f043 0304 	orr.w	r3, r3, #4
 8006df6:	81a3      	strh	r3, [r4, #12]
 8006df8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006dfa:	6862      	ldr	r2, [r4, #4]
 8006dfc:	b2ed      	uxtb	r5, r5
 8006dfe:	b1d3      	cbz	r3, 8006e36 <_ungetc_r+0xe2>
 8006e00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006e02:	4293      	cmp	r3, r2
 8006e04:	dc05      	bgt.n	8006e12 <_ungetc_r+0xbe>
 8006e06:	4621      	mov	r1, r4
 8006e08:	4630      	mov	r0, r6
 8006e0a:	f7ff ff69 	bl	8006ce0 <__submore>
 8006e0e:	2800      	cmp	r0, #0
 8006e10:	d1e1      	bne.n	8006dd6 <_ungetc_r+0x82>
 8006e12:	6823      	ldr	r3, [r4, #0]
 8006e14:	1e5a      	subs	r2, r3, #1
 8006e16:	6022      	str	r2, [r4, #0]
 8006e18:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006e1c:	6863      	ldr	r3, [r4, #4]
 8006e1e:	3301      	adds	r3, #1
 8006e20:	6063      	str	r3, [r4, #4]
 8006e22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e24:	07da      	lsls	r2, r3, #31
 8006e26:	d49d      	bmi.n	8006d64 <_ungetc_r+0x10>
 8006e28:	89a3      	ldrh	r3, [r4, #12]
 8006e2a:	059b      	lsls	r3, r3, #22
 8006e2c:	d49a      	bmi.n	8006d64 <_ungetc_r+0x10>
 8006e2e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e30:	f7fe fe12 	bl	8005a58 <__retarget_lock_release_recursive>
 8006e34:	e796      	b.n	8006d64 <_ungetc_r+0x10>
 8006e36:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006e38:	6920      	ldr	r0, [r4, #16]
 8006e3a:	6823      	ldr	r3, [r4, #0]
 8006e3c:	f001 0101 	and.w	r1, r1, #1
 8006e40:	b160      	cbz	r0, 8006e5c <_ungetc_r+0x108>
 8006e42:	4298      	cmp	r0, r3
 8006e44:	d20a      	bcs.n	8006e5c <_ungetc_r+0x108>
 8006e46:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8006e4a:	42a8      	cmp	r0, r5
 8006e4c:	d106      	bne.n	8006e5c <_ungetc_r+0x108>
 8006e4e:	3b01      	subs	r3, #1
 8006e50:	3201      	adds	r2, #1
 8006e52:	6023      	str	r3, [r4, #0]
 8006e54:	6062      	str	r2, [r4, #4]
 8006e56:	2900      	cmp	r1, #0
 8006e58:	d184      	bne.n	8006d64 <_ungetc_r+0x10>
 8006e5a:	e7e5      	b.n	8006e28 <_ungetc_r+0xd4>
 8006e5c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8006e60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e64:	6363      	str	r3, [r4, #52]	; 0x34
 8006e66:	2303      	movs	r3, #3
 8006e68:	63a3      	str	r3, [r4, #56]	; 0x38
 8006e6a:	4623      	mov	r3, r4
 8006e6c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006e70:	6023      	str	r3, [r4, #0]
 8006e72:	2301      	movs	r3, #1
 8006e74:	6063      	str	r3, [r4, #4]
 8006e76:	e7ee      	b.n	8006e56 <_ungetc_r+0x102>
 8006e78:	08007250 	.word	0x08007250
 8006e7c:	08007270 	.word	0x08007270
 8006e80:	08007230 	.word	0x08007230

08006e84 <__swbuf_r>:
 8006e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e86:	460e      	mov	r6, r1
 8006e88:	4614      	mov	r4, r2
 8006e8a:	4605      	mov	r5, r0
 8006e8c:	b118      	cbz	r0, 8006e96 <__swbuf_r+0x12>
 8006e8e:	6983      	ldr	r3, [r0, #24]
 8006e90:	b90b      	cbnz	r3, 8006e96 <__swbuf_r+0x12>
 8006e92:	f7fe fd25 	bl	80058e0 <__sinit>
 8006e96:	4b21      	ldr	r3, [pc, #132]	; (8006f1c <__swbuf_r+0x98>)
 8006e98:	429c      	cmp	r4, r3
 8006e9a:	d12b      	bne.n	8006ef4 <__swbuf_r+0x70>
 8006e9c:	686c      	ldr	r4, [r5, #4]
 8006e9e:	69a3      	ldr	r3, [r4, #24]
 8006ea0:	60a3      	str	r3, [r4, #8]
 8006ea2:	89a3      	ldrh	r3, [r4, #12]
 8006ea4:	071a      	lsls	r2, r3, #28
 8006ea6:	d52f      	bpl.n	8006f08 <__swbuf_r+0x84>
 8006ea8:	6923      	ldr	r3, [r4, #16]
 8006eaa:	b36b      	cbz	r3, 8006f08 <__swbuf_r+0x84>
 8006eac:	6923      	ldr	r3, [r4, #16]
 8006eae:	6820      	ldr	r0, [r4, #0]
 8006eb0:	1ac0      	subs	r0, r0, r3
 8006eb2:	6963      	ldr	r3, [r4, #20]
 8006eb4:	b2f6      	uxtb	r6, r6
 8006eb6:	4283      	cmp	r3, r0
 8006eb8:	4637      	mov	r7, r6
 8006eba:	dc04      	bgt.n	8006ec6 <__swbuf_r+0x42>
 8006ebc:	4621      	mov	r1, r4
 8006ebe:	4628      	mov	r0, r5
 8006ec0:	f7fe fc68 	bl	8005794 <_fflush_r>
 8006ec4:	bb30      	cbnz	r0, 8006f14 <__swbuf_r+0x90>
 8006ec6:	68a3      	ldr	r3, [r4, #8]
 8006ec8:	3b01      	subs	r3, #1
 8006eca:	60a3      	str	r3, [r4, #8]
 8006ecc:	6823      	ldr	r3, [r4, #0]
 8006ece:	1c5a      	adds	r2, r3, #1
 8006ed0:	6022      	str	r2, [r4, #0]
 8006ed2:	701e      	strb	r6, [r3, #0]
 8006ed4:	6963      	ldr	r3, [r4, #20]
 8006ed6:	3001      	adds	r0, #1
 8006ed8:	4283      	cmp	r3, r0
 8006eda:	d004      	beq.n	8006ee6 <__swbuf_r+0x62>
 8006edc:	89a3      	ldrh	r3, [r4, #12]
 8006ede:	07db      	lsls	r3, r3, #31
 8006ee0:	d506      	bpl.n	8006ef0 <__swbuf_r+0x6c>
 8006ee2:	2e0a      	cmp	r6, #10
 8006ee4:	d104      	bne.n	8006ef0 <__swbuf_r+0x6c>
 8006ee6:	4621      	mov	r1, r4
 8006ee8:	4628      	mov	r0, r5
 8006eea:	f7fe fc53 	bl	8005794 <_fflush_r>
 8006eee:	b988      	cbnz	r0, 8006f14 <__swbuf_r+0x90>
 8006ef0:	4638      	mov	r0, r7
 8006ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ef4:	4b0a      	ldr	r3, [pc, #40]	; (8006f20 <__swbuf_r+0x9c>)
 8006ef6:	429c      	cmp	r4, r3
 8006ef8:	d101      	bne.n	8006efe <__swbuf_r+0x7a>
 8006efa:	68ac      	ldr	r4, [r5, #8]
 8006efc:	e7cf      	b.n	8006e9e <__swbuf_r+0x1a>
 8006efe:	4b09      	ldr	r3, [pc, #36]	; (8006f24 <__swbuf_r+0xa0>)
 8006f00:	429c      	cmp	r4, r3
 8006f02:	bf08      	it	eq
 8006f04:	68ec      	ldreq	r4, [r5, #12]
 8006f06:	e7ca      	b.n	8006e9e <__swbuf_r+0x1a>
 8006f08:	4621      	mov	r1, r4
 8006f0a:	4628      	mov	r0, r5
 8006f0c:	f000 f81e 	bl	8006f4c <__swsetup_r>
 8006f10:	2800      	cmp	r0, #0
 8006f12:	d0cb      	beq.n	8006eac <__swbuf_r+0x28>
 8006f14:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006f18:	e7ea      	b.n	8006ef0 <__swbuf_r+0x6c>
 8006f1a:	bf00      	nop
 8006f1c:	08007250 	.word	0x08007250
 8006f20:	08007270 	.word	0x08007270
 8006f24:	08007230 	.word	0x08007230

08006f28 <_write_r>:
 8006f28:	b538      	push	{r3, r4, r5, lr}
 8006f2a:	4d07      	ldr	r5, [pc, #28]	; (8006f48 <_write_r+0x20>)
 8006f2c:	4604      	mov	r4, r0
 8006f2e:	4608      	mov	r0, r1
 8006f30:	4611      	mov	r1, r2
 8006f32:	2200      	movs	r2, #0
 8006f34:	602a      	str	r2, [r5, #0]
 8006f36:	461a      	mov	r2, r3
 8006f38:	f7f9 fce8 	bl	800090c <_write>
 8006f3c:	1c43      	adds	r3, r0, #1
 8006f3e:	d102      	bne.n	8006f46 <_write_r+0x1e>
 8006f40:	682b      	ldr	r3, [r5, #0]
 8006f42:	b103      	cbz	r3, 8006f46 <_write_r+0x1e>
 8006f44:	6023      	str	r3, [r4, #0]
 8006f46:	bd38      	pop	{r3, r4, r5, pc}
 8006f48:	20004a94 	.word	0x20004a94

08006f4c <__swsetup_r>:
 8006f4c:	4b32      	ldr	r3, [pc, #200]	; (8007018 <__swsetup_r+0xcc>)
 8006f4e:	b570      	push	{r4, r5, r6, lr}
 8006f50:	681d      	ldr	r5, [r3, #0]
 8006f52:	4606      	mov	r6, r0
 8006f54:	460c      	mov	r4, r1
 8006f56:	b125      	cbz	r5, 8006f62 <__swsetup_r+0x16>
 8006f58:	69ab      	ldr	r3, [r5, #24]
 8006f5a:	b913      	cbnz	r3, 8006f62 <__swsetup_r+0x16>
 8006f5c:	4628      	mov	r0, r5
 8006f5e:	f7fe fcbf 	bl	80058e0 <__sinit>
 8006f62:	4b2e      	ldr	r3, [pc, #184]	; (800701c <__swsetup_r+0xd0>)
 8006f64:	429c      	cmp	r4, r3
 8006f66:	d10f      	bne.n	8006f88 <__swsetup_r+0x3c>
 8006f68:	686c      	ldr	r4, [r5, #4]
 8006f6a:	89a3      	ldrh	r3, [r4, #12]
 8006f6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f70:	0719      	lsls	r1, r3, #28
 8006f72:	d42c      	bmi.n	8006fce <__swsetup_r+0x82>
 8006f74:	06dd      	lsls	r5, r3, #27
 8006f76:	d411      	bmi.n	8006f9c <__swsetup_r+0x50>
 8006f78:	2309      	movs	r3, #9
 8006f7a:	6033      	str	r3, [r6, #0]
 8006f7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006f80:	81a3      	strh	r3, [r4, #12]
 8006f82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f86:	e03e      	b.n	8007006 <__swsetup_r+0xba>
 8006f88:	4b25      	ldr	r3, [pc, #148]	; (8007020 <__swsetup_r+0xd4>)
 8006f8a:	429c      	cmp	r4, r3
 8006f8c:	d101      	bne.n	8006f92 <__swsetup_r+0x46>
 8006f8e:	68ac      	ldr	r4, [r5, #8]
 8006f90:	e7eb      	b.n	8006f6a <__swsetup_r+0x1e>
 8006f92:	4b24      	ldr	r3, [pc, #144]	; (8007024 <__swsetup_r+0xd8>)
 8006f94:	429c      	cmp	r4, r3
 8006f96:	bf08      	it	eq
 8006f98:	68ec      	ldreq	r4, [r5, #12]
 8006f9a:	e7e6      	b.n	8006f6a <__swsetup_r+0x1e>
 8006f9c:	0758      	lsls	r0, r3, #29
 8006f9e:	d512      	bpl.n	8006fc6 <__swsetup_r+0x7a>
 8006fa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fa2:	b141      	cbz	r1, 8006fb6 <__swsetup_r+0x6a>
 8006fa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006fa8:	4299      	cmp	r1, r3
 8006faa:	d002      	beq.n	8006fb2 <__swsetup_r+0x66>
 8006fac:	4630      	mov	r0, r6
 8006fae:	f7fe fdc1 	bl	8005b34 <_free_r>
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	6363      	str	r3, [r4, #52]	; 0x34
 8006fb6:	89a3      	ldrh	r3, [r4, #12]
 8006fb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006fbc:	81a3      	strh	r3, [r4, #12]
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	6063      	str	r3, [r4, #4]
 8006fc2:	6923      	ldr	r3, [r4, #16]
 8006fc4:	6023      	str	r3, [r4, #0]
 8006fc6:	89a3      	ldrh	r3, [r4, #12]
 8006fc8:	f043 0308 	orr.w	r3, r3, #8
 8006fcc:	81a3      	strh	r3, [r4, #12]
 8006fce:	6923      	ldr	r3, [r4, #16]
 8006fd0:	b94b      	cbnz	r3, 8006fe6 <__swsetup_r+0x9a>
 8006fd2:	89a3      	ldrh	r3, [r4, #12]
 8006fd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006fd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fdc:	d003      	beq.n	8006fe6 <__swsetup_r+0x9a>
 8006fde:	4621      	mov	r1, r4
 8006fe0:	4630      	mov	r0, r6
 8006fe2:	f7fe fd5f 	bl	8005aa4 <__smakebuf_r>
 8006fe6:	89a0      	ldrh	r0, [r4, #12]
 8006fe8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006fec:	f010 0301 	ands.w	r3, r0, #1
 8006ff0:	d00a      	beq.n	8007008 <__swsetup_r+0xbc>
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	60a3      	str	r3, [r4, #8]
 8006ff6:	6963      	ldr	r3, [r4, #20]
 8006ff8:	425b      	negs	r3, r3
 8006ffa:	61a3      	str	r3, [r4, #24]
 8006ffc:	6923      	ldr	r3, [r4, #16]
 8006ffe:	b943      	cbnz	r3, 8007012 <__swsetup_r+0xc6>
 8007000:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007004:	d1ba      	bne.n	8006f7c <__swsetup_r+0x30>
 8007006:	bd70      	pop	{r4, r5, r6, pc}
 8007008:	0781      	lsls	r1, r0, #30
 800700a:	bf58      	it	pl
 800700c:	6963      	ldrpl	r3, [r4, #20]
 800700e:	60a3      	str	r3, [r4, #8]
 8007010:	e7f4      	b.n	8006ffc <__swsetup_r+0xb0>
 8007012:	2000      	movs	r0, #0
 8007014:	e7f7      	b.n	8007006 <__swsetup_r+0xba>
 8007016:	bf00      	nop
 8007018:	20000010 	.word	0x20000010
 800701c:	08007250 	.word	0x08007250
 8007020:	08007270 	.word	0x08007270
 8007024:	08007230 	.word	0x08007230

08007028 <_close_r>:
 8007028:	b538      	push	{r3, r4, r5, lr}
 800702a:	4d06      	ldr	r5, [pc, #24]	; (8007044 <_close_r+0x1c>)
 800702c:	2300      	movs	r3, #0
 800702e:	4604      	mov	r4, r0
 8007030:	4608      	mov	r0, r1
 8007032:	602b      	str	r3, [r5, #0]
 8007034:	f7f9 fc96 	bl	8000964 <_close>
 8007038:	1c43      	adds	r3, r0, #1
 800703a:	d102      	bne.n	8007042 <_close_r+0x1a>
 800703c:	682b      	ldr	r3, [r5, #0]
 800703e:	b103      	cbz	r3, 8007042 <_close_r+0x1a>
 8007040:	6023      	str	r3, [r4, #0]
 8007042:	bd38      	pop	{r3, r4, r5, pc}
 8007044:	20004a94 	.word	0x20004a94

08007048 <_fstat_r>:
 8007048:	b538      	push	{r3, r4, r5, lr}
 800704a:	4d07      	ldr	r5, [pc, #28]	; (8007068 <_fstat_r+0x20>)
 800704c:	2300      	movs	r3, #0
 800704e:	4604      	mov	r4, r0
 8007050:	4608      	mov	r0, r1
 8007052:	4611      	mov	r1, r2
 8007054:	602b      	str	r3, [r5, #0]
 8007056:	f7f9 fcd5 	bl	8000a04 <_fstat>
 800705a:	1c43      	adds	r3, r0, #1
 800705c:	d102      	bne.n	8007064 <_fstat_r+0x1c>
 800705e:	682b      	ldr	r3, [r5, #0]
 8007060:	b103      	cbz	r3, 8007064 <_fstat_r+0x1c>
 8007062:	6023      	str	r3, [r4, #0]
 8007064:	bd38      	pop	{r3, r4, r5, pc}
 8007066:	bf00      	nop
 8007068:	20004a94 	.word	0x20004a94

0800706c <_isatty_r>:
 800706c:	b538      	push	{r3, r4, r5, lr}
 800706e:	4d06      	ldr	r5, [pc, #24]	; (8007088 <_isatty_r+0x1c>)
 8007070:	2300      	movs	r3, #0
 8007072:	4604      	mov	r4, r0
 8007074:	4608      	mov	r0, r1
 8007076:	602b      	str	r3, [r5, #0]
 8007078:	f7f9 fc32 	bl	80008e0 <_isatty>
 800707c:	1c43      	adds	r3, r0, #1
 800707e:	d102      	bne.n	8007086 <_isatty_r+0x1a>
 8007080:	682b      	ldr	r3, [r5, #0]
 8007082:	b103      	cbz	r3, 8007086 <_isatty_r+0x1a>
 8007084:	6023      	str	r3, [r4, #0]
 8007086:	bd38      	pop	{r3, r4, r5, pc}
 8007088:	20004a94 	.word	0x20004a94

0800708c <_lseek_r>:
 800708c:	b538      	push	{r3, r4, r5, lr}
 800708e:	4d07      	ldr	r5, [pc, #28]	; (80070ac <_lseek_r+0x20>)
 8007090:	4604      	mov	r4, r0
 8007092:	4608      	mov	r0, r1
 8007094:	4611      	mov	r1, r2
 8007096:	2200      	movs	r2, #0
 8007098:	602a      	str	r2, [r5, #0]
 800709a:	461a      	mov	r2, r3
 800709c:	f7f9 fc79 	bl	8000992 <_lseek>
 80070a0:	1c43      	adds	r3, r0, #1
 80070a2:	d102      	bne.n	80070aa <_lseek_r+0x1e>
 80070a4:	682b      	ldr	r3, [r5, #0]
 80070a6:	b103      	cbz	r3, 80070aa <_lseek_r+0x1e>
 80070a8:	6023      	str	r3, [r4, #0]
 80070aa:	bd38      	pop	{r3, r4, r5, pc}
 80070ac:	20004a94 	.word	0x20004a94

080070b0 <__malloc_lock>:
 80070b0:	4801      	ldr	r0, [pc, #4]	; (80070b8 <__malloc_lock+0x8>)
 80070b2:	f7fe bcd0 	b.w	8005a56 <__retarget_lock_acquire_recursive>
 80070b6:	bf00      	nop
 80070b8:	20004a8c 	.word	0x20004a8c

080070bc <__malloc_unlock>:
 80070bc:	4801      	ldr	r0, [pc, #4]	; (80070c4 <__malloc_unlock+0x8>)
 80070be:	f7fe bccb 	b.w	8005a58 <__retarget_lock_release_recursive>
 80070c2:	bf00      	nop
 80070c4:	20004a8c 	.word	0x20004a8c

080070c8 <_realloc_r>:
 80070c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ca:	4607      	mov	r7, r0
 80070cc:	4614      	mov	r4, r2
 80070ce:	460e      	mov	r6, r1
 80070d0:	b921      	cbnz	r1, 80070dc <_realloc_r+0x14>
 80070d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80070d6:	4611      	mov	r1, r2
 80070d8:	f7fe bd7c 	b.w	8005bd4 <_malloc_r>
 80070dc:	b922      	cbnz	r2, 80070e8 <_realloc_r+0x20>
 80070de:	f7fe fd29 	bl	8005b34 <_free_r>
 80070e2:	4625      	mov	r5, r4
 80070e4:	4628      	mov	r0, r5
 80070e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070e8:	f000 f826 	bl	8007138 <_malloc_usable_size_r>
 80070ec:	42a0      	cmp	r0, r4
 80070ee:	d20f      	bcs.n	8007110 <_realloc_r+0x48>
 80070f0:	4621      	mov	r1, r4
 80070f2:	4638      	mov	r0, r7
 80070f4:	f7fe fd6e 	bl	8005bd4 <_malloc_r>
 80070f8:	4605      	mov	r5, r0
 80070fa:	2800      	cmp	r0, #0
 80070fc:	d0f2      	beq.n	80070e4 <_realloc_r+0x1c>
 80070fe:	4631      	mov	r1, r6
 8007100:	4622      	mov	r2, r4
 8007102:	f7fe f9b5 	bl	8005470 <memcpy>
 8007106:	4631      	mov	r1, r6
 8007108:	4638      	mov	r0, r7
 800710a:	f7fe fd13 	bl	8005b34 <_free_r>
 800710e:	e7e9      	b.n	80070e4 <_realloc_r+0x1c>
 8007110:	4635      	mov	r5, r6
 8007112:	e7e7      	b.n	80070e4 <_realloc_r+0x1c>

08007114 <_read_r>:
 8007114:	b538      	push	{r3, r4, r5, lr}
 8007116:	4d07      	ldr	r5, [pc, #28]	; (8007134 <_read_r+0x20>)
 8007118:	4604      	mov	r4, r0
 800711a:	4608      	mov	r0, r1
 800711c:	4611      	mov	r1, r2
 800711e:	2200      	movs	r2, #0
 8007120:	602a      	str	r2, [r5, #0]
 8007122:	461a      	mov	r2, r3
 8007124:	f7f9 fc46 	bl	80009b4 <_read>
 8007128:	1c43      	adds	r3, r0, #1
 800712a:	d102      	bne.n	8007132 <_read_r+0x1e>
 800712c:	682b      	ldr	r3, [r5, #0]
 800712e:	b103      	cbz	r3, 8007132 <_read_r+0x1e>
 8007130:	6023      	str	r3, [r4, #0]
 8007132:	bd38      	pop	{r3, r4, r5, pc}
 8007134:	20004a94 	.word	0x20004a94

08007138 <_malloc_usable_size_r>:
 8007138:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800713c:	1f18      	subs	r0, r3, #4
 800713e:	2b00      	cmp	r3, #0
 8007140:	bfbc      	itt	lt
 8007142:	580b      	ldrlt	r3, [r1, r0]
 8007144:	18c0      	addlt	r0, r0, r3
 8007146:	4770      	bx	lr

08007148 <_init>:
 8007148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800714a:	bf00      	nop
 800714c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800714e:	bc08      	pop	{r3}
 8007150:	469e      	mov	lr, r3
 8007152:	4770      	bx	lr

08007154 <_fini>:
 8007154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007156:	bf00      	nop
 8007158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800715a:	bc08      	pop	{r3}
 800715c:	469e      	mov	lr, r3
 800715e:	4770      	bx	lr
